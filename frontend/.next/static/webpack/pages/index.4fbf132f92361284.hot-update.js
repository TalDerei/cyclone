/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/@noir-lang/barretenberg/dest/account_id/account_alias_id.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/account_id/account_alias_id.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountAliasId = void 0;\nconst alias_hash_1 = __webpack_require__(/*! ./alias_hash */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/alias_hash.js\");\nclass AccountAliasId {\n    constructor(aliasHash, accountNonce) {\n        this.aliasHash = aliasHash;\n        this.accountNonce = accountNonce;\n    }\n    static fromAlias(alias, accountNonce, blake2s) {\n        return new AccountAliasId(alias_hash_1.AliasHash.fromAlias(alias, blake2s), accountNonce);\n    }\n    static random() {\n        return new AccountAliasId(alias_hash_1.AliasHash.random(), 0);\n    }\n    static fromBuffer(id) {\n        if (id.length !== 32) {\n            throw new Error('Invalid id buffer.');\n        }\n        const aliasHash = new alias_hash_1.AliasHash(id.slice(4, 32));\n        const accountNonce = id.readUInt32BE(0);\n        return new AccountAliasId(aliasHash, accountNonce);\n    }\n    toBuffer() {\n        const accountNonceBuf = Buffer.alloc(4);\n        accountNonceBuf.writeUInt32BE(this.accountNonce);\n        return Buffer.concat([accountNonceBuf, this.aliasHash.toBuffer()]);\n    }\n    toString() {\n        return `0x${this.toBuffer().toString('hex')}`;\n    }\n    equals(rhs) {\n        return this.aliasHash.equals(rhs.aliasHash) && this.accountNonce === rhs.accountNonce;\n    }\n}\nexports.AccountAliasId = AccountAliasId;\nAccountAliasId.ZERO = AccountAliasId.fromBuffer(Buffer.alloc(32));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9hbGlhc19pZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50X2lkL2FjY291bnRfYWxpYXNfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQXlDO0FBRXpDLE1BQWEsY0FBYztJQUd6QixZQUFtQixTQUFvQixFQUFTLFlBQW9CO1FBQWpELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBUyxpQkFBWSxHQUFaLFlBQVksQ0FBUTtJQUFHLENBQUM7SUFFeEUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFhLEVBQUUsWUFBb0IsRUFBRSxPQUFnQjtRQUNwRSxPQUFPLElBQUksY0FBYyxDQUFDLHNCQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU07UUFDWCxPQUFPLElBQUksY0FBYyxDQUFDLHNCQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBVTtRQUNqQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztRQUVELE1BQU0sU0FBUyxHQUFHLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFtQjtRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDeEYsQ0FBQzs7QUFuQ0gsd0NBb0NDO0FBbkNRLG1CQUFJLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hY2NvdW50X2lkL2FjY291bnRfYWxpYXNfaWQuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixxQkFBcUIsbUJBQU8sQ0FBQywwRkFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixnREFBZ0QsTUFBTTtBQUN0RCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvYWNjb3VudF9pZC9hY2NvdW50X2FsaWFzX2lkLmpzP2FhMDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFjY291bnRBbGlhc0lkID0gdm9pZCAwO1xuY29uc3QgYWxpYXNfaGFzaF8xID0gcmVxdWlyZShcIi4vYWxpYXNfaGFzaFwiKTtcbmNsYXNzIEFjY291bnRBbGlhc0lkIHtcbiAgICBjb25zdHJ1Y3RvcihhbGlhc0hhc2gsIGFjY291bnROb25jZSkge1xuICAgICAgICB0aGlzLmFsaWFzSGFzaCA9IGFsaWFzSGFzaDtcbiAgICAgICAgdGhpcy5hY2NvdW50Tm9uY2UgPSBhY2NvdW50Tm9uY2U7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQWxpYXMoYWxpYXMsIGFjY291bnROb25jZSwgYmxha2Uycykge1xuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRBbGlhc0lkKGFsaWFzX2hhc2hfMS5BbGlhc0hhc2guZnJvbUFsaWFzKGFsaWFzLCBibGFrZTJzKSwgYWNjb3VudE5vbmNlKTtcbiAgICB9XG4gICAgc3RhdGljIHJhbmRvbSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50QWxpYXNJZChhbGlhc19oYXNoXzEuQWxpYXNIYXNoLnJhbmRvbSgpLCAwKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CdWZmZXIoaWQpIHtcbiAgICAgICAgaWYgKGlkLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpZCBidWZmZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxpYXNIYXNoID0gbmV3IGFsaWFzX2hhc2hfMS5BbGlhc0hhc2goaWQuc2xpY2UoNCwgMzIpKTtcbiAgICAgICAgY29uc3QgYWNjb3VudE5vbmNlID0gaWQucmVhZFVJbnQzMkJFKDApO1xuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRBbGlhc0lkKGFsaWFzSGFzaCwgYWNjb3VudE5vbmNlKTtcbiAgICB9XG4gICAgdG9CdWZmZXIoKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnROb25jZUJ1ZiA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICAgICAgYWNjb3VudE5vbmNlQnVmLndyaXRlVUludDMyQkUodGhpcy5hY2NvdW50Tm9uY2UpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbYWNjb3VudE5vbmNlQnVmLCB0aGlzLmFsaWFzSGFzaC50b0J1ZmZlcigpXSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYDB4JHt0aGlzLnRvQnVmZmVyKCkudG9TdHJpbmcoJ2hleCcpfWA7XG4gICAgfVxuICAgIGVxdWFscyhyaHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxpYXNIYXNoLmVxdWFscyhyaHMuYWxpYXNIYXNoKSAmJiB0aGlzLmFjY291bnROb25jZSA9PT0gcmhzLmFjY291bnROb25jZTtcbiAgICB9XG59XG5leHBvcnRzLkFjY291bnRBbGlhc0lkID0gQWNjb3VudEFsaWFzSWQ7XG5BY2NvdW50QWxpYXNJZC5aRVJPID0gQWNjb3VudEFsaWFzSWQuZnJvbUJ1ZmZlcihCdWZmZXIuYWxsb2MoMzIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXTmpiM1Z1ZEY5aGJHbGhjMTlwWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTloWTJOdmRXNTBYMmxrTDJGalkyOTFiblJmWVd4cFlYTmZhV1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRMEVzTmtOQlFYbERPMEZCUlhwRExFMUJRV0VzWTBGQll6dEpRVWQ2UWl4WlFVRnRRaXhUUVVGdlFpeEZRVUZUTEZsQlFXOUNPMUZCUVdwRUxHTkJRVk1zUjBGQlZDeFRRVUZUTEVOQlFWYzdVVUZCVXl4cFFrRkJXU3hIUVVGYUxGbEJRVmtzUTBGQlVUdEpRVUZITEVOQlFVTTdTVUZGZUVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZoTEVWQlFVVXNXVUZCYjBJc1JVRkJSU3hQUVVGblFqdFJRVU53UlN4UFFVRlBMRWxCUVVrc1kwRkJZeXhEUVVGRExITkNRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hQUVVGUExFTkJRVU1zUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXp0SlFVTXZSU3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEUxQlFVMDdVVUZEV0N4UFFVRlBMRWxCUVVrc1kwRkJZeXhEUVVGRExITkNRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGJrUXNRMEZCUXp0SlFVVk5MRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlZUdFJRVU5xUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFdEJRVXNzUlVGQlJTeEZRVUZGTzFsQlEzQkNMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRUUVVOMlF6dFJRVVZFTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc2MwSkJRVk1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEVMRTFCUVUwc1dVRkJXU3hIUVVGSExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRlRU1zVDBGQlR5eEpRVUZKTEdOQlFXTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRGNrUXNRMEZCUXp0SlFVVkVMRkZCUVZFN1VVRkRUaXhOUVVGTkxHVkJRV1VzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM2hETEdWQlFXVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFGQlEycEVMRTlCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEdWQlFXVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnlSU3hEUVVGRE8wbEJSVVFzVVVGQlVUdFJRVU5PTEU5QlFVOHNTMEZCU3l4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRhRVFzUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4SFFVRnRRanRSUVVONFFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hMUVVGTExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTTdTVUZEZUVZc1EwRkJRenM3UVVGdVEwZ3NkME5CYjBORE8wRkJia05STEcxQ1FVRkpMRWRCUVVjc1kwRkJZeXhEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/account_id/account_alias_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/account_id/account_id.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/account_id/account_id.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountId = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nclass AccountId {\n    constructor(publicKey, accountNonce) {\n        this.publicKey = publicKey;\n        this.accountNonce = accountNonce;\n    }\n    static fromBuffer(id) {\n        if (id.length !== 68) {\n            throw new Error('Invalid id buffer.');\n        }\n        const publicKey = new address_1.GrumpkinAddress(id.slice(0, 64));\n        const accountNonce = id.readUInt32BE(64);\n        return new AccountId(publicKey, accountNonce);\n    }\n    static fromString(idStr) {\n        const [match, publicKeyStr, accountNonceStr] = idStr.match(/^0x([0-9a-f]{128}) \\(([0-9]+)\\)$/i) || [];\n        if (!match) {\n            throw new Error('Invalid id string.');\n        }\n        const publicKey = address_1.GrumpkinAddress.fromString(publicKeyStr);\n        return new AccountId(publicKey, +accountNonceStr);\n    }\n    static random() {\n        const randomNonce = Math.floor(Math.random() * 2 ** 32);\n        return new AccountId(address_1.GrumpkinAddress.random(), randomNonce);\n    }\n    equals(rhs) {\n        return this.toBuffer().equals(rhs.toBuffer());\n    }\n    toBuffer() {\n        const accountNonceBuf = Buffer.alloc(4);\n        accountNonceBuf.writeUInt32BE(this.accountNonce);\n        return Buffer.concat([this.publicKey.toBuffer(), accountNonceBuf]);\n    }\n    toString() {\n        return `${this.publicKey.toString()} (${this.accountNonce})`;\n    }\n    toShortString() {\n        return `${this.publicKey.toString().slice(0, 10)}/${this.accountNonce}`;\n    }\n}\nexports.AccountId = AccountId;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9pZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50X2lkL2FjY291bnRfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQTZDO0FBRTdDLE1BQWEsU0FBUztJQUNwQixZQUFtQixTQUEwQixFQUFTLFlBQW9CO1FBQXZELGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBQVMsaUJBQVksR0FBWixZQUFZLENBQVE7SUFBRyxDQUFDO0lBRXZFLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBVTtRQUNqQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztRQUVELE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQWUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBYTtRQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDdkM7UUFFRCxNQUFNLFNBQVMsR0FBRyx5QkFBZSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTTtRQUNsQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxJQUFJLFNBQVMsQ0FBQyx5QkFBZSxDQUFDLE1BQU0sRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxNQUFNLENBQUMsR0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQztJQUMvRCxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFFLENBQUM7Q0FDRjtBQTdDRCw4QkE2Q0MifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hY2NvdW50X2lkL2FjY291bnRfaWQuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQSxrQkFBa0IsMkJBQTJCLEdBQUcsa0JBQWtCO0FBQ2xFO0FBQ0E7QUFDQSxrQkFBa0IsdUNBQXVDLEdBQUcsa0JBQWtCO0FBQzlFO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2FjY291bnRfaWQvYWNjb3VudF9pZC5qcz8xOGJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BY2NvdW50SWQgPSB2b2lkIDA7XG5jb25zdCBhZGRyZXNzXzEgPSByZXF1aXJlKFwiLi4vYWRkcmVzc1wiKTtcbmNsYXNzIEFjY291bnRJZCB7XG4gICAgY29uc3RydWN0b3IocHVibGljS2V5LCBhY2NvdW50Tm9uY2UpIHtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuYWNjb3VudE5vbmNlID0gYWNjb3VudE5vbmNlO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlcihpZCkge1xuICAgICAgICBpZiAoaWQubGVuZ3RoICE9PSA2OCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGlkIGJ1ZmZlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBuZXcgYWRkcmVzc18xLkdydW1wa2luQWRkcmVzcyhpZC5zbGljZSgwLCA2NCkpO1xuICAgICAgICBjb25zdCBhY2NvdW50Tm9uY2UgPSBpZC5yZWFkVUludDMyQkUoNjQpO1xuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRJZChwdWJsaWNLZXksIGFjY291bnROb25jZSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKGlkU3RyKSB7XG4gICAgICAgIGNvbnN0IFttYXRjaCwgcHVibGljS2V5U3RyLCBhY2NvdW50Tm9uY2VTdHJdID0gaWRTdHIubWF0Y2goL14weChbMC05YS1mXXsxMjh9KSBcXCgoWzAtOV0rKVxcKSQvaSkgfHwgW107XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpZCBzdHJpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYWRkcmVzc18xLkdydW1wa2luQWRkcmVzcy5mcm9tU3RyaW5nKHB1YmxpY0tleVN0cik7XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudElkKHB1YmxpY0tleSwgK2FjY291bnROb25jZVN0cik7XG4gICAgfVxuICAgIHN0YXRpYyByYW5kb20oKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbU5vbmNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMiAqKiAzMik7XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudElkKGFkZHJlc3NfMS5HcnVtcGtpbkFkZHJlc3MucmFuZG9tKCksIHJhbmRvbU5vbmNlKTtcbiAgICB9XG4gICAgZXF1YWxzKHJocykge1xuICAgICAgICByZXR1cm4gdGhpcy50b0J1ZmZlcigpLmVxdWFscyhyaHMudG9CdWZmZXIoKSk7XG4gICAgfVxuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICBjb25zdCBhY2NvdW50Tm9uY2VCdWYgPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgICAgIGFjY291bnROb25jZUJ1Zi53cml0ZVVJbnQzMkJFKHRoaXMuYWNjb3VudE5vbmNlKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RoaXMucHVibGljS2V5LnRvQnVmZmVyKCksIGFjY291bnROb25jZUJ1Zl0pO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMucHVibGljS2V5LnRvU3RyaW5nKCl9ICgke3RoaXMuYWNjb3VudE5vbmNlfSlgO1xuICAgIH1cbiAgICB0b1Nob3J0U3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5wdWJsaWNLZXkudG9TdHJpbmcoKS5zbGljZSgwLCAxMCl9LyR7dGhpcy5hY2NvdW50Tm9uY2V9YDtcbiAgICB9XG59XG5leHBvcnRzLkFjY291bnRJZCA9IEFjY291bnRJZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXTmpiM1Z1ZEY5cFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5aFkyTnZkVzUwWDJsa0wyRmpZMjkxYm5SZmFXUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkME5CUVRaRE8wRkJSVGRETEUxQlFXRXNVMEZCVXp0SlFVTndRaXhaUVVGdFFpeFRRVUV3UWl4RlFVRlRMRmxCUVc5Q08xRkJRWFpFTEdOQlFWTXNSMEZCVkN4VFFVRlRMRU5CUVdsQ08xRkJRVk1zYVVKQlFWa3NSMEZCV2l4WlFVRlpMRU5CUVZFN1NVRkJSeXhEUVVGRE8wbEJSWFpGTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJWVHRSUVVOcVF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TlFVRk5MRXRCUVVzc1JVRkJSU3hGUVVGRk8xbEJRM0JDTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0VFFVTjJRenRSUVVWRUxFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NlVUpCUVdVc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM1pFTEUxQlFVMHNXVUZCV1N4SFFVRkhMRVZCUVVVc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEZWtNc1QwRkJUeXhKUVVGSkxGTkJRVk1zUTBGQlF5eFRRVUZUTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRhRVFzUTBGQlF6dEpRVVZOTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJZVHRSUVVOd1F5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRmxCUVZrc1JVRkJSU3hsUVVGbExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGdFF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMUZCUTNSSExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEVml4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNN1UwRkRka003VVVGRlJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4NVFrRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hQUVVGUExFbEJRVWtzVTBGQlV5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wbEJRM0JFTEVOQlFVTTdTVUZGVFN4TlFVRk5MRU5CUVVNc1RVRkJUVHRSUVVOc1FpeE5RVUZOTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVFUXNUMEZCVHl4SlFVRkpMRk5CUVZNc1EwRkJReXg1UWtGQlpTeERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8wbEJRemxFTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1IwRkJZenRSUVVOdVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRhRVFzUTBGQlF6dEpRVVZFTEZGQlFWRTdVVUZEVGl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNoRExHVkJRV1VzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRMnBFTEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU55UlN4RFFVRkRPMGxCUlVRc1VVRkJVVHRSUVVOT0xFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NRMEZCUXp0SlFVTXZSQ3hEUVVGRE8wbEJSVVFzWVVGQllUdFJRVU5ZTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMGxCUXpGRkxFTkJRVU03UTBGRFJqdEJRVGREUkN3NFFrRTJRME1pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/account_id/account_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/account_id/alias_hash.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/account_id/alias_hash.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AliasHash = void 0;\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nclass AliasHash {\n    constructor(buffer) {\n        this.buffer = buffer;\n        if (buffer.length !== AliasHash.SIZE) {\n            throw new Error('Invalid alias hash buffer.');\n        }\n    }\n    static random() {\n        return new AliasHash((0, crypto_1.randomBytes)(28));\n    }\n    static fromAlias(alias, blake2s) {\n        return new AliasHash(blake2s.hashToField(Buffer.from(alias)).slice(0, 28));\n    }\n    static fromString(hash) {\n        return new AliasHash(Buffer.from(hash.replace(/^0x/i, ''), 'hex'));\n    }\n    toBuffer() {\n        return this.buffer;\n    }\n    toBuffer32() {\n        const buffer = Buffer.alloc(32);\n        this.buffer.copy(buffer, 4);\n        return buffer;\n    }\n    toString() {\n        return `0x${this.toBuffer().toString('hex')}`;\n    }\n    equals(rhs) {\n        return this.toBuffer().equals(rhs.toBuffer());\n    }\n}\nexports.AliasHash = AliasHash;\nAliasHash.SIZE = 28;\nAliasHash.ZERO = new AliasHash(Buffer.alloc(AliasHash.SIZE));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXNfaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50X2lkL2FsaWFzX2hhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQWlEO0FBRWpELE1BQWEsU0FBUztJQUlwQixZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNoQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtZQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU07UUFDWCxPQUFPLElBQUksU0FBUyxDQUFDLElBQUEsb0JBQVcsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQWEsRUFBRSxPQUFnQjtRQUM5QyxPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFZO1FBQzVCLE9BQU8sSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUMsR0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7QUF0Q0gsOEJBdUNDO0FBdENRLGNBQUksR0FBRyxFQUFFLENBQUM7QUFDVixjQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hY2NvdW50X2lkL2FsaWFzX2hhc2guanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELE1BQU07QUFDdkQ7QUFDQTtBQUNBLDZCQUE2QixNQUFNO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsTUFBTTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLCtCQUErQixNQUFNO0FBQ3JDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hY2NvdW50X2lkL2FsaWFzX2hhc2guanM/NzBiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWxpYXNIYXNoID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiLi4vY3J5cHRvXCIpO1xuY2xhc3MgQWxpYXNIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoICE9PSBBbGlhc0hhc2guU0laRSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFsaWFzIGhhc2ggYnVmZmVyLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyByYW5kb20oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWxpYXNIYXNoKCgwLCBjcnlwdG9fMS5yYW5kb21CeXRlcykoMjgpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21BbGlhcyhhbGlhcywgYmxha2Uycykge1xuICAgICAgICByZXR1cm4gbmV3IEFsaWFzSGFzaChibGFrZTJzLmhhc2hUb0ZpZWxkKEJ1ZmZlci5mcm9tKGFsaWFzKSkuc2xpY2UoMCwgMjgpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcoaGFzaCkge1xuICAgICAgICByZXR1cm4gbmV3IEFsaWFzSGFzaChCdWZmZXIuZnJvbShoYXNoLnJlcGxhY2UoL14weC9pLCAnJyksICdoZXgnKSk7XG4gICAgfVxuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gICAgfVxuICAgIHRvQnVmZmVyMzIoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMik7XG4gICAgICAgIHRoaXMuYnVmZmVyLmNvcHkoYnVmZmVyLCA0KTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgMHgke3RoaXMudG9CdWZmZXIoKS50b1N0cmluZygnaGV4Jyl9YDtcbiAgICB9XG4gICAgZXF1YWxzKHJocykge1xuICAgICAgICByZXR1cm4gdGhpcy50b0J1ZmZlcigpLmVxdWFscyhyaHMudG9CdWZmZXIoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5BbGlhc0hhc2ggPSBBbGlhc0hhc2g7XG5BbGlhc0hhc2guU0laRSA9IDI4O1xuQWxpYXNIYXNoLlpFUk8gPSBuZXcgQWxpYXNIYXNoKEJ1ZmZlci5hbGxvYyhBbGlhc0hhc2guU0laRSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVd4cFlYTmZhR0Z6YUM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTloWTJOdmRXNTBYMmxrTDJGc2FXRnpYMmhoYzJndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2MwTkJRV2xFTzBGQlJXcEVMRTFCUVdFc1UwRkJVenRKUVVsd1FpeFpRVUZ2UWl4TlFVRmpPMUZCUVdRc1YwRkJUU3hIUVVGT0xFMUJRVTBzUTBGQlVUdFJRVU5vUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFdEJRVXNzVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlR0WlFVTndReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETERSQ1FVRTBRaXhEUVVGRExFTkJRVU03VTBGREwwTTdTVUZEU0N4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExFMUJRVTA3VVVGRFdDeFBRVUZQTEVsQlFVa3NVMEZCVXl4RFFVRkRMRWxCUVVFc2IwSkJRVmNzUlVGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNoRExFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVdFc1JVRkJSU3hQUVVGblFqdFJRVU01UXl4UFFVRlBMRWxCUVVrc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU0zUlN4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZaTzFGQlF6VkNMRTlCUVU4c1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0pGTEVOQlFVTTdTVUZGUkN4UlFVRlJPMUZCUTA0c1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzBsQlEzSkNMRU5CUVVNN1NVRkZSQ3hWUVVGVk8xRkJRMUlzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5vUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROVUlzVDBGQlR5eE5RVUZOTEVOQlFVTTdTVUZEYUVJc1EwRkJRenRKUVVWRUxGRkJRVkU3VVVGRFRpeFBRVUZQTEV0QlFVc3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNSMEZCWXp0UlFVTnVRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYUVRc1EwRkJRenM3UVVGMFEwZ3NPRUpCZFVORE8wRkJkRU5STEdOQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRWaXhqUVVGSkxFZEJRVWNzU1VGQlNTeFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/account_id/alias_hash.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/account_id/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/account_id/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_id */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/account_id.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_alias_id */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/account_alias_id.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./alias_hash */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/alias_hash.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWNjb3VudF9pZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBNkI7QUFDN0Isa0VBQW1DO0FBQ25DLDREQUE2QiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hY2NvdW50X2lkL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLDBGQUFjO0FBQ2hELDBCQUEwQixtQkFBTyxDQUFDLHNHQUFvQjtBQUN0RCwwQkFBMEIsbUJBQU8sQ0FBQywwRkFBYztBQUNoRCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvYWNjb3VudF9pZC9pbmRleC5qcz84MGVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vYWNjb3VudF9pZFwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2FjY291bnRfYWxpYXNfaWRcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hbGlhc19oYXNoXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZV05qYjNWdWRGOXBaQzlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQlFTdzBSRUZCTmtJN1FVRkROMElzYTBWQlFXMURPMEZCUTI1RExEUkVRVUUyUWlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/account_id/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/address/eth_address.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/address/eth_address.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthAddress = void 0;\nconst sha3_1 = __webpack_require__(/*! sha3 */ \"./node_modules/sha3/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst hash = new sha3_1.Keccak(256);\n/**\n * Takes a string hex input e.g. `deadbeef` and returns the same.\n */\nfunction sha3(input) {\n    hash.reset();\n    hash.update(input);\n    return hash.digest('hex');\n}\nclass EthAddress {\n    constructor(buffer) {\n        this.buffer = buffer;\n        if (buffer.length === 32) {\n            if (!buffer.slice(0, 12).equals(Buffer.alloc(12))) {\n                throw new Error('Invalid address buffer.');\n            }\n            else {\n                this.buffer = buffer.slice(12);\n            }\n        }\n        else if (buffer.length !== 20) {\n            throw new Error('Invalid address buffer.');\n        }\n    }\n    static fromString(address) {\n        if (!EthAddress.isAddress(address)) {\n            throw new Error(`Invalid address string: ${address}`);\n        }\n        return new EthAddress(Buffer.from(address.replace(/^0x/i, ''), 'hex'));\n    }\n    static random() {\n        return new EthAddress((0, crypto_1.randomBytes)(20));\n    }\n    static isAddress(address) {\n        if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n            // Does not have the basic requirements of an address.\n            return false;\n        }\n        else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n            // It's ALL lowercase or ALL upppercase.\n            return true;\n        }\n        else {\n            return EthAddress.checkAddressChecksum(address);\n        }\n    }\n    isZero() {\n        return this.equals(EthAddress.ZERO);\n    }\n    static checkAddressChecksum(address) {\n        address = address.replace(/^0x/i, '');\n        const addressHash = sha3(address.toLowerCase());\n        for (let i = 0; i < 40; i++) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1.\n            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n                (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static toChecksumAddress(address) {\n        if (!EthAddress.isAddress(address)) {\n            throw new Error('Invalid address string.');\n        }\n        address = address.toLowerCase().replace(/^0x/i, '');\n        const addressHash = sha3(address);\n        let checksumAddress = '0x';\n        for (let i = 0; i < address.length; i++) {\n            // If ith character is 9 to f then make it uppercase.\n            if (parseInt(addressHash[i], 16) > 7) {\n                checksumAddress += address[i].toUpperCase();\n            }\n            else {\n                checksumAddress += address[i];\n            }\n        }\n        return checksumAddress;\n    }\n    equals(rhs) {\n        return this.buffer.equals(rhs.toBuffer());\n    }\n    toString() {\n        return EthAddress.toChecksumAddress(this.buffer.toString('hex'));\n    }\n    toBuffer() {\n        return this.buffer;\n    }\n    toBuffer32() {\n        const buffer = Buffer.alloc(32);\n        this.buffer.copy(buffer, 12);\n        return buffer;\n    }\n}\nexports.EthAddress = EthAddress;\nEthAddress.ZERO = new EthAddress(Buffer.alloc(20));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoX2FkZHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWRkcmVzcy9ldGhfYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBOEI7QUFDOUIsc0NBQXdDO0FBRXhDLE1BQU0sSUFBSSxHQUFHLElBQUksYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRTdCOztHQUVHO0FBQ0gsU0FBUyxJQUFJLENBQUMsS0FBYTtJQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBVUQsTUFBYSxVQUFVO0lBR3JCLFlBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2hDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEM7U0FDRjthQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBZTtRQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsQyxNQUFNLElBQUks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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/address/eth_address.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/address/grumpkin_address.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/address/grumpkin_address.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GrumpkinAddress = void 0;\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst grumpkin_1 = __webpack_require__(/*! ../ecc/grumpkin */ \"./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js\");\nclass GrumpkinAddress {\n    constructor(buffer) {\n        this.buffer = buffer;\n        if (buffer.length !== GrumpkinAddress.SIZE) {\n            throw new Error('Invalid address buffer.');\n        }\n    }\n    static isAddress(address) {\n        return /^(0x|0X)?[0-9a-fA-F]{128}$/.test(address);\n    }\n    static fromString(address) {\n        if (!GrumpkinAddress.isAddress(address)) {\n            throw new Error(`Invalid address string: ${address}`);\n        }\n        return new GrumpkinAddress(Buffer.from(address.replace(/^0x/i, ''), 'hex'));\n    }\n    /**\n     * NOT a valid address! Do not use in proofs.\n     */\n    static random() {\n        return new GrumpkinAddress((0, crypto_1.randomBytes)(64));\n    }\n    /**\n     * A valid address (is a point on the curve).\n     */\n    static one() {\n        return new GrumpkinAddress(grumpkin_1.Grumpkin.one);\n    }\n    equals(rhs) {\n        return this.buffer.equals(rhs.toBuffer());\n    }\n    toBuffer() {\n        return this.buffer;\n    }\n    x() {\n        return this.buffer.slice(0, 32);\n    }\n    y() {\n        return this.buffer.slice(32);\n    }\n    toString() {\n        return `0x${this.buffer.toString('hex')}`;\n    }\n    toShortString() {\n        const str = this.toString();\n        return `${str.slice(0, 10)}...${str.slice(-4)}`;\n    }\n}\nexports.GrumpkinAddress = GrumpkinAddress;\nGrumpkinAddress.SIZE = 64;\nGrumpkinAddress.ZERO = new GrumpkinAddress(Buffer.alloc(GrumpkinAddress.SIZE));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3J1bXBraW5fYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGRyZXNzL2dydW1wa2luX2FkZHJlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQXdDO0FBQ3hDLDhDQUEyQztBQUUzQyxNQUFhLGVBQWU7SUFJMUIsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDaEMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBZTtRQUNyQyxPQUFPLDRCQUE0QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFlO1FBQ3RDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFDRCxPQUFPLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTTtRQUNsQixPQUFPLElBQUksZUFBZSxDQUFDLElBQUEsb0JBQVcsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxHQUFHO1FBQ2YsT0FBTyxJQUFJLGVBQWUsQ0FBQyxtQkFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBb0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsQ0FBQztRQUNDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxDQUFDO1FBQ0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVCLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNsRCxDQUFDOztBQTFESCwwQ0EyREM7QUExRGUsb0JBQUksR0FBRyxFQUFFLENBQUM7QUFDVixvQkFBSSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hZGRyZXNzL2dydW1wa2luX2FkZHJlc3MuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBVztBQUNwQyxtQkFBbUIsbUJBQU8sQ0FBQywwRkFBaUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxJQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ0EsbUNBQW1DLE1BQU07QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQixLQUFLLGNBQWM7QUFDdEQ7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLDJDQUEyQyxNQUFNO0FBQ2pELDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hZGRyZXNzL2dydW1wa2luX2FkZHJlc3MuanM/MDljNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3J1bXBraW5BZGRyZXNzID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiLi4vY3J5cHRvXCIpO1xuY29uc3QgZ3J1bXBraW5fMSA9IHJlcXVpcmUoXCIuLi9lY2MvZ3J1bXBraW5cIik7XG5jbGFzcyBHcnVtcGtpbkFkZHJlc3Mge1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggIT09IEdydW1wa2luQWRkcmVzcy5TSVpFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcyBidWZmZXIuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGlzQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiAvXigweHwwWCk/WzAtOWEtZkEtRl17MTI4fSQvLnRlc3QoYWRkcmVzcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKGFkZHJlc3MpIHtcbiAgICAgICAgaWYgKCFHcnVtcGtpbkFkZHJlc3MuaXNBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYWRkcmVzcyBzdHJpbmc6ICR7YWRkcmVzc31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdydW1wa2luQWRkcmVzcyhCdWZmZXIuZnJvbShhZGRyZXNzLnJlcGxhY2UoL14weC9pLCAnJyksICdoZXgnKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5PVCBhIHZhbGlkIGFkZHJlc3MhIERvIG5vdCB1c2UgaW4gcHJvb2ZzLlxuICAgICAqL1xuICAgIHN0YXRpYyByYW5kb20oKSB7XG4gICAgICAgIHJldHVybiBuZXcgR3J1bXBraW5BZGRyZXNzKCgwLCBjcnlwdG9fMS5yYW5kb21CeXRlcykoNjQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSB2YWxpZCBhZGRyZXNzIChpcyBhIHBvaW50IG9uIHRoZSBjdXJ2ZSkuXG4gICAgICovXG4gICAgc3RhdGljIG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHcnVtcGtpbkFkZHJlc3MoZ3J1bXBraW5fMS5HcnVtcGtpbi5vbmUpO1xuICAgIH1cbiAgICBlcXVhbHMocmhzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5lcXVhbHMocmhzLnRvQnVmZmVyKCkpO1xuICAgIH1cbiAgICB0b0J1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyO1xuICAgIH1cbiAgICB4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMCwgMzIpO1xuICAgIH1cbiAgICB5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMzIpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAweCR7dGhpcy5idWZmZXIudG9TdHJpbmcoJ2hleCcpfWA7XG4gICAgfVxuICAgIHRvU2hvcnRTdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGAke3N0ci5zbGljZSgwLCAxMCl9Li4uJHtzdHIuc2xpY2UoLTQpfWA7XG4gICAgfVxufVxuZXhwb3J0cy5HcnVtcGtpbkFkZHJlc3MgPSBHcnVtcGtpbkFkZHJlc3M7XG5HcnVtcGtpbkFkZHJlc3MuU0laRSA9IDY0O1xuR3J1bXBraW5BZGRyZXNzLlpFUk8gPSBuZXcgR3J1bXBraW5BZGRyZXNzKEJ1ZmZlci5hbGxvYyhHcnVtcGtpbkFkZHJlc3MuU0laRSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjNKMWJYQnJhVzVmWVdSa2NtVnpjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OWhaR1J5WlhOekwyZHlkVzF3YTJsdVgyRmtaSEpsYzNNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2MwTkJRWGRETzBGQlEzaERMRGhEUVVFeVF6dEJRVVV6UXl4TlFVRmhMR1ZCUVdVN1NVRkpNVUlzV1VGQmIwSXNUVUZCWXp0UlFVRmtMRmRCUVUwc1IwRkJUaXhOUVVGTkxFTkJRVkU3VVVGRGFFTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUU3hMUVVGTExHVkJRV1VzUTBGQlF5eEpRVUZKTEVWQlFVVTdXVUZETVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhEUVVGRE8xTkJRelZETzBsQlEwZ3NRMEZCUXp0SlFVVk5MRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlpUdFJRVU55UXl4UFFVRlBMRFJDUVVFMFFpeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVMHNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGbE8xRkJRM1JETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFsQlEzWkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTWtKQlFUSkNMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRGRrUTdVVUZEUkN4UFFVRlBMRWxCUVVrc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNNVJTeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTU3hOUVVGTkxFTkJRVU1zVFVGQlRUdFJRVU5zUWl4UFFVRlBMRWxCUVVrc1pVRkJaU3hEUVVGRExFbEJRVUVzYjBKQlFWY3NSVUZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRemxETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSkxFMUJRVTBzUTBGQlF5eEhRVUZITzFGQlEyWXNUMEZCVHl4SlFVRkpMR1ZCUVdVc1EwRkJReXh0UWtGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlRTeE5RVUZOTEVOQlFVTXNSMEZCYjBJN1VVRkRhRU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTTFReXhEUVVGRE8wbEJSVVFzVVVGQlVUdFJRVU5PTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOeVFpeERRVUZETzBsQlJVUXNRMEZCUXp0UlFVTkRMRTlCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRMnhETEVOQlFVTTdTVUZGUkN4RFFVRkRPMUZCUTBNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNdlFpeERRVUZETzBsQlJVUXNVVUZCVVR0UlFVTk9MRTlCUVU4c1MwRkJTeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJRelZETEVOQlFVTTdTVUZGUkN4aFFVRmhPMUZCUTFnc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMUZCUXpWQ0xFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF6dEpRVU5zUkN4RFFVRkRPenRCUVRGRVNDd3dRMEV5UkVNN1FVRXhSR1VzYjBKQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRWaXh2UWtGQlNTeEhRVUZITEVsQlFVa3NaVUZCWlN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/address/grumpkin_address.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/address/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/address/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./eth_address */ \"./node_modules/@noir-lang/barretenberg/dest/address/eth_address.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./grumpkin_address */ \"./node_modules/@noir-lang/barretenberg/dest/address/grumpkin_address.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWRkcmVzcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBOEI7QUFDOUIsa0VBQW1DIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hZGRyZXNzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLHlGQUFlO0FBQ2pELDBCQUEwQixtQkFBTyxDQUFDLG1HQUFvQjtBQUN0RCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvYWRkcmVzcy9pbmRleC5qcz8xM2I4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vZXRoX2FkZHJlc3NcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9ncnVtcGtpbl9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZV1JrY21WemN5OXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN3MlJFRkJPRUk3UVVGRE9VSXNhMFZCUVcxREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/address/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/asset/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/asset/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isVirtualAsset = exports.assetValueFromJson = exports.assetValueToJson = void 0;\nconst assetValueToJson = (assetValue) => ({\n    ...assetValue,\n    value: assetValue.value.toString(),\n});\nexports.assetValueToJson = assetValueToJson;\nconst assetValueFromJson = (json) => ({\n    ...json,\n    value: BigInt(json.value),\n});\nexports.assetValueFromJson = assetValueFromJson;\nconst isVirtualAsset = (assetId) => assetId >= 1 << 29;\nexports.isVirtualAsset = isVirtualAsset;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXNzZXQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBVU8sTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFVBQXNCLEVBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLEdBQUcsVUFBVTtJQUNiLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtDQUNuQyxDQUFDLENBQUM7QUFIVSxRQUFBLGdCQUFnQixvQkFHMUI7QUFFSSxNQUFNLGtCQUFrQixHQUFHLENBQUMsSUFBb0IsRUFBYyxFQUFFLENBQUMsQ0FBQztJQUN2RSxHQUFHLElBQUk7SUFDUCxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Q0FDMUIsQ0FBQyxDQUFDO0FBSFUsUUFBQSxrQkFBa0Isc0JBRzVCO0FBRUksTUFBTSxjQUFjLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQXpELFFBQUEsY0FBYyxrQkFBMkMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hc3NldC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRywwQkFBMEIsR0FBRyx3QkFBd0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMEJBQTBCO0FBQzFCO0FBQ0Esc0JBQXNCO0FBQ3RCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9hc3NldC9pbmRleC5qcz9kZGFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1ZpcnR1YWxBc3NldCA9IGV4cG9ydHMuYXNzZXRWYWx1ZUZyb21Kc29uID0gZXhwb3J0cy5hc3NldFZhbHVlVG9Kc29uID0gdm9pZCAwO1xuY29uc3QgYXNzZXRWYWx1ZVRvSnNvbiA9IChhc3NldFZhbHVlKSA9PiAoe1xuICAgIC4uLmFzc2V0VmFsdWUsXG4gICAgdmFsdWU6IGFzc2V0VmFsdWUudmFsdWUudG9TdHJpbmcoKSxcbn0pO1xuZXhwb3J0cy5hc3NldFZhbHVlVG9Kc29uID0gYXNzZXRWYWx1ZVRvSnNvbjtcbmNvbnN0IGFzc2V0VmFsdWVGcm9tSnNvbiA9IChqc29uKSA9PiAoe1xuICAgIC4uLmpzb24sXG4gICAgdmFsdWU6IEJpZ0ludChqc29uLnZhbHVlKSxcbn0pO1xuZXhwb3J0cy5hc3NldFZhbHVlRnJvbUpzb24gPSBhc3NldFZhbHVlRnJvbUpzb247XG5jb25zdCBpc1ZpcnR1YWxBc3NldCA9IChhc3NldElkKSA9PiBhc3NldElkID49IDEgPDwgMjk7XG5leHBvcnRzLmlzVmlydHVhbEFzc2V0ID0gaXNWaXJ0dWFsQXNzZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12WVhOelpYUXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCVlU4c1RVRkJUU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRlZCUVhOQ0xFVkJRV3RDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpORkxFZEJRVWNzVlVGQlZUdEpRVU5pTEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJUdERRVU51UXl4RFFVRkRMRU5CUVVNN1FVRklWU3hSUVVGQkxHZENRVUZuUWl4dlFrRkhNVUk3UVVGRlNTeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExFTkJRVU1zU1VGQmIwSXNSVUZCWXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOMlJTeEhRVUZITEVsQlFVazdTVUZEVUN4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdRMEZETVVJc1EwRkJReXhEUVVGRE8wRkJTRlVzVVVGQlFTeHJRa0ZCYTBJc2MwSkJSelZDTzBGQlJVa3NUVUZCVFN4alFVRmpMRWRCUVVjc1EwRkJReXhQUVVGbExFVkJRVVVzUlVGQlJTeERRVUZETEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRWHBFTEZGQlFVRXNZMEZCWXl4clFrRkJNa01pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/asset/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toBufferBE = exports.toBufferLE = exports.toBigIntBE = exports.toBigIntLE = void 0;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    const reversed = Buffer.from(buf);\n    reversed.reverse();\n    const hex = reversed.toString('hex');\n    if (hex.length === 0) {\n        return BigInt(0);\n    }\n    return BigInt(`0x${hex}`);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    const hex = buf.toString('hex');\n    if (hex.length === 0) {\n        return BigInt(0);\n    }\n    return BigInt(`0x${hex}`);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    const hex = num.toString(16);\n    const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    buffer.reverse();\n    return buffer;\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    const hex = num.toString(16);\n    return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n}\nexports.toBufferBE = toBufferBE;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmlnaW50X2J1ZmZlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLEdBQVc7SUFDcEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFSRCxnQ0FRQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixVQUFVLENBQUMsR0FBVztJQUNwQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQU5ELGdDQU1DO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixVQUFVLENBQUMsR0FBVyxFQUFFLEtBQWE7SUFDbkQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUxELGdDQUtDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixVQUFVLENBQUMsR0FBVyxFQUFFLEtBQWE7SUFDbkQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUFIRCxnQ0FHQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9iaWdpbnRfYnVmZmVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixJQUFJO0FBQzNCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLElBQUk7QUFDM0I7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0Esa0JBQWtCO0FBQ2xCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9iaWdpbnRfYnVmZmVyL2luZGV4LmpzPzcxYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQnVmZmVyQkUgPSBleHBvcnRzLnRvQnVmZmVyTEUgPSBleHBvcnRzLnRvQmlnSW50QkUgPSBleHBvcnRzLnRvQmlnSW50TEUgPSB2b2lkIDA7XG4vKipcbiAqIENvbnZlcnQgYSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciBpbnRvIGEgQmlnSW50LlxuICogQHBhcmFtIGJ1ZiBUaGUgbGl0dGxlLWVuZGlhbiBidWZmZXIgdG8gY29udmVydFxuICogQHJldHVybnMgQSBCaWdJbnQgd2l0aCB0aGUgbGl0dGxlLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiBidWYuXG4gKi9cbmZ1bmN0aW9uIHRvQmlnSW50TEUoYnVmKSB7XG4gICAgY29uc3QgcmV2ZXJzZWQgPSBCdWZmZXIuZnJvbShidWYpO1xuICAgIHJldmVyc2VkLnJldmVyc2UoKTtcbiAgICBjb25zdCBoZXggPSByZXZlcnNlZC50b1N0cmluZygnaGV4Jyk7XG4gICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludCgwKTtcbiAgICB9XG4gICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbn1cbmV4cG9ydHMudG9CaWdJbnRMRSA9IHRvQmlnSW50TEU7XG4vKipcbiAqIENvbnZlcnQgYSBiaWctZW5kaWFuIGJ1ZmZlciBpbnRvIGEgQmlnSW50XG4gKiBAcGFyYW0gYnVmIFRoZSBiaWctZW5kaWFuIGJ1ZmZlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQSBCaWdJbnQgd2l0aCB0aGUgYmlnLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiBidWYuXG4gKi9cbmZ1bmN0aW9uIHRvQmlnSW50QkUoYnVmKSB7XG4gICAgY29uc3QgaGV4ID0gYnVmLnRvU3RyaW5nKCdoZXgnKTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQmlnSW50KDApO1xuICAgIH1cbiAgICByZXR1cm4gQmlnSW50KGAweCR7aGV4fWApO1xufVxuZXhwb3J0cy50b0JpZ0ludEJFID0gdG9CaWdJbnRCRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGxpdHRsZS1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyTEUobnVtLCB3aWR0aCkge1xuICAgIGNvbnN0IGhleCA9IG51bS50b1N0cmluZygxNik7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oaGV4LnBhZFN0YXJ0KHdpZHRoICogMiwgJzAnKS5zbGljZSgwLCB3aWR0aCAqIDIpLCAnaGV4Jyk7XG4gICAgYnVmZmVyLnJldmVyc2UoKTtcbiAgICByZXR1cm4gYnVmZmVyO1xufVxuZXhwb3J0cy50b0J1ZmZlckxFID0gdG9CdWZmZXJMRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGJpZy1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBiaWctZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyQkUobnVtLCB3aWR0aCkge1xuICAgIGNvbnN0IGhleCA9IG51bS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhleC5wYWRTdGFydCh3aWR0aCAqIDIsICcwJykuc2xpY2UoMCwgd2lkdGggKiAyKSwgJ2hleCcpO1xufVxuZXhwb3J0cy50b0J1ZmZlckJFID0gdG9CdWZmZXJCRTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZbWxuYVc1MFgySjFabVpsY2k5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRVHM3T3p0SFFVbEhPMEZCUTBnc1UwRkJaMElzVlVGQlZTeERRVUZETEVkQlFWYzdTVUZEY0VNc1RVRkJUU3hSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOc1F5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkRia0lzVFVGQlRTeEhRVUZITEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU55UXl4SlFVRkpMRWRCUVVjc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlEzQkNMRTlCUVU4c1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEyeENPMGxCUTBRc1QwRkJUeXhOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpWQ0xFTkJRVU03UVVGU1JDeG5RMEZSUXp0QlFVVkVPenM3TzBkQlNVYzdRVUZEU0N4VFFVRm5RaXhWUVVGVkxFTkJRVU1zUjBGQlZ6dEpRVU53UXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTJoRExFbEJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRjRUlzVDBGQlR5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRiRUk3U1VGRFJDeFBRVUZQTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE5VSXNRMEZCUXp0QlFVNUVMR2REUVUxRE8wRkJSVVE3T3pzN08wZEJTMGM3UVVGRFNDeFRRVUZuUWl4VlFVRlZMRU5CUVVNc1IwRkJWeXhGUVVGRkxFdEJRV0U3U1VGRGJrUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTTNRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU53Uml4TlFVRk5MRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGRGFrSXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVXhFTEdkRFFVdERPMEZCUlVRN096czdPMGRCUzBjN1FVRkRTQ3hUUVVGblFpeFZRVUZWTEVOQlFVTXNSMEZCVnl4RlFVRkZMRXRCUVdFN1NVRkRia1FzVFVGQlRTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU0zUWl4UFFVRlBMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpsRkxFTkJRVU03UVVGSVJDeG5RMEZIUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/aux_data_selector.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/aux_data_selector.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUX_DATA_SELECTOR = void 0;\nvar AUX_DATA_SELECTOR;\n(function (AUX_DATA_SELECTOR) {\n    AUX_DATA_SELECTOR[AUX_DATA_SELECTOR[\"NADA\"] = 0] = \"NADA\";\n    AUX_DATA_SELECTOR[AUX_DATA_SELECTOR[\"OPEN_LOAN\"] = 1] = \"OPEN_LOAN\";\n    AUX_DATA_SELECTOR[AUX_DATA_SELECTOR[\"CLOSE_LOAN\"] = 2] = \"CLOSE_LOAN\";\n    AUX_DATA_SELECTOR[AUX_DATA_SELECTOR[\"OPEN_LP\"] = 3] = \"OPEN_LP\";\n    AUX_DATA_SELECTOR[AUX_DATA_SELECTOR[\"CLOSE_LP\"] = 4] = \"CLOSE_LP\";\n})(AUX_DATA_SELECTOR = exports.AUX_DATA_SELECTOR || (exports.AUX_DATA_SELECTOR = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV4X2RhdGFfc2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJpZGdlX2lkL2F1eF9kYXRhX3NlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQVksaUJBTVg7QUFORCxXQUFZLGlCQUFpQjtJQUMzQix5REFBSSxDQUFBO0lBQ0osbUVBQVMsQ0FBQTtJQUNULHFFQUFVLENBQUE7SUFDViwrREFBTyxDQUFBO0lBQ1AsaUVBQVEsQ0FBQTtBQUNWLENBQUMsRUFOVyxpQkFBaUIsR0FBakIseUJBQWlCLEtBQWpCLHlCQUFpQixRQU01QiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvYXV4X2RhdGFfc2VsZWN0b3IuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkYsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2JyaWRnZV9pZC9hdXhfZGF0YV9zZWxlY3Rvci5qcz8xODVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVhfREFUQV9TRUxFQ1RPUiA9IHZvaWQgMDtcbnZhciBBVVhfREFUQV9TRUxFQ1RPUjtcbihmdW5jdGlvbiAoQVVYX0RBVEFfU0VMRUNUT1IpIHtcbiAgICBBVVhfREFUQV9TRUxFQ1RPUltBVVhfREFUQV9TRUxFQ1RPUltcIk5BREFcIl0gPSAwXSA9IFwiTkFEQVwiO1xuICAgIEFVWF9EQVRBX1NFTEVDVE9SW0FVWF9EQVRBX1NFTEVDVE9SW1wiT1BFTl9MT0FOXCJdID0gMV0gPSBcIk9QRU5fTE9BTlwiO1xuICAgIEFVWF9EQVRBX1NFTEVDVE9SW0FVWF9EQVRBX1NFTEVDVE9SW1wiQ0xPU0VfTE9BTlwiXSA9IDJdID0gXCJDTE9TRV9MT0FOXCI7XG4gICAgQVVYX0RBVEFfU0VMRUNUT1JbQVVYX0RBVEFfU0VMRUNUT1JbXCJPUEVOX0xQXCJdID0gM10gPSBcIk9QRU5fTFBcIjtcbiAgICBBVVhfREFUQV9TRUxFQ1RPUltBVVhfREFUQV9TRUxFQ1RPUltcIkNMT1NFX0xQXCJdID0gNF0gPSBcIkNMT1NFX0xQXCI7XG59KShBVVhfREFUQV9TRUxFQ1RPUiA9IGV4cG9ydHMuQVVYX0RBVEFfU0VMRUNUT1IgfHwgKGV4cG9ydHMuQVVYX0RBVEFfU0VMRUNUT1IgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhWNFgyUmhkR0ZmYzJWc1pXTjBiM0l1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZbkpwWkdkbFgybGtMMkYxZUY5a1lYUmhYM05sYkdWamRHOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRWxCUVZrc2FVSkJUVmc3UVVGT1JDeFhRVUZaTEdsQ1FVRnBRanRKUVVNelFpeDVSRUZCU1N4RFFVRkJPMGxCUTBvc2JVVkJRVk1zUTBGQlFUdEpRVU5VTEhGRlFVRlZMRU5CUVVFN1NVRkRWaXdyUkVGQlR5eERRVUZCTzBsQlExQXNhVVZCUVZFc1EwRkJRVHRCUVVOV0xFTkJRVU1zUlVGT1Z5eHBRa0ZCYVVJc1IwRkJha0lzZVVKQlFXbENMRXRCUVdwQ0xIbENRVUZwUWl4UlFVMDFRaUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/aux_data_selector.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/bit_config.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/bit_config.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitConfig = void 0;\nconst getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));\nclass BitConfig {\n    constructor(secondInputInUse, secondOutputInUse) {\n        this.secondInputInUse = secondInputInUse;\n        this.secondOutputInUse = secondOutputInUse;\n    }\n    static fromBigInt(val) {\n        return new BitConfig(getNumber(val, 0, 1) == 0 ? false : true, getNumber(val, 1, 1) == 0 ? false : true);\n    }\n    toBigInt() {\n        return BigInt(this.secondInputInUse) + (BigInt(this.secondOutputInUse) << BigInt(1));\n    }\n}\nexports.BitConfig = BitConfig;\nBitConfig.EMPTY = new BitConfig(false, false);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icmlkZ2VfaWQvYml0X2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FDOUQsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU5RSxNQUFhLFNBQVM7SUFHcEIsWUFBNEIsZ0JBQXlCLEVBQWtCLGlCQUEwQjtRQUFyRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVM7UUFBa0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFTO0lBQUcsQ0FBQztJQUVyRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7O0FBWEgsOEJBWUM7QUFYUSxlQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvYml0X2NvbmZpZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvYnJpZGdlX2lkL2JpdF9jb25maWcuanM/YTU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQml0Q29uZmlnID0gdm9pZCAwO1xuY29uc3QgZ2V0TnVtYmVyID0gKHZhbCwgb2Zmc2V0LCBzaXplKSA9PiBOdW1iZXIoKHZhbCA+PiBCaWdJbnQob2Zmc2V0KSkgJiAoKEJpZ0ludCgxKSA8PCBCaWdJbnQoc2l6ZSkpIC0gQmlnSW50KDEpKSk7XG5jbGFzcyBCaXRDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKHNlY29uZElucHV0SW5Vc2UsIHNlY29uZE91dHB1dEluVXNlKSB7XG4gICAgICAgIHRoaXMuc2Vjb25kSW5wdXRJblVzZSA9IHNlY29uZElucHV0SW5Vc2U7XG4gICAgICAgIHRoaXMuc2Vjb25kT3V0cHV0SW5Vc2UgPSBzZWNvbmRPdXRwdXRJblVzZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaWdJbnQodmFsKSB7XG4gICAgICAgIHJldHVybiBuZXcgQml0Q29uZmlnKGdldE51bWJlcih2YWwsIDAsIDEpID09IDAgPyBmYWxzZSA6IHRydWUsIGdldE51bWJlcih2YWwsIDEsIDEpID09IDAgPyBmYWxzZSA6IHRydWUpO1xuICAgIH1cbiAgICB0b0JpZ0ludCgpIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludCh0aGlzLnNlY29uZElucHV0SW5Vc2UpICsgKEJpZ0ludCh0aGlzLnNlY29uZE91dHB1dEluVXNlKSA8PCBCaWdJbnQoMSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQml0Q29uZmlnID0gQml0Q29uZmlnO1xuQml0Q29uZmlnLkVNUFRZID0gbmV3IEJpdENvbmZpZyhmYWxzZSwgZmFsc2UpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWW1sMFgyTnZibVpwWnk1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTlpY21sa1oyVmZhV1F2WW1sMFgyTnZibVpwWnk1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGRExFZEJRVmNzUlVGQlJTeE5RVUZqTEVWQlFVVXNTVUZCV1N4RlFVRkZMRVZCUVVVc1EwRkRPVVFzVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVVTVSU3hOUVVGaExGTkJRVk03U1VGSGNFSXNXVUZCTkVJc1owSkJRWGxDTEVWQlFXdENMR2xDUVVFd1FqdFJRVUZ5UlN4eFFrRkJaMElzUjBGQmFFSXNaMEpCUVdkQ0xFTkJRVk03VVVGQmEwSXNjMEpCUVdsQ0xFZEJRV3BDTEdsQ1FVRnBRaXhEUVVGVE8wbEJRVWNzUTBGQlF6dEpRVVZ5Unl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVmM3VVVGRE0wSXNUMEZCVHl4SlFVRkpMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU16Unl4RFFVRkRPMGxCUlVRc1VVRkJVVHRSUVVOT0xFOUJRVThzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzWkdMRU5CUVVNN08wRkJXRWdzT0VKQldVTTdRVUZZVVN4bFFVRkxMRWRCUVVjc1NVRkJTU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/bit_config.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BridgeId = void 0;\nconst asset_1 = __webpack_require__(/*! ../asset */ \"./node_modules/@noir-lang/barretenberg/dest/asset/index.js\");\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bit_config_1 = __webpack_require__(/*! ./bit_config */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/bit_config.js\");\nconst bridge_id_config_1 = __webpack_require__(/*! ./bridge_id_config */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id_config.js\");\nconst randomInt = (to = 2 ** 30 - 1) => Math.floor(Math.random() * (to + 1));\nconst getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));\nclass BridgeId {\n    constructor(addressId, inputAssetIdA, outputAssetIdA, inputAssetIdB, outputAssetIdB, auxData = 0) {\n        this.addressId = addressId;\n        this.inputAssetIdA = inputAssetIdA;\n        this.outputAssetIdA = outputAssetIdA;\n        this.inputAssetIdB = inputAssetIdB;\n        this.outputAssetIdB = outputAssetIdB;\n        this.auxData = auxData;\n        this.bitConfig = new bit_config_1.BitConfig(inputAssetIdB !== undefined, outputAssetIdB !== undefined);\n    }\n    static random() {\n        return new BridgeId(randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt());\n    }\n    static fromBigInt(val) {\n        const addressId = getNumber(val, bridge_id_config_1.ADDRESS_OFFSET, bridge_id_config_1.ADDRESS_BIT_LEN);\n        const inputAssetIdA = getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_A_LEN);\n        const outputAssetIdA = getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_A_LEN);\n        const inputAssetIdB = getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_B_LEN);\n        const outputAssetIdB = getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_B_LEN);\n        const auxData = getNumber(val, bridge_id_config_1.AUX_DATA_OFFSET, bridge_id_config_1.AUX_DATA_LEN);\n        const bitConfig = bit_config_1.BitConfig.fromBigInt(BigInt(getNumber(val, bridge_id_config_1.BITCONFIG_OFFSET, bridge_id_config_1.BITCONFIG_LEN)));\n        if (!bitConfig.secondInputInUse && inputAssetIdB) {\n            throw new Error('Inconsistent second input.');\n        }\n        if (!bitConfig.secondOutputInUse && outputAssetIdB) {\n            throw new Error('Inconsistent second output.');\n        }\n        return new BridgeId(addressId, inputAssetIdA, outputAssetIdA, bitConfig.secondInputInUse ? inputAssetIdB : undefined, bitConfig.secondOutputInUse ? outputAssetIdB : undefined, auxData);\n    }\n    static fromBuffer(buf) {\n        if (buf.length !== 32) {\n            throw new Error('Invalid buffer.');\n        }\n        return BridgeId.fromBigInt((0, bigint_buffer_1.toBigIntBE)(buf));\n    }\n    static fromString(str) {\n        return BridgeId.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));\n    }\n    get firstInputVirtual() {\n        return (0, asset_1.isVirtualAsset)(this.inputAssetIdA);\n    }\n    get secondInputVirtual() {\n        return !!this.inputAssetIdB && (0, asset_1.isVirtualAsset)(this.inputAssetIdB);\n    }\n    get firstOutputVirtual() {\n        return (0, asset_1.isVirtualAsset)(this.outputAssetIdA);\n    }\n    get secondOutputVirtual() {\n        return !!this.outputAssetIdB && (0, asset_1.isVirtualAsset)(this.outputAssetIdB);\n    }\n    get secondInputInUse() {\n        return this.bitConfig.secondInputInUse;\n    }\n    get secondOutputInUse() {\n        return this.bitConfig.secondOutputInUse;\n    }\n    get numInputAssets() {\n        return this.bitConfig.secondInputInUse ? 2 : 1;\n    }\n    get numOutputAssets() {\n        return this.bitConfig.secondOutputInUse ? 2 : 1;\n    }\n    toBigInt() {\n        return (BigInt(this.addressId) +\n            (BigInt(this.inputAssetIdA) << BigInt(bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET)) +\n            (BigInt(this.inputAssetIdB || 0) << BigInt(bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET)) +\n            (BigInt(this.outputAssetIdA) << BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET)) +\n            (BigInt(this.outputAssetIdB || 0) << BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET)) +\n            (this.bitConfig.toBigInt() << BigInt(bridge_id_config_1.BITCONFIG_OFFSET)) +\n            (BigInt(this.auxData) << BigInt(bridge_id_config_1.AUX_DATA_OFFSET)));\n    }\n    toBuffer() {\n        return (0, bigint_buffer_1.toBufferBE)(this.toBigInt(), 32);\n    }\n    toString() {\n        return `0x${this.toBuffer().toString('hex')}`;\n    }\n    equals(id) {\n        return id.toBuffer().equals(this.toBuffer());\n    }\n}\nexports.BridgeId = BridgeId;\nBridgeId.ZERO = new BridgeId(0, 0, 0);\nBridgeId.ENCODED_LENGTH_IN_BYTES = 32;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2lkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JyaWRnZV9pZC9icmlkZ2VfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0NBQTBDO0FBQzFDLG9EQUEwRDtBQUMxRCw2Q0FBeUM7QUFDekMseURBZTRCO0FBRTVCLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdFLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUM5RCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTlFLE1BQWEsUUFBUTtJQU1uQixZQUNrQixTQUFpQixFQUNqQixhQUFxQixFQUNyQixjQUFzQixFQUN0QixhQUFzQixFQUN0QixjQUF1QixFQUN2QixVQUFVLENBQUM7UUFMWCxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQ3RCLGtCQUFhLEdBQWIsYUFBYSxDQUFTO1FBQ3RCLG1CQUFjLEdBQWQsY0FBYyxDQUFTO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQUk7UUFFM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFTLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRSxjQUFjLEtBQUssU0FBUyxDQUFDLENBQUM7SUFD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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id_config.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id_config.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUX_DATA_OFFSET = exports.BITCONFIG_OFFSET = exports.OUTPUT_ASSET_ID_B_OFFSET = exports.OUTPUT_ASSET_ID_A_OFFSET = exports.INPUT_ASSET_ID_B_OFFSET = exports.INPUT_ASSET_ID_A_OFFSET = exports.ADDRESS_OFFSET = exports.AUX_DATA_LEN = exports.BITCONFIG_LEN = exports.INPUT_ASSET_ID_B_LEN = exports.OUTPUT_ASSET_ID_B_LEN = exports.OUTPUT_ASSET_ID_A_LEN = exports.INPUT_ASSET_ID_A_LEN = exports.ADDRESS_BIT_LEN = exports.virtualAssetIdPlaceholder = exports.virtualAssetIdFlag = void 0;\nexports.virtualAssetIdFlag = 1 << 29;\nexports.virtualAssetIdPlaceholder = 1 << 29;\nexports.ADDRESS_BIT_LEN = 32;\nexports.INPUT_ASSET_ID_A_LEN = 30;\nexports.OUTPUT_ASSET_ID_A_LEN = 30;\nexports.OUTPUT_ASSET_ID_B_LEN = 30;\nexports.INPUT_ASSET_ID_B_LEN = 30;\nexports.BITCONFIG_LEN = 32;\nexports.AUX_DATA_LEN = 64;\nexports.ADDRESS_OFFSET = 0;\nexports.INPUT_ASSET_ID_A_OFFSET = exports.ADDRESS_BIT_LEN;\nexports.INPUT_ASSET_ID_B_OFFSET = exports.INPUT_ASSET_ID_A_OFFSET + exports.INPUT_ASSET_ID_A_LEN;\nexports.OUTPUT_ASSET_ID_A_OFFSET = exports.INPUT_ASSET_ID_B_OFFSET + exports.INPUT_ASSET_ID_B_LEN;\nexports.OUTPUT_ASSET_ID_B_OFFSET = exports.OUTPUT_ASSET_ID_A_OFFSET + exports.OUTPUT_ASSET_ID_A_LEN;\nexports.BITCONFIG_OFFSET = exports.OUTPUT_ASSET_ID_B_OFFSET + exports.OUTPUT_ASSET_ID_B_LEN;\nexports.AUX_DATA_OFFSET = exports.BITCONFIG_OFFSET + exports.BITCONFIG_LEN;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2lkX2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icmlkZ2VfaWQvYnJpZGdlX2lkX2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLGtCQUFrQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0IsUUFBQSx5QkFBeUIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBRXBDLFFBQUEsZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUNyQixRQUFBLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUMxQixRQUFBLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUMzQixRQUFBLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUMzQixRQUFBLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUMxQixRQUFBLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFDbkIsUUFBQSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBRWxCLFFBQUEsY0FBYyxHQUFHLENBQUMsQ0FBQztBQUNuQixRQUFBLHVCQUF1QixHQUFHLHVCQUFlLENBQUM7QUFDMUMsUUFBQSx1QkFBdUIsR0FBRywrQkFBdUIsR0FBRyw0QkFBb0IsQ0FBQztBQUN6RSxRQUFBLHdCQUF3QixHQUFHLCtCQUF1QixHQUFHLDRCQUFvQixDQUFDO0FBQzFFLFFBQUEsd0JBQXdCLEdBQUcsZ0NBQXdCLEdBQUcsNkJBQXFCLENBQUM7QUFDNUUsUUFBQSxnQkFBZ0IsR0FBRyxnQ0FBd0IsR0FBRyw2QkFBcUIsQ0FBQztBQUNwRSxRQUFBLGVBQWUsR0FBRyx3QkFBZ0IsR0FBRyxxQkFBYSxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvYnJpZGdlX2lkX2NvbmZpZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxnQ0FBZ0MsR0FBRyxnQ0FBZ0MsR0FBRywrQkFBK0IsR0FBRywrQkFBK0IsR0FBRyxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyxxQkFBcUIsR0FBRyw0QkFBNEIsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyw0QkFBNEIsR0FBRyx1QkFBdUIsR0FBRyxpQ0FBaUMsR0FBRywwQkFBMEI7QUFDN2QsMEJBQTBCO0FBQzFCLGlDQUFpQztBQUNqQyx1QkFBdUI7QUFDdkIsNEJBQTRCO0FBQzVCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsc0JBQXNCO0FBQ3RCLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyx3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvYnJpZGdlX2lkX2NvbmZpZy5qcz83MGNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVhfREFUQV9PRkZTRVQgPSBleHBvcnRzLkJJVENPTkZJR19PRkZTRVQgPSBleHBvcnRzLk9VVFBVVF9BU1NFVF9JRF9CX09GRlNFVCA9IGV4cG9ydHMuT1VUUFVUX0FTU0VUX0lEX0FfT0ZGU0VUID0gZXhwb3J0cy5JTlBVVF9BU1NFVF9JRF9CX09GRlNFVCA9IGV4cG9ydHMuSU5QVVRfQVNTRVRfSURfQV9PRkZTRVQgPSBleHBvcnRzLkFERFJFU1NfT0ZGU0VUID0gZXhwb3J0cy5BVVhfREFUQV9MRU4gPSBleHBvcnRzLkJJVENPTkZJR19MRU4gPSBleHBvcnRzLklOUFVUX0FTU0VUX0lEX0JfTEVOID0gZXhwb3J0cy5PVVRQVVRfQVNTRVRfSURfQl9MRU4gPSBleHBvcnRzLk9VVFBVVF9BU1NFVF9JRF9BX0xFTiA9IGV4cG9ydHMuSU5QVVRfQVNTRVRfSURfQV9MRU4gPSBleHBvcnRzLkFERFJFU1NfQklUX0xFTiA9IGV4cG9ydHMudmlydHVhbEFzc2V0SWRQbGFjZWhvbGRlciA9IGV4cG9ydHMudmlydHVhbEFzc2V0SWRGbGFnID0gdm9pZCAwO1xuZXhwb3J0cy52aXJ0dWFsQXNzZXRJZEZsYWcgPSAxIDw8IDI5O1xuZXhwb3J0cy52aXJ0dWFsQXNzZXRJZFBsYWNlaG9sZGVyID0gMSA8PCAyOTtcbmV4cG9ydHMuQUREUkVTU19CSVRfTEVOID0gMzI7XG5leHBvcnRzLklOUFVUX0FTU0VUX0lEX0FfTEVOID0gMzA7XG5leHBvcnRzLk9VVFBVVF9BU1NFVF9JRF9BX0xFTiA9IDMwO1xuZXhwb3J0cy5PVVRQVVRfQVNTRVRfSURfQl9MRU4gPSAzMDtcbmV4cG9ydHMuSU5QVVRfQVNTRVRfSURfQl9MRU4gPSAzMDtcbmV4cG9ydHMuQklUQ09ORklHX0xFTiA9IDMyO1xuZXhwb3J0cy5BVVhfREFUQV9MRU4gPSA2NDtcbmV4cG9ydHMuQUREUkVTU19PRkZTRVQgPSAwO1xuZXhwb3J0cy5JTlBVVF9BU1NFVF9JRF9BX09GRlNFVCA9IGV4cG9ydHMuQUREUkVTU19CSVRfTEVOO1xuZXhwb3J0cy5JTlBVVF9BU1NFVF9JRF9CX09GRlNFVCA9IGV4cG9ydHMuSU5QVVRfQVNTRVRfSURfQV9PRkZTRVQgKyBleHBvcnRzLklOUFVUX0FTU0VUX0lEX0FfTEVOO1xuZXhwb3J0cy5PVVRQVVRfQVNTRVRfSURfQV9PRkZTRVQgPSBleHBvcnRzLklOUFVUX0FTU0VUX0lEX0JfT0ZGU0VUICsgZXhwb3J0cy5JTlBVVF9BU1NFVF9JRF9CX0xFTjtcbmV4cG9ydHMuT1VUUFVUX0FTU0VUX0lEX0JfT0ZGU0VUID0gZXhwb3J0cy5PVVRQVVRfQVNTRVRfSURfQV9PRkZTRVQgKyBleHBvcnRzLk9VVFBVVF9BU1NFVF9JRF9BX0xFTjtcbmV4cG9ydHMuQklUQ09ORklHX09GRlNFVCA9IGV4cG9ydHMuT1VUUFVUX0FTU0VUX0lEX0JfT0ZGU0VUICsgZXhwb3J0cy5PVVRQVVRfQVNTRVRfSURfQl9MRU47XG5leHBvcnRzLkFVWF9EQVRBX09GRlNFVCA9IGV4cG9ydHMuQklUQ09ORklHX09GRlNFVCArIGV4cG9ydHMuQklUQ09ORklHX0xFTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVluSnBaR2RsWDJsa1gyTnZibVpwWnk1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTlpY21sa1oyVmZhV1F2WW5KcFpHZGxYMmxrWDJOdmJtWnBaeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJZU3hSUVVGQkxHdENRVUZyUWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGRE4wSXNVVUZCUVN4NVFrRkJlVUlzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUlhCRExGRkJRVUVzWlVGQlpTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnlRaXhSUVVGQkxHOUNRVUZ2UWl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNeFFpeFJRVUZCTEhGQ1FVRnhRaXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU16UWl4UlFVRkJMSEZDUVVGeFFpeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTXpRaXhSUVVGQkxHOUNRVUZ2UWl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNeFFpeFJRVUZCTEdGQlFXRXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRia0lzVVVGQlFTeFpRVUZaTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUld4Q0xGRkJRVUVzWTBGQll5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnVRaXhSUVVGQkxIVkNRVUYxUWl4SFFVRkhMSFZDUVVGbExFTkJRVU03UVVGRE1VTXNVVUZCUVN4MVFrRkJkVUlzUjBGQlJ5d3JRa0ZCZFVJc1IwRkJSeXcwUWtGQmIwSXNRMEZCUXp0QlFVTjZSU3hSUVVGQkxIZENRVUYzUWl4SFFVRkhMQ3RDUVVGMVFpeEhRVUZITERSQ1FVRnZRaXhEUVVGRE8wRkJRekZGTEZGQlFVRXNkMEpCUVhkQ0xFZEJRVWNzWjBOQlFYZENMRWRCUVVjc05rSkJRWEZDTEVOQlFVTTdRVUZETlVVc1VVRkJRU3huUWtGQlowSXNSMEZCUnl4blEwRkJkMElzUjBGQlJ5dzJRa0ZCY1VJc1EwRkJRenRCUVVOd1JTeFJRVUZCTEdWQlFXVXNSMEZCUnl4M1FrRkJaMElzUjBGQlJ5eHhRa0ZCWVN4RFFVRkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id_config.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.virtualAssetIdPlaceholder = exports.virtualAssetIdFlag = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./aux_data_selector */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/aux_data_selector.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./validate_bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/validate_bridge_id.js\"), exports);\nvar bridge_id_config_1 = __webpack_require__(/*! ./bridge_id_config */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/bridge_id_config.js\");\nObject.defineProperty(exports, \"virtualAssetIdFlag\", ({ enumerable: true, get: function () { return bridge_id_config_1.virtualAssetIdFlag; } }));\nObject.defineProperty(exports, \"virtualAssetIdPlaceholder\", ({ enumerable: true, get: function () { return bridge_id_config_1.virtualAssetIdPlaceholder; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnJpZGdlX2lkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxtRUFBb0M7QUFDcEMsMkRBQTRCO0FBQzVCLG9FQUFxQztBQUNyQyx1REFBbUY7QUFBMUUsc0hBQUEsa0JBQWtCLE9BQUE7QUFBRSw2SEFBQSx5QkFBeUIsT0FBQSJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsMEJBQTBCO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLHVHQUFxQjtBQUN2RCwwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBYTtBQUMvQywwQkFBMEIsbUJBQU8sQ0FBQyx5R0FBc0I7QUFDeEQseUJBQXlCLG1CQUFPLENBQUMscUdBQW9CO0FBQ3JELHNEQUFxRCxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUM5SSw2REFBNEQsRUFBRSxxQ0FBcUMsd0RBQXdELEVBQUM7QUFDNUosMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2JyaWRnZV9pZC9pbmRleC5qcz82NjkxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52aXJ0dWFsQXNzZXRJZFBsYWNlaG9sZGVyID0gZXhwb3J0cy52aXJ0dWFsQXNzZXRJZEZsYWcgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hdXhfZGF0YV9zZWxlY3RvclwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2JyaWRnZV9pZFwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3ZhbGlkYXRlX2JyaWRnZV9pZFwiKSwgZXhwb3J0cyk7XG52YXIgYnJpZGdlX2lkX2NvbmZpZ18xID0gcmVxdWlyZShcIi4vYnJpZGdlX2lkX2NvbmZpZ1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZpcnR1YWxBc3NldElkRmxhZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJpZGdlX2lkX2NvbmZpZ18xLnZpcnR1YWxBc3NldElkRmxhZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZpcnR1YWxBc3NldElkUGxhY2Vob2xkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJyaWRnZV9pZF9jb25maWdfMS52aXJ0dWFsQXNzZXRJZFBsYWNlaG9sZGVyOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdlluSnBaR2RsWDJsa0wybHVaR1Y0TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZCUVN4dFJVRkJiME03UVVGRGNFTXNNa1JCUVRSQ08wRkJRelZDTEc5RlFVRnhRenRCUVVOeVF5eDFSRUZCYlVZN1FVRkJNVVVzYzBoQlFVRXNhMEpCUVd0Q0xFOUJRVUU3UVVGQlJTdzJTRUZCUVN4NVFrRkJlVUlzVDBGQlFTSjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/bridge_id/validate_bridge_id.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/bridge_id/validate_bridge_id.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateBridgeId = void 0;\nconst validateBridgeId = (bridgeId) => {\n    if (bridgeId.inputAssetIdA === bridgeId.inputAssetIdB) {\n        throw new Error('Identical input assets.');\n    }\n    if (!bridgeId.secondOutputVirtual && bridgeId.outputAssetIdA === bridgeId.outputAssetIdB) {\n        throw new Error('Identical output assets.');\n    }\n};\nexports.validateBridgeId = validateBridgeId;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVfYnJpZGdlX2lkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JyaWRnZV9pZC92YWxpZGF0ZV9icmlkZ2VfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRU8sTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtJQUNyRCxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssUUFBUSxDQUFDLGFBQWEsRUFBRTtRQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7S0FDNUM7SUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixJQUFJLFFBQVEsQ0FBQyxjQUFjLEtBQUssUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUN4RixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDN0M7QUFDSCxDQUFDLENBQUM7QUFQVyxRQUFBLGdCQUFnQixvQkFPM0IifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvdmFsaWRhdGVfYnJpZGdlX2lkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9icmlkZ2VfaWQvdmFsaWRhdGVfYnJpZGdlX2lkLmpzP2U4N2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlQnJpZGdlSWQgPSB2b2lkIDA7XG5jb25zdCB2YWxpZGF0ZUJyaWRnZUlkID0gKGJyaWRnZUlkKSA9PiB7XG4gICAgaWYgKGJyaWRnZUlkLmlucHV0QXNzZXRJZEEgPT09IGJyaWRnZUlkLmlucHV0QXNzZXRJZEIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJZGVudGljYWwgaW5wdXQgYXNzZXRzLicpO1xuICAgIH1cbiAgICBpZiAoIWJyaWRnZUlkLnNlY29uZE91dHB1dFZpcnR1YWwgJiYgYnJpZGdlSWQub3V0cHV0QXNzZXRJZEEgPT09IGJyaWRnZUlkLm91dHB1dEFzc2V0SWRCKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSWRlbnRpY2FsIG91dHB1dCBhc3NldHMuJyk7XG4gICAgfVxufTtcbmV4cG9ydHMudmFsaWRhdGVCcmlkZ2VJZCA9IHZhbGlkYXRlQnJpZGdlSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkbUZzYVdSaGRHVmZZbkpwWkdkbFgybGtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwySnlhV1JuWlY5cFpDOTJZV3hwWkdGMFpWOWljbWxrWjJWZmFXUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlJVOHNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eERRVUZETEZGQlFXdENMRVZCUVVVc1JVRkJSVHRKUVVOeVJDeEpRVUZKTEZGQlFWRXNRMEZCUXl4aFFVRmhMRXRCUVVzc1VVRkJVU3hEUVVGRExHRkJRV0VzUlVGQlJUdFJRVU55UkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExIbENRVUY1UWl4RFFVRkRMRU5CUVVNN1MwRkROVU03U1VGRFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRXRCUVVzc1VVRkJVU3hEUVVGRExHTkJRV01zUlVGQlJUdFJRVU40Uml4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVNN1MwRkROME03UVVGRFNDeERRVUZETEVOQlFVTTdRVUZRVnl4UlFVRkJMR2RDUVVGblFpeHZRa0ZQTTBJaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/bridge_id/validate_bridge_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_prover.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_prover.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountProver = void 0;\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist/index.js\");\nclass AccountProver {\n    constructor(prover, mock = false) {\n        this.prover = prover;\n        this.mock = mock;\n    }\n    static getCircuitSize(proverless = false) {\n        return proverless ? 512 : 32 * 1024;\n    }\n    async computeKey() {\n        const worker = this.prover.getWorker();\n        await worker.call('account__init_proving_key', this.mock);\n    }\n    async loadKey(keyBuf) {\n        const worker = this.prover.getWorker();\n        const keyPtr = await worker.call('bbmalloc', keyBuf.length);\n        await worker.transferToHeap((0, threads_1.Transfer)(keyBuf, [keyBuf.buffer]), keyPtr);\n        await worker.call('account__init_proving_key_from_buffer', keyPtr);\n        await worker.call('bbfree', keyPtr);\n    }\n    async getKey() {\n        const worker = this.prover.getWorker();\n        await worker.acquire();\n        try {\n            const keySize = await worker.call('account__get_new_proving_key_data', 0);\n            const keyPtr = Buffer.from(await worker.sliceMemory(0, 4)).readUInt32LE(0);\n            const buf = Buffer.from(await worker.sliceMemory(keyPtr, keyPtr + keySize));\n            await worker.call('bbfree', keyPtr);\n            return buf;\n        }\n        finally {\n            await worker.release();\n        }\n    }\n    async computeSigningData(tx) {\n        const worker = this.prover.getWorker();\n        await worker.transferToHeap(tx.toBuffer(), 0);\n        await worker.call('account__compute_signing_data', 0, 0);\n        return Buffer.from(await worker.sliceMemory(0, 32));\n    }\n    async createAccountProof(tx, signature) {\n        const worker = this.prover.getWorker();\n        const buf = Buffer.concat([tx.toBuffer(), signature.toBuffer()]);\n        const mem = await worker.call('bbmalloc', buf.length);\n        await worker.transferToHeap(buf, mem);\n        const proverPtr = await worker.call('account__new_prover', mem, this.mock);\n        await worker.call('bbfree', mem);\n        const proof = await this.prover.createProof(proverPtr);\n        await worker.call('account__delete_prover', proverPtr);\n        return proof;\n    }\n    getProver() {\n        return this.prover;\n    }\n}\nexports.AccountProver = AccountProver;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9wcm92ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9hY2NvdW50X3Byb29mL2FjY291bnRfcHJvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFtQztBQUtuQyxNQUFhLGFBQWE7SUFDeEIsWUFBb0IsTUFBc0IsRUFBa0IsT0FBTyxLQUFLO1FBQXBELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQWtCLFNBQUksR0FBSixJQUFJLENBQVE7SUFBRyxDQUFDO0lBRTVFLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLEtBQUs7UUFDdEMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVU7UUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWM7UUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBQSxrQkFBUSxFQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlFLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuRSxNQUFN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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_prover.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_tx.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_tx.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountTx = void 0;\nconst account_id_1 = __webpack_require__(/*! ../../account_id */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/index.js\");\nconst address_1 = __webpack_require__(/*! ../../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst merkle_tree_1 = __webpack_require__(/*! ../../merkle_tree */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nclass AccountTx {\n    constructor(merkleRoot, accountPublicKey, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, aliasHash, create, migrate, accountIndex, accountPath, spendingPublicKey) {\n        this.merkleRoot = merkleRoot;\n        this.accountPublicKey = accountPublicKey;\n        this.newAccountPublicKey = newAccountPublicKey;\n        this.newSpendingPublicKey1 = newSpendingPublicKey1;\n        this.newSpendingPublicKey2 = newSpendingPublicKey2;\n        this.aliasHash = aliasHash;\n        this.create = create;\n        this.migrate = migrate;\n        this.accountIndex = accountIndex;\n        this.accountPath = accountPath;\n        this.spendingPublicKey = spendingPublicKey;\n    }\n    toBuffer() {\n        return Buffer.concat([\n            this.merkleRoot,\n            this.accountPublicKey.toBuffer(),\n            this.newAccountPublicKey.toBuffer(),\n            this.newSpendingPublicKey1.toBuffer(),\n            this.newSpendingPublicKey2.toBuffer(),\n            this.aliasHash.toBuffer32(),\n            Buffer.from([this.create ? 1 : 0]),\n            Buffer.from([this.migrate ? 1 : 0]),\n            (0, serialize_1.numToUInt32BE)(this.accountIndex),\n            this.accountPath.toBuffer(),\n            this.spendingPublicKey.toBuffer(),\n        ]);\n    }\n    static fromBuffer(buf) {\n        let dataStart = 0;\n        const merkleRoot = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const accountPublicKey = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const newAccountPublicKey = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const newSpendingPublicKey1 = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const newSpendingPublicKey2 = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const aliasHash = new account_id_1.AliasHash(buf.slice(dataStart + 4, dataStart + 32));\n        dataStart += 32;\n        const create = !!buf[dataStart];\n        dataStart += 1;\n        const migrate = !!buf[dataStart];\n        dataStart += 1;\n        const accountIndex = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const { elem: accountPath, adv } = merkle_tree_1.HashPath.deserialize(buf, dataStart);\n        dataStart += adv;\n        const spendingPublicKey = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        return new AccountTx(merkleRoot, accountPublicKey, newAccountPublicKey, newSpendingPublicKey1, newSpendingPublicKey2, aliasHash, create, migrate, accountIndex, accountPath, spendingPublicKey);\n    }\n}\nexports.AccountTx = AccountTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF90eC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL2FjY291bnRfcHJvb2YvYWNjb3VudF90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBNkM7QUFDN0MsMkNBQWdEO0FBQ2hELG1EQUE2QztBQUM3QywrQ0FBZ0Q7QUFFaEQsTUFBYSxTQUFTO0lBQ3BCLFlBQ1MsVUFBa0IsRUFDbEIsZ0JBQWlDLEVBQ2pDLG1CQUFvQyxFQUNwQyxxQkFBc0MsRUFDdEMscUJBQXNDLEVBQ3RDLFNBQW9CLEVBQ3BCLE1BQWUsRUFDZixPQUFnQixFQUNoQixZQUFvQixFQUNwQixXQUFxQixFQUNyQixpQkFBa0M7UUFWbEMsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQ2pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUI7UUFDcEMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFpQjtRQUN0QywwQkFBcUIsR0FBckIscUJBQXFCLENBQWlCO1FBQ3RDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUNmLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsZ0JBQVcsR0FBWCxXQUFXLENBQVU7UUFDckIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFpQjtJQUN4QyxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRTtZQUNuQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUU7WUFDckMs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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_tx.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_verifier.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_verifier.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountVerifier = void 0;\nclass AccountVerifier {\n    async computeKey(pippenger, g2Data) {\n        this.worker = pippenger.getWorker();\n        await this.worker.transferToHeap(g2Data, 0);\n        await this.worker.call('account__init_verification_key', pippenger.getPointer(), 0);\n    }\n    async getKey() {\n        const keySize = await this.worker.call('account__get_new_verification_key_data', 0);\n        const keyPtr = Buffer.from(await this.worker.sliceMemory(0, 4)).readUInt32LE(0);\n        const buf = Buffer.from(await this.worker.sliceMemory(keyPtr, keyPtr + keySize));\n        await this.worker.call('bbfree', keyPtr);\n        return buf;\n    }\n    async loadKey(worker, keyBuf, g2Data) {\n        this.worker = worker;\n        const keyPtr = await this.worker.call('bbmalloc', keyBuf.length);\n        await this.worker.transferToHeap(g2Data, 0);\n        await this.worker.transferToHeap(keyBuf, keyPtr);\n        await this.worker.call('account__init_verification_key_from_buffer', keyPtr, 0);\n        await this.worker.call('bbfree', keyPtr);\n    }\n    async verifyProof(proof) {\n        const proofPtr = await this.worker.call('bbmalloc', proof.length);\n        await this.worker.transferToHeap(proof, proofPtr);\n        const verified = (await this.worker.call('account__verify_proof', proofPtr, proof.length)) ? true : false;\n        await this.worker.call('bbfree', proofPtr);\n        return verified;\n    }\n}\nexports.AccountVerifier = AccountVerifier;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF92ZXJpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL2FjY291bnRfcHJvb2YvYWNjb3VudF92ZXJpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxNQUFhLGVBQWU7SUFHbkIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUEwQixFQUFFLE1BQWtCO1FBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTTtRQUNqQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNqRixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQTBCLEVBQUUsTUFBYyxFQUFFLE1BQWtCO1FBQ2pGLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFhO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsRCxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMxRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFqQ0QsMENBaUNDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2FjY291bnRfcHJvb2YvYWNjb3VudF92ZXJpZmllci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsTUFBTTtBQUM3QixvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9hY2NvdW50X3Byb29mL2FjY291bnRfdmVyaWZpZXIuanM/ZDg2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWNjb3VudFZlcmlmaWVyID0gdm9pZCAwO1xuY2xhc3MgQWNjb3VudFZlcmlmaWVyIHtcbiAgICBhc3luYyBjb21wdXRlS2V5KHBpcHBlbmdlciwgZzJEYXRhKSB7XG4gICAgICAgIHRoaXMud29ya2VyID0gcGlwcGVuZ2VyLmdldFdvcmtlcigpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci50cmFuc2ZlclRvSGVhcChnMkRhdGEsIDApO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdhY2NvdW50X19pbml0X3ZlcmlmaWNhdGlvbl9rZXknLCBwaXBwZW5nZXIuZ2V0UG9pbnRlcigpLCAwKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0S2V5KCkge1xuICAgICAgICBjb25zdCBrZXlTaXplID0gYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYWNjb3VudF9fZ2V0X25ld192ZXJpZmljYXRpb25fa2V5X2RhdGEnLCAwKTtcbiAgICAgICAgY29uc3Qga2V5UHRyID0gQnVmZmVyLmZyb20oYXdhaXQgdGhpcy53b3JrZXIuc2xpY2VNZW1vcnkoMCwgNCkpLnJlYWRVSW50MzJMRSgwKTtcbiAgICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20oYXdhaXQgdGhpcy53b3JrZXIuc2xpY2VNZW1vcnkoa2V5UHRyLCBrZXlQdHIgKyBrZXlTaXplKSk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ2JiZnJlZScsIGtleVB0cik7XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIGFzeW5jIGxvYWRLZXkod29ya2VyLCBrZXlCdWYsIGcyRGF0YSkge1xuICAgICAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgICAgICAgY29uc3Qga2V5UHRyID0gYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJtYWxsb2MnLCBrZXlCdWYubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIudHJhbnNmZXJUb0hlYXAoZzJEYXRhLCAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIudHJhbnNmZXJUb0hlYXAoa2V5QnVmLCBrZXlQdHIpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdhY2NvdW50X19pbml0X3ZlcmlmaWNhdGlvbl9rZXlfZnJvbV9idWZmZXInLCBrZXlQdHIsIDApO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYmZyZWUnLCBrZXlQdHIpO1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnlQcm9vZihwcm9vZikge1xuICAgICAgICBjb25zdCBwcm9vZlB0ciA9IGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ2JibWFsbG9jJywgcHJvb2YubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIudHJhbnNmZXJUb0hlYXAocHJvb2YsIHByb29mUHRyKTtcbiAgICAgICAgY29uc3QgdmVyaWZpZWQgPSAoYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYWNjb3VudF9fdmVyaWZ5X3Byb29mJywgcHJvb2ZQdHIsIHByb29mLmxlbmd0aCkpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYmZyZWUnLCBwcm9vZlB0cik7XG4gICAgICAgIHJldHVybiB2ZXJpZmllZDtcbiAgICB9XG59XG5leHBvcnRzLkFjY291bnRWZXJpZmllciA9IEFjY291bnRWZXJpZmllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXTmpiM1Z1ZEY5MlpYSnBabWxsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5amJHbGxiblJmY0hKdmIyWnpMMkZqWTI5MWJuUmZjSEp2YjJZdllXTmpiM1Z1ZEY5MlpYSnBabWxsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZIUVN4TlFVRmhMR1ZCUVdVN1NVRkhia0lzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRXdRaXhGUVVGRkxFMUJRV3RDTzFGQlEzQkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMUZCUTNCRExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6VkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNaME5CUVdkRExFVkJRVVVzVTBGQlV5eERRVUZETEZWQlFWVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM1JHTEVOQlFVTTdTVUZGVFN4TFFVRkxMRU5CUVVNc1RVRkJUVHRSUVVOcVFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEhkRFFVRjNReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkdMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVZc1RVRkJUU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUml4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVONlF5eFBRVUZQTEVkQlFVY3NRMEZCUXp0SlFVTmlMRU5CUVVNN1NVRkZUU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFUQkNMRVZCUVVVc1RVRkJZeXhGUVVGRkxFMUJRV3RDTzFGQlEycEdMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzSkNMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTnFSU3hOUVVGTkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU0xUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOcVJDeE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExEUkRRVUUwUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5vUml4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVMHNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGaE8xRkJRM0JETEUxQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU5zUlN4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVOc1JDeE5RVUZOTEZGQlFWRXNSMEZCUnl4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVNeFJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhQUVVGUExGRkJRVkVzUTBGQlF6dEpRVU5zUWl4RFFVRkRPME5CUTBZN1FVRnFRMFFzTUVOQmFVTkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_verifier.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_prover.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_tx */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_tx.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_verifier */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/account_verifier.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9hY2NvdW50X3Byb29mL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdFQUFpQztBQUNqQyw0REFBNkI7QUFDN0Isa0VBQW1DIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2FjY291bnRfcHJvb2YvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsbUhBQWtCO0FBQ3BELDBCQUEwQixtQkFBTyxDQUFDLDJHQUFjO0FBQ2hELDBCQUEwQixtQkFBTyxDQUFDLHVIQUFvQjtBQUN0RCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9hY2NvdW50X3Byb29mL2luZGV4LmpzP2YwNjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hY2NvdW50X3Byb3ZlclwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2FjY291bnRfdHhcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hY2NvdW50X3ZlcmlmaWVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WTJ4cFpXNTBYM0J5YjI5bWN5OWhZMk52ZFc1MFgzQnliMjltTDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMR2RGUVVGcFF6dEJRVU5xUXl3MFJFRkJOa0k3UVVGRE4wSXNhMFZCUVcxREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verify_proof = exports.create_proof_with_witness = exports.create_proof = exports.setup_generic_prover_and_verifier = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n// TODO: fix this typo of barretenberg spelling\nconst aztec_backend_1 = __webpack_require__(/*! @noir-lang/aztec_backend */ \"./node_modules/@noir-lang/barretenberg/node_modules/@noir-lang/aztec_backend/aztec_backend.js\");\nconst crs_1 = __webpack_require__(/*! ../../crs */ \"./node_modules/@noir-lang/barretenberg/dest/crs/index.js\");\nconst fft_1 = __webpack_require__(/*! ../../fft */ \"./node_modules/@noir-lang/barretenberg/dest/fft/index.js\");\nconst pippenger_1 = __webpack_require__(/*! ../../pippenger */ \"./node_modules/@noir-lang/barretenberg/dest/pippenger/index.js\");\nconst wasm_1 = __webpack_require__(/*! ../../wasm */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/index.js\");\nconst prover_1 = __webpack_require__(/*! ../prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/index.js\");\nconst standard_example_prover_1 = __webpack_require__(/*! ./standard_example_prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_prover.js\");\nconst standard_example_verifier_1 = __webpack_require__(/*! ./standard_example_verifier */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_verifier.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./standard_example_prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_prover.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./standard_example_verifier */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_verifier.js\"), exports);\n// Takes in a structure representing ACIR which we get from\n// wasm version of the noir compiler\n//\n// We then serialise the ACIR into a byte array which represents\n// what is known as standard_format in the C++ code.\n//\n// standard_format is capable of representing any statement.\n//\n// Note this byte array would be analogous to the `tx` structures\n// in the other client proofs\nasync function setup_generic_prover_and_verifier(acir) {\n    const serialised_circuit = (0, aztec_backend_1.serialise_acir_to_barrtenberg_circuit)(acir);\n    const barretenberg = await wasm_1.BarretenbergWasm.new();\n    const circSize = await (0, standard_example_prover_1.getCircuitSize)(barretenberg, serialised_circuit);\n    const crs = await load_crs(circSize);\n    const numWorkers = getNumCores();\n    const wasm = await wasm_1.BarretenbergWasm.new();\n    const workerPool = await wasm_1.WorkerPool.new(wasm, numWorkers);\n    const pippenger = new pippenger_1.PooledPippenger(workerPool);\n    const fft = new fft_1.PooledFft(workerPool);\n    await fft.init(circSize);\n    await pippenger.init(crs.getData());\n    const prover = new prover_1.Prover(workerPool.workers[0], pippenger, fft);\n    const standardExampleProver = new standard_example_prover_1.StandardExampleProver(prover);\n    await standardExampleProver.initCircuitDefinition(serialised_circuit);\n    const standardExampleVerifier = new standard_example_verifier_1.StandardExampleVerifier();\n    // Create proving key with a dummy CRS\n    await standardExampleProver.computeKey();\n    // Create verifier key *and* patch proving key with the CRS\n    await standardExampleVerifier.computeKey(pippenger.pool[0], crs.getG2Data());\n    // Compute smart contract and cache it\n    await standardExampleVerifier.computeSmartContract(pippenger.pool[0], crs.getG2Data(), serialised_circuit);\n    return Promise.all([standardExampleProver, standardExampleVerifier]);\n}\nexports.setup_generic_prover_and_verifier = setup_generic_prover_and_verifier;\nasync function load_crs(circSize) {\n    // We may need more elements in the SRS than the circuit size. In particular, we may need circSize +1\n    // We add an offset here to account for that\n    const offset = 1;\n    const crs = new crs_1.Crs(circSize + offset);\n    await crs.download();\n    return crs;\n}\nasync function create_proof(prover, acir, abi) {\n    // compute partial witness here\n    let witness_arr = await compute_partial_witnesses(acir, abi);\n    // computes the proof\n    const proof = await prover.createProof(witness_arr);\n    return proof;\n}\nexports.create_proof = create_proof;\nasync function create_proof_with_witness(prover, witness_arr) {\n    // computes the proof\n    const proof = await prover.createProof(witness_arr);\n    return proof;\n}\nexports.create_proof_with_witness = create_proof_with_witness;\nasync function verify_proof(verifier, proof) {\n    const verified = await verifier.verifyProof(proof);\n    return verified;\n}\nexports.verify_proof = verify_proof;\nasync function compute_partial_witnesses(circuit, abi) {\n    // Use the ACIR representation to compute the partial witnesses\n    // Assumption: .values() will always return the values in a deterministic order;\n    // (from left to right) in the abi object\n    let values = [];\n    for (const [_, v] of Object.entries(abi)) {\n        let entry_values = AnyToHexStrs(v);\n        values = values.concat(entry_values);\n    }\n    return (0, aztec_backend_1.compute_witnesses)(circuit, values);\n}\nfunction AnyToHexStrs(any_object) {\n    let values = [];\n    if (Array.isArray(any_object)) {\n        for (let variable of any_object) {\n            values = values.concat(AnyToHexStrs(variable));\n        }\n    }\n    else if (typeof any_object === 'string' || any_object instanceof String) {\n        // If the type is a string, we expect it to be a hex string\n        let string_object = any_object;\n        if (isValidHex(string_object)) {\n            values.push(string_object);\n        }\n        else {\n            // TODO: throw should not be in a library, but currently we aren't doing \n            // TODO: much in terms of error handling\n            throw new Error(\"strings can only be hexadecimal and must start with 0x\");\n        }\n    }\n    else if (Number.isInteger(any_object)) {\n        let number_object = any_object;\n        let number_hex = number_object.toString(16);\n        // The rust code only accepts even hex digits\n        let is_even_hex_length = number_hex.length % 2 == 0;\n        if (is_even_hex_length) {\n            values.push(\"0x\" + number_hex);\n        }\n        else {\n            values.push(\"0x0\" + number_hex);\n        }\n    }\n    else {\n        throw new Error(\"unknown object type in the abi\");\n    }\n    return values;\n}\nfunction isValidHex(hex_str) {\n    return !isNaN(Number(hex_str));\n}\nfunction getNumCores() {\n    // TODO: The below comment was when we had this in a separate package\n    //\n    // Barretenberg.js uses navigator.hardwareConcurrency which is\n    // only available in the desktop environment, not in js\n    //\n    // No need to find a polyfill for it, as our circuit is so small\n    return 4;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9nZW5lcmljX3Byb29mL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwrQ0FBK0M7QUFDL0MsNERBSWtDO0FBQ2xDLG1DQUFnQztBQUNoQyxtQ0FBc0M7QUFDdEMsK0NBQWtEO0FBQ2xELHFDQUEwRDtBQUMxRCxzQ0FBbUM7QUFDbkMsdUVBQWtGO0FBQ2xGLDJFQUFzRTtBQUV0RSx5RUFBMEM7QUFDMUMsMkVBQTRDO0FBRTVDLDJEQUEyRDtBQUMzRCxvQ0FBb0M7QUFDcEMsRUFBRTtBQUNGLGdFQUFnRTtBQUNoRSxvREFBb0Q7QUFDcEQsRUFBRTtBQUNGLDREQUE0RDtBQUM1RCxFQUFFO0FBQ0YsaUVBQWlFO0FBQ2pFLDZCQUE2QjtBQUN0QixLQUFLLFVBQVUsaUNBQWlDLENBQUMsSUFBUztJQUMvRCxNQUFNLGtCQUFrQixHQUFHLElBQUEscURBQXFDLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFFdkUsTUFBTSxZQUFZLEdBQUcsTUFBTSx1QkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVsRCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsd0NBQWMsRUFBQyxZQUFZLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUV4RSxNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVyQyxNQUFNLFVBQVUsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUVqQyxNQUFNLElBQUksR0FBRyxNQUFNLHVCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sVUFBVSxHQUFHLE1BQU0saUJBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzFELE1BQU0sU0FBUyxHQUFHLElBQUksMkJBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVsRCxNQUFNLEdBQUcsR0FBRyxJQUFJ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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_prover.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_prover.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCircuitSize = exports.StandardExampleProver = void 0;\nconst wasm_1 = __webpack_require__(/*! ../../wasm */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/index.js\");\nclass StandardExampleProver {\n    constructor(prover) {\n        this.prover = prover;\n    }\n    // We do not pass in a constraint_system to this method\n    // so that users cannot call it twice and possibly be\n    // in a state where they have a different circuit definition to\n    // the proving key\n    //\n    //Ideally, we want this to be called in the constructor and not be manually called by users. Possibly create a .new method\n    async initCircuitDefinition(constraint_system) {\n        let worker = this.prover.getWorker();\n        const constraint_system_ptr = await worker.call('bbmalloc', constraint_system.length);\n        await worker.transferToHeap(constraint_system, constraint_system_ptr);\n        await worker.call('standard_example__init_circuit_def', constraint_system_ptr);\n    }\n    async computeKey() {\n        const worker = this.prover.getWorker();\n        await worker.call('standard_example__init_proving_key');\n    }\n    async createProof(witness_arr) {\n        const worker = this.prover.getWorker();\n        const witness_ptr = await worker.call('bbmalloc', witness_arr.length);\n        await worker.transferToHeap(witness_arr, witness_ptr);\n        const proverPtr = await worker.call('standard_example__new_prover', witness_ptr);\n        const proof = await this.prover.createProof(proverPtr);\n        await worker.call('standard_example__delete_prover', proverPtr);\n        return proof;\n    }\n    getProver() {\n        return this.prover;\n    }\n}\nexports.StandardExampleProver = StandardExampleProver;\nasync function getCircuitSize(wasm, constraint_system) {\n    let pool = new wasm_1.WorkerPool();\n    await pool.init(wasm.module, 8);\n    let worker = pool.workers[0];\n    const buf = Buffer.from(constraint_system);\n    const mem = await worker.call('bbmalloc', buf.length);\n    await worker.transferToHeap(buf, mem);\n    const circSize = await worker.call('standard_example__get_circuit_size', mem);\n    // FFT requires the circuit size to be a power of two.\n    // If it is not, then we round it up to the nearest power of two\n    if (powerOf2(circSize)) {\n        return circSize;\n    }\n    else {\n        return pow2ceil(circSize);\n    }\n}\nexports.getCircuitSize = getCircuitSize;\n// Returns true, if `v` is a power of two\nfunction powerOf2(v) {\n    return v && !(v & (v - 1));\n}\n// Rounds `v` up to the next power of two.\n// Note: If `v` is already a power of two, it will still round `v`\n// to the next power of two\nfunction pow2ceil(v) {\n    var p = 2;\n    while ((v >>= 1)) {\n        p <<= 1;\n    }\n    return p;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmRhcmRfZXhhbXBsZV9wcm92ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9nZW5lcmljX3Byb29mL3N0YW5kYXJkX2V4YW1wbGVfcHJvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUEwRDtBQUUxRCxNQUFhLHFCQUFxQjtJQUNoQyxZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdEMsdURBQXVEO0lBQ3ZELHFEQUFxRDtJQUNyRCwrREFBK0Q7SUFDL0Qsa0JBQWtCO0lBQ2xCLEVBQUU7SUFDRiwwSEFBMEg7SUFDbkgsS0FBSyxDQUFDLHFCQUFxQixDQUFDLGlCQUE2QjtRQUM5RCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3JDLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RixNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUV0RSxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVU7UUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUF1QjtRQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXZDLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkQsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBckNELHNEQXFDQztBQUVNLEtBQUssVUFBVSxjQUFjLENBQUMsSUFBc0IsRUFBRSxpQkFBNkI7SUFDeEYsSUFBSSxJQUFJLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7SUFDNUIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDM0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsTUFBTSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUV0QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUUsc0RBQXNEO0lBQ3RELGdFQUFnRTtJQUNoRSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN0QixPQUFPLFFBQVEsQ0FBQztLQUNqQjtTQUFNO1FBQ0wsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDM0I7QUFDSCxDQUFDO0FBakJELHdDQWlCQztBQUVELHlDQUF5QztBQUN6QyxTQUFTLFFBQVEsQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBQ0QsMENBQTBDO0FBQzFDLGtFQUFrRTtBQUNsRSwyQkFBMkI7QUFDM0IsU0FBUyxRQUFRLENBQUMsQ0FBQztJQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ2hCLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDVDtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2dlbmVyaWNfcHJvb2Yvc3RhbmRhcmRfZXhhbXBsZV9wcm92ZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDZCQUE2QjtBQUN0RCxlQUFlLG1CQUFPLENBQUMsNkVBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9nZW5lcmljX3Byb29mL3N0YW5kYXJkX2V4YW1wbGVfcHJvdmVyLmpzPzVjMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldENpcmN1aXRTaXplID0gZXhwb3J0cy5TdGFuZGFyZEV4YW1wbGVQcm92ZXIgPSB2b2lkIDA7XG5jb25zdCB3YXNtXzEgPSByZXF1aXJlKFwiLi4vLi4vd2FzbVwiKTtcbmNsYXNzIFN0YW5kYXJkRXhhbXBsZVByb3ZlciB7XG4gICAgY29uc3RydWN0b3IocHJvdmVyKSB7XG4gICAgICAgIHRoaXMucHJvdmVyID0gcHJvdmVyO1xuICAgIH1cbiAgICAvLyBXZSBkbyBub3QgcGFzcyBpbiBhIGNvbnN0cmFpbnRfc3lzdGVtIHRvIHRoaXMgbWV0aG9kXG4gICAgLy8gc28gdGhhdCB1c2VycyBjYW5ub3QgY2FsbCBpdCB0d2ljZSBhbmQgcG9zc2libHkgYmVcbiAgICAvLyBpbiBhIHN0YXRlIHdoZXJlIHRoZXkgaGF2ZSBhIGRpZmZlcmVudCBjaXJjdWl0IGRlZmluaXRpb24gdG9cbiAgICAvLyB0aGUgcHJvdmluZyBrZXlcbiAgICAvL1xuICAgIC8vSWRlYWxseSwgd2Ugd2FudCB0aGlzIHRvIGJlIGNhbGxlZCBpbiB0aGUgY29uc3RydWN0b3IgYW5kIG5vdCBiZSBtYW51YWxseSBjYWxsZWQgYnkgdXNlcnMuIFBvc3NpYmx5IGNyZWF0ZSBhIC5uZXcgbWV0aG9kXG4gICAgYXN5bmMgaW5pdENpcmN1aXREZWZpbml0aW9uKGNvbnN0cmFpbnRfc3lzdGVtKSB7XG4gICAgICAgIGxldCB3b3JrZXIgPSB0aGlzLnByb3Zlci5nZXRXb3JrZXIoKTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludF9zeXN0ZW1fcHRyID0gYXdhaXQgd29ya2VyLmNhbGwoJ2JibWFsbG9jJywgY29uc3RyYWludF9zeXN0ZW0ubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgd29ya2VyLnRyYW5zZmVyVG9IZWFwKGNvbnN0cmFpbnRfc3lzdGVtLCBjb25zdHJhaW50X3N5c3RlbV9wdHIpO1xuICAgICAgICBhd2FpdCB3b3JrZXIuY2FsbCgnc3RhbmRhcmRfZXhhbXBsZV9faW5pdF9jaXJjdWl0X2RlZicsIGNvbnN0cmFpbnRfc3lzdGVtX3B0cik7XG4gICAgfVxuICAgIGFzeW5jIGNvbXB1dGVLZXkoKSB7XG4gICAgICAgIGNvbnN0IHdvcmtlciA9IHRoaXMucHJvdmVyLmdldFdvcmtlcigpO1xuICAgICAgICBhd2FpdCB3b3JrZXIuY2FsbCgnc3RhbmRhcmRfZXhhbXBsZV9faW5pdF9wcm92aW5nX2tleScpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVQcm9vZih3aXRuZXNzX2Fycikge1xuICAgICAgICBjb25zdCB3b3JrZXIgPSB0aGlzLnByb3Zlci5nZXRXb3JrZXIoKTtcbiAgICAgICAgY29uc3Qgd2l0bmVzc19wdHIgPSBhd2FpdCB3b3JrZXIuY2FsbCgnYmJtYWxsb2MnLCB3aXRuZXNzX2Fyci5sZW5ndGgpO1xuICAgICAgICBhd2FpdCB3b3JrZXIudHJhbnNmZXJUb0hlYXAod2l0bmVzc19hcnIsIHdpdG5lc3NfcHRyKTtcbiAgICAgICAgY29uc3QgcHJvdmVyUHRyID0gYXdhaXQgd29ya2VyLmNhbGwoJ3N0YW5kYXJkX2V4YW1wbGVfX25ld19wcm92ZXInLCB3aXRuZXNzX3B0cik7XG4gICAgICAgIGNvbnN0IHByb29mID0gYXdhaXQgdGhpcy5wcm92ZXIuY3JlYXRlUHJvb2YocHJvdmVyUHRyKTtcbiAgICAgICAgYXdhaXQgd29ya2VyLmNhbGwoJ3N0YW5kYXJkX2V4YW1wbGVfX2RlbGV0ZV9wcm92ZXInLCBwcm92ZXJQdHIpO1xuICAgICAgICByZXR1cm4gcHJvb2Y7XG4gICAgfVxuICAgIGdldFByb3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmVyO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RhbmRhcmRFeGFtcGxlUHJvdmVyID0gU3RhbmRhcmRFeGFtcGxlUHJvdmVyO1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q2lyY3VpdFNpemUod2FzbSwgY29uc3RyYWludF9zeXN0ZW0pIHtcbiAgICBsZXQgcG9vbCA9IG5ldyB3YXNtXzEuV29ya2VyUG9vbCgpO1xuICAgIGF3YWl0IHBvb2wuaW5pdCh3YXNtLm1vZHVsZSwgOCk7XG4gICAgbGV0IHdvcmtlciA9IHBvb2wud29ya2Vyc1swXTtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbShjb25zdHJhaW50X3N5c3RlbSk7XG4gICAgY29uc3QgbWVtID0gYXdhaXQgd29ya2VyLmNhbGwoJ2JibWFsbG9jJywgYnVmLmxlbmd0aCk7XG4gICAgYXdhaXQgd29ya2VyLnRyYW5zZmVyVG9IZWFwKGJ1ZiwgbWVtKTtcbiAgICBjb25zdCBjaXJjU2l6ZSA9IGF3YWl0IHdvcmtlci5jYWxsKCdzdGFuZGFyZF9leGFtcGxlX19nZXRfY2lyY3VpdF9zaXplJywgbWVtKTtcbiAgICAvLyBGRlQgcmVxdWlyZXMgdGhlIGNpcmN1aXQgc2l6ZSB0byBiZSBhIHBvd2VyIG9mIHR3by5cbiAgICAvLyBJZiBpdCBpcyBub3QsIHRoZW4gd2Ugcm91bmQgaXQgdXAgdG8gdGhlIG5lYXJlc3QgcG93ZXIgb2YgdHdvXG4gICAgaWYgKHBvd2VyT2YyKGNpcmNTaXplKSkge1xuICAgICAgICByZXR1cm4gY2lyY1NpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcG93MmNlaWwoY2lyY1NpemUpO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0Q2lyY3VpdFNpemUgPSBnZXRDaXJjdWl0U2l6ZTtcbi8vIFJldHVybnMgdHJ1ZSwgaWYgYHZgIGlzIGEgcG93ZXIgb2YgdHdvXG5mdW5jdGlvbiBwb3dlck9mMih2KSB7XG4gICAgcmV0dXJuIHYgJiYgISh2ICYgKHYgLSAxKSk7XG59XG4vLyBSb3VuZHMgYHZgIHVwIHRvIHRoZSBuZXh0IHBvd2VyIG9mIHR3by5cbi8vIE5vdGU6IElmIGB2YCBpcyBhbHJlYWR5IGEgcG93ZXIgb2YgdHdvLCBpdCB3aWxsIHN0aWxsIHJvdW5kIGB2YFxuLy8gdG8gdGhlIG5leHQgcG93ZXIgb2YgdHdvXG5mdW5jdGlvbiBwb3cyY2VpbCh2KSB7XG4gICAgdmFyIHAgPSAyO1xuICAgIHdoaWxlICgodiA+Pj0gMSkpIHtcbiAgICAgICAgcCA8PD0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljM1JoYm1SaGNtUmZaWGhoYlhCc1pWOXdjbTkyWlhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkyeHBaVzUwWDNCeWIyOW1jeTluWlc1bGNtbGpYM0J5YjI5bUwzTjBZVzVrWVhKa1gyVjRZVzF3YkdWZmNISnZkbVZ5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVU5CTEhGRFFVRXdSRHRCUVVVeFJDeE5RVUZoTEhGQ1FVRnhRanRKUVVOb1F5eFpRVUZ2UWl4TlFVRmpPMUZCUVdRc1YwRkJUU3hIUVVGT0xFMUJRVTBzUTBGQlVUdEpRVUZITEVOQlFVTTdTVUZGZEVNc2RVUkJRWFZFTzBsQlEzWkVMSEZFUVVGeFJEdEpRVU55UkN3clJFRkJLMFE3U1VGREwwUXNhMEpCUVd0Q08wbEJRMnhDTEVWQlFVVTdTVUZEUml3d1NFRkJNRWc3U1VGRGJrZ3NTMEZCU3l4RFFVRkRMSEZDUVVGeFFpeERRVUZETEdsQ1FVRTJRanRSUVVNNVJDeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzFGQlEzSkRMRTFCUVUwc2NVSkJRWEZDTEVkQlFVY3NUVUZCVFN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU4wUml4TlFVRk5MRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0UlFVVjBSU3hOUVVGTkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNiME5CUVc5RExFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRKUVVOcVJpeERRVUZETzBsQlJVMHNTMEZCU3l4RFFVRkRMRlZCUVZVN1VVRkRja0lzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU4yUXl4TlFVRk5MRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBOQlFXOURMRU5CUVVNc1EwRkJRenRKUVVNeFJDeERRVUZETzBsQlJVMHNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGMVFqdFJRVU01UXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMUZCUlhaRExFMUJRVTBzVjBGQlZ5eEhRVUZITEUxQlFVMHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNSRkxFMUJRVTBzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRmRFUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETERoQ1FVRTRRaXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFGQlEycEdMRTFCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGRrUXNUVUZCVFN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHbERRVUZwUXl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRMmhGTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGxCUTJZc1EwRkJRenRKUVVWTkxGTkJRVk03VVVGRFpDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5HTzBGQmNrTkVMSE5FUVhGRFF6dEJRVVZOTEV0QlFVc3NWVUZCVlN4alFVRmpMRU5CUVVNc1NVRkJjMElzUlVGQlJTeHBRa0ZCTmtJN1NVRkRlRVlzU1VGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4cFFrRkJWU3hGUVVGRkxFTkJRVU03U1VGRE5VSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRhRU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVUzUWl4TlFVRk5MRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03U1VGRE0wTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGRFUXNUVUZCVFN4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVVjBReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2IwTkJRVzlETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRPVVVzYzBSQlFYTkVPMGxCUTNSRUxHZEZRVUZuUlR0SlFVTm9SU3hKUVVGSkxGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlR0UlFVTjBRaXhQUVVGUExGRkJRVkVzUTBGQlF6dExRVU5xUWp0VFFVRk5PMUZCUTB3c1QwRkJUeXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTMEZETTBJN1FVRkRTQ3hEUVVGRE8wRkJha0pFTEhkRFFXbENRenRCUVVWRUxIbERRVUY1UXp0QlFVTjZReXhUUVVGVExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEycENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0zUWl4RFFVRkRPMEZCUTBRc01FTkJRVEJETzBGQlF6RkRMR3RGUVVGclJUdEJRVU5zUlN3eVFrRkJNa0k3UVVGRE0wSXNVMEZCVXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVOcVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRWaXhQUVVGUExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMUZCUTJoQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEVkR0SlFVTkVMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRMWdzUTBGQlF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_prover.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_verifier.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_verifier.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StandardExampleVerifier = void 0;\nconst aztec_backend_1 = __webpack_require__(/*! @noir-lang/aztec_backend */ \"./node_modules/@noir-lang/barretenberg/node_modules/@noir-lang/aztec_backend/aztec_backend.js\");\nclass StandardExampleVerifier {\n    async computeKey(pippenger, g2Data) {\n        this.worker = pippenger.getWorker();\n        await this.worker.transferToHeap(g2Data, 0);\n        await this.worker.call('standard_example__init_verification_key', pippenger.getPointer(), 0);\n    }\n    async verifyProof(proof) {\n        const proofPtr = await this.worker.call('bbmalloc', proof.length);\n        await this.worker.transferToHeap(proof, proofPtr);\n        const verified = (await this.worker.call('standard_example__verify_proof', proofPtr, proof.length)) ? true : false;\n        await this.worker.call('bbfree', proofPtr);\n        return verified;\n    }\n    async computeSmartContract(pippenger, g2Data, constraint_system) {\n        const worker = pippenger.getWorker();\n        const g2Ptr = await worker.call('bbmalloc', g2Data.length);\n        await worker.transferToHeap(g2Data, g2Ptr);\n        const buf = Buffer.from(constraint_system);\n        const mem = await worker.call('bbmalloc', buf.length);\n        await worker.transferToHeap(buf, mem);\n        const vkSize = await worker.call('composer__smart_contract', pippenger.getPointer(), g2Ptr, mem, 0);\n        const vkPtr = Buffer.from(await worker.sliceMemory(0, 4)).readUInt32LE(0);\n        let vkMethod = Buffer.from(await worker.sliceMemory(vkPtr, vkPtr + vkSize)).toString();\n        // This is done because the C++ code mangles the first line\n        // We put dummy text (40 chars) on that line and slice it off on this side.\n        // This is a todo on the C++ side, as this problem also exists in the rust code\n        vkMethod = vkMethod.slice(40);\n        this.ethSmartContract = (0, aztec_backend_1.eth_contract_from_cs)(vkMethod);\n    }\n    SmartContract() {\n        return this.ethSmartContract;\n    }\n}\nexports.StandardExampleVerifier = StandardExampleVerifier;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmRhcmRfZXhhbXBsZV92ZXJpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL2dlbmVyaWNfcHJvb2Yvc3RhbmRhcmRfZXhhbXBsZV92ZXJpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw0REFBZ0U7QUFFaEUsTUFBYSx1QkFBdUI7SUFJM0IsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUEwQixFQUFFLE1BQWtCO1FBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUNBQXlDLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWE7UUFDcEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ25ILE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsU0FBMEIsRUFBRSxNQUFrQixFQUFFLGlCQUE4QjtRQUV2RyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFckMsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsTUFBTSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUzQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsTUFBTSxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkcsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLElBQUksUUFBUSxHQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4RiwyREFBMkQ7UUFDM0QsMkVBQTJFO1FBQzNFLCtFQUErRTtRQUMvRSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBQSxvQ0FBb0IsRUFBQyxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ00sYUFBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQTtJQUM5QixDQUFDO0NBQ0Y7QUF6Q0QsMERBeUNDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2dlbmVyaWNfcHJvb2Yvc3RhbmRhcmRfZXhhbXBsZV92ZXJpZmllci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLHdCQUF3QixtQkFBTyxDQUFDLCtIQUEwQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUIsdUJBQXVCLE1BQU07QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NsaWVudF9wcm9vZnMvZ2VuZXJpY19wcm9vZi9zdGFuZGFyZF9leGFtcGxlX3ZlcmlmaWVyLmpzPzcxOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YW5kYXJkRXhhbXBsZVZlcmlmaWVyID0gdm9pZCAwO1xuY29uc3QgYXp0ZWNfYmFja2VuZF8xID0gcmVxdWlyZShcIkBub2lyLWxhbmcvYXp0ZWNfYmFja2VuZFwiKTtcbmNsYXNzIFN0YW5kYXJkRXhhbXBsZVZlcmlmaWVyIHtcbiAgICBhc3luYyBjb21wdXRlS2V5KHBpcHBlbmdlciwgZzJEYXRhKSB7XG4gICAgICAgIHRoaXMud29ya2VyID0gcGlwcGVuZ2VyLmdldFdvcmtlcigpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci50cmFuc2ZlclRvSGVhcChnMkRhdGEsIDApO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdzdGFuZGFyZF9leGFtcGxlX19pbml0X3ZlcmlmaWNhdGlvbl9rZXknLCBwaXBwZW5nZXIuZ2V0UG9pbnRlcigpLCAwKTtcbiAgICB9XG4gICAgYXN5bmMgdmVyaWZ5UHJvb2YocHJvb2YpIHtcbiAgICAgICAgY29uc3QgcHJvb2ZQdHIgPSBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYm1hbGxvYycsIHByb29mLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLnRyYW5zZmVyVG9IZWFwKHByb29mLCBwcm9vZlB0cik7XG4gICAgICAgIGNvbnN0IHZlcmlmaWVkID0gKGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ3N0YW5kYXJkX2V4YW1wbGVfX3ZlcmlmeV9wcm9vZicsIHByb29mUHRyLCBwcm9vZi5sZW5ndGgpKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJmcmVlJywgcHJvb2ZQdHIpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZWQ7XG4gICAgfVxuICAgIGFzeW5jIGNvbXB1dGVTbWFydENvbnRyYWN0KHBpcHBlbmdlciwgZzJEYXRhLCBjb25zdHJhaW50X3N5c3RlbSkge1xuICAgICAgICBjb25zdCB3b3JrZXIgPSBwaXBwZW5nZXIuZ2V0V29ya2VyKCk7XG4gICAgICAgIGNvbnN0IGcyUHRyID0gYXdhaXQgd29ya2VyLmNhbGwoJ2JibWFsbG9jJywgZzJEYXRhLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHdvcmtlci50cmFuc2ZlclRvSGVhcChnMkRhdGEsIGcyUHRyKTtcbiAgICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20oY29uc3RyYWludF9zeXN0ZW0pO1xuICAgICAgICBjb25zdCBtZW0gPSBhd2FpdCB3b3JrZXIuY2FsbCgnYmJtYWxsb2MnLCBidWYubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgd29ya2VyLnRyYW5zZmVyVG9IZWFwKGJ1ZiwgbWVtKTtcbiAgICAgICAgY29uc3QgdmtTaXplID0gYXdhaXQgd29ya2VyLmNhbGwoJ2NvbXBvc2VyX19zbWFydF9jb250cmFjdCcsIHBpcHBlbmdlci5nZXRQb2ludGVyKCksIGcyUHRyLCBtZW0sIDApO1xuICAgICAgICBjb25zdCB2a1B0ciA9IEJ1ZmZlci5mcm9tKGF3YWl0IHdvcmtlci5zbGljZU1lbW9yeSgwLCA0KSkucmVhZFVJbnQzMkxFKDApO1xuICAgICAgICBsZXQgdmtNZXRob2QgPSBCdWZmZXIuZnJvbShhd2FpdCB3b3JrZXIuc2xpY2VNZW1vcnkodmtQdHIsIHZrUHRyICsgdmtTaXplKSkudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gVGhpcyBpcyBkb25lIGJlY2F1c2UgdGhlIEMrKyBjb2RlIG1hbmdsZXMgdGhlIGZpcnN0IGxpbmVcbiAgICAgICAgLy8gV2UgcHV0IGR1bW15IHRleHQgKDQwIGNoYXJzKSBvbiB0aGF0IGxpbmUgYW5kIHNsaWNlIGl0IG9mZiBvbiB0aGlzIHNpZGUuXG4gICAgICAgIC8vIFRoaXMgaXMgYSB0b2RvIG9uIHRoZSBDKysgc2lkZSwgYXMgdGhpcyBwcm9ibGVtIGFsc28gZXhpc3RzIGluIHRoZSBydXN0IGNvZGVcbiAgICAgICAgdmtNZXRob2QgPSB2a01ldGhvZC5zbGljZSg0MCk7XG4gICAgICAgIHRoaXMuZXRoU21hcnRDb250cmFjdCA9ICgwLCBhenRlY19iYWNrZW5kXzEuZXRoX2NvbnRyYWN0X2Zyb21fY3MpKHZrTWV0aG9kKTtcbiAgICB9XG4gICAgU21hcnRDb250cmFjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXRoU21hcnRDb250cmFjdDtcbiAgICB9XG59XG5leHBvcnRzLlN0YW5kYXJkRXhhbXBsZVZlcmlmaWVyID0gU3RhbmRhcmRFeGFtcGxlVmVyaWZpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljM1JoYm1SaGNtUmZaWGhoYlhCc1pWOTJaWEpwWm1sbGNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OWpiR2xsYm5SZmNISnZiMlp6TDJkbGJtVnlhV05mY0hKdmIyWXZjM1JoYm1SaGNtUmZaWGhoYlhCc1pWOTJaWEpwWm1sbGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGRlFTdzBSRUZCWjBVN1FVRkZhRVVzVFVGQllTeDFRa0ZCZFVJN1NVRkpNMElzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRXdRaXhGUVVGRkxFMUJRV3RDTzFGQlEzQkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMUZCUTNCRExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6VkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNlVU5CUVhsRExFVkJRVVVzVTBGQlV5eERRVUZETEZWQlFWVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJReTlHTEVOQlFVTTdTVUZGVFN4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRV0U3VVVGRGNFTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEyeEZMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRMnhFTEUxQlFVMHNVVUZCVVN4SFFVRkhMRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRMjVJTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUXpORExFOUJRVThzVVVGQlVTeERRVUZETzBsQlEyeENMRU5CUVVNN1NVRkZSQ3hMUVVGTExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1UwRkJNRUlzUlVGQlJTeE5RVUZyUWl4RlFVRkZMR2xDUVVFNFFqdFJRVVYyUnl4TlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdVVUZGY2tNc1RVRkJUU3hMUVVGTExFZEJRVWNzVFVGQlRTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZETTBRc1RVRkJUU3hOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVVelF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkRNME1zVFVGQlRTeEhRVUZITEVkQlFVY3NUVUZCVFN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRkRVFzVFVGQlRTeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVVYwUXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFVkJRVVVzVTBGQlV5eERRVUZETEZWQlFWVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYmtjc1RVRkJUU3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6RkZMRWxCUVVrc1VVRkJVU3hIUVVGSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFJRVU40Uml3eVJFRkJNa1E3VVVGRE0wUXNNa1ZCUVRKRk8xRkJRek5GTEN0RlFVRXJSVHRSUVVNdlJTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU01UWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTVUZCUVN4dlEwRkJiMElzUlVGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTjZSQ3hEUVVGRE8wbEJRMDBzWVVGQllUdFJRVU5zUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUVR0SlFVTTVRaXhEUVVGRE8wTkJRMFk3UVVGNlEwUXNNRVJCZVVOREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/standard_example_verifier.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_proof */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/account_proof/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./join_split_proof */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./generic_proof */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/generic_proof/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/index.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpZW50X3Byb29mcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrREFBZ0M7QUFDaEMsa0VBQW1DO0FBQ25DLCtEQUFnQztBQUNoQyw0REFBNkI7QUFDN0Isd0RBQXlCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLHlHQUFpQjtBQUNuRCwwQkFBMEIsbUJBQU8sQ0FBQywrR0FBb0I7QUFDdEQsMEJBQTBCLG1CQUFPLENBQUMseUdBQWlCO0FBQ25ELDBCQUEwQixtQkFBTyxDQUFDLG1HQUFjO0FBQ2hELDBCQUEwQixtQkFBTyxDQUFDLDJGQUFVO0FBQzVDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2luZGV4LmpzPzE5YjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hY2NvdW50X3Byb29mXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vam9pbl9zcGxpdF9wcm9vZlwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2dlbmVyaWNfcHJvb2ZcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9wcm9vZl9kYXRhXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vcHJvdmVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZMnhwWlc1MFgzQnliMjltY3k5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3dyUkVGQlowTTdRVUZEYUVNc2EwVkJRVzFETzBGQlEyNURMQ3RFUVVGblF6dEJRVU5vUXl3MFJFRkJOa0k3UVVGRE4wSXNkMFJCUVhsQ0luMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/index.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./join_split_prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_prover.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./join_split_verifier */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_verifier.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./join_split_tx */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_tx.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9qb2luX3NwbGl0X3Byb29mL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1FQUFvQztBQUNwQyxxRUFBc0M7QUFDdEMsK0RBQWdDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2pvaW5fc3BsaXRfcHJvb2YvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsNEhBQXFCO0FBQ3ZELDBCQUEwQixtQkFBTyxDQUFDLGdJQUF1QjtBQUN6RCwwQkFBMEIsbUJBQU8sQ0FBQyxvSEFBaUI7QUFDbkQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NsaWVudF9wcm9vZnMvam9pbl9zcGxpdF9wcm9vZi9pbmRleC5qcz8wMDdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vam9pbl9zcGxpdF9wcm92ZXJcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9qb2luX3NwbGl0X3ZlcmlmaWVyXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vam9pbl9zcGxpdF90eFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkyeHBaVzUwWDNCeWIyOW1jeTlxYjJsdVgzTndiR2wwWDNCeWIyOW1MMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxHMUZRVUZ2UXp0QlFVTndReXh4UlVGQmMwTTdRVUZEZEVNc0swUkJRV2RESW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_prover.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_prover.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JoinSplitProver = void 0;\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist/index.js\");\nclass JoinSplitProver {\n    constructor(prover, mock = false) {\n        this.prover = prover;\n        this.mock = mock;\n    }\n    static getCircuitSize(proverless = false) {\n        return proverless ? 512 : 64 * 1024;\n    }\n    async computeKey() {\n        const worker = this.prover.getWorker();\n        await worker.call('join_split__init_proving_key', this.mock);\n    }\n    async loadKey(keyBuf) {\n        const worker = this.prover.getWorker();\n        const keyPtr = await worker.call('bbmalloc', keyBuf.length);\n        await worker.transferToHeap((0, threads_1.Transfer)(keyBuf, [keyBuf.buffer]), keyPtr);\n        await worker.call('join_split__init_proving_key_from_buffer', keyPtr);\n        await worker.call('bbfree', keyPtr);\n    }\n    async getKey() {\n        const worker = this.prover.getWorker();\n        await worker.acquire();\n        try {\n            const keySize = await worker.call('join_split__get_new_proving_key_data', 0);\n            const keyPtr = Buffer.from(await worker.sliceMemory(0, 4)).readUInt32LE(0);\n            const buf = Buffer.from(await worker.sliceMemory(keyPtr, keyPtr + keySize));\n            await worker.call('bbfree', keyPtr);\n            return buf;\n        }\n        finally {\n            await worker.release();\n        }\n    }\n    async computeSigningData(tx) {\n        const worker = this.prover.getWorker();\n        await worker.transferToHeap(tx.toBuffer(), 0);\n        await worker.call('join_split__compute_signing_data', 0, 0);\n        return Buffer.from(await worker.sliceMemory(0, 32));\n    }\n    async createProof(tx, signature) {\n        const buf = Buffer.concat([tx.toBuffer(), signature.toBuffer()]);\n        const worker = this.prover.getWorker();\n        const mem = await worker.call('bbmalloc', buf.length);\n        await worker.transferToHeap(buf, mem);\n        const proverPtr = await worker.call('join_split__new_prover', mem, this.mock);\n        await worker.call('bbfree', mem);\n        const proof = await this.prover.createProof(proverPtr);\n        await worker.call('join_split__delete_prover', proverPtr);\n        return proof;\n    }\n    getProver() {\n        return this.prover;\n    }\n}\nexports.JoinSplitProver = JoinSplitProver;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF9wcm92ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9qb2luX3NwbGl0X3Byb29mL2pvaW5fc3BsaXRfcHJvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFtQztBQUtuQyxNQUFhLGVBQWU7SUFDMUIsWUFBb0IsTUFBc0IsRUFBa0IsT0FBTyxLQUFLO1FBQXBELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQWtCLFNBQUksR0FBSixJQUFJLENBQVE7SUFBRyxDQUFDO0lBRTVFLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLEtBQUs7UUFDdEMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVU7UUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWM7UUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBQSxrQkFBUSxFQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlFLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxNQUFNLENBQUMsQ0FBQztR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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_prover.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_tx.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_tx.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JoinSplitTx = void 0;\nconst account_id_1 = __webpack_require__(/*! ../../account_id */ \"./node_modules/@noir-lang/barretenberg/dest/account_id/index.js\");\nconst address_1 = __webpack_require__(/*! ../../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst bigint_buffer_1 = __webpack_require__(/*! ../../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst merkle_tree_1 = __webpack_require__(/*! ../../merkle_tree */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/index.js\");\nconst note_algorithms_1 = __webpack_require__(/*! ../../note_algorithms */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nclass JoinSplitTx {\n    constructor(proofId, publicValue, publicOwner, publicAssetId, numInputNotes, inputNoteIndices, merkleRoot, inputNotePaths, inputNotes, outputNotes, claimNote, accountPrivateKey, aliasHash, accountRequired, accountIndex, accountPath, spendingPublicKey, backwardLink, allowChain) {\n        this.proofId = proofId;\n        this.publicValue = publicValue;\n        this.publicOwner = publicOwner;\n        this.publicAssetId = publicAssetId;\n        this.numInputNotes = numInputNotes;\n        this.inputNoteIndices = inputNoteIndices;\n        this.merkleRoot = merkleRoot;\n        this.inputNotePaths = inputNotePaths;\n        this.inputNotes = inputNotes;\n        this.outputNotes = outputNotes;\n        this.claimNote = claimNote;\n        this.accountPrivateKey = accountPrivateKey;\n        this.aliasHash = aliasHash;\n        this.accountRequired = accountRequired;\n        this.accountIndex = accountIndex;\n        this.accountPath = accountPath;\n        this.spendingPublicKey = spendingPublicKey;\n        this.backwardLink = backwardLink;\n        this.allowChain = allowChain;\n    }\n    toBuffer() {\n        return Buffer.concat([\n            (0, serialize_1.numToUInt32BE)(this.proofId),\n            (0, bigint_buffer_1.toBufferBE)(this.publicValue, 32),\n            this.publicOwner.toBuffer32(),\n            (0, serialize_1.numToUInt32BE)(this.publicAssetId),\n            (0, serialize_1.numToUInt32BE)(this.numInputNotes),\n            (0, serialize_1.numToUInt32BE)(this.inputNoteIndices[0]),\n            (0, serialize_1.numToUInt32BE)(this.inputNoteIndices[1]),\n            this.merkleRoot,\n            this.inputNotePaths[0].toBuffer(),\n            this.inputNotePaths[1].toBuffer(),\n            this.inputNotes[0].toBuffer(),\n            this.inputNotes[1].toBuffer(),\n            this.outputNotes[0].toBuffer(),\n            this.outputNotes[1].toBuffer(),\n            this.claimNote.toBuffer(),\n            this.accountPrivateKey,\n            this.aliasHash.toBuffer32(),\n            Buffer.from([+this.accountRequired]),\n            (0, serialize_1.numToUInt32BE)(this.accountIndex),\n            this.accountPath.toBuffer(),\n            this.spendingPublicKey.toBuffer(),\n            this.backwardLink,\n            (0, serialize_1.numToUInt32BE)(this.allowChain),\n        ]);\n    }\n    static fromBuffer(buf) {\n        let dataStart = 0;\n        const proofId = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const publicValue = (0, bigint_buffer_1.toBigIntBE)(buf.slice(dataStart, dataStart + 32));\n        dataStart += 32;\n        const publicOwner = new address_1.EthAddress(buf.slice(dataStart, dataStart + 32));\n        dataStart += 32;\n        const publicAssetId = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const numInputNotes = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const inputNoteIndices = [buf.readUInt32BE(dataStart), buf.readUInt32BE(dataStart + 4)];\n        dataStart += 8;\n        const merkleRoot = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const inputNotePath0 = merkle_tree_1.HashPath.deserialize(buf, dataStart);\n        dataStart += inputNotePath0.adv;\n        const inputNotePath1 = merkle_tree_1.HashPath.deserialize(buf, dataStart);\n        dataStart += inputNotePath1.adv;\n        const inputNote0 = note_algorithms_1.TreeNote.fromBuffer(buf.slice(dataStart));\n        dataStart += note_algorithms_1.TreeNote.SIZE;\n        const inputNote1 = note_algorithms_1.TreeNote.fromBuffer(buf.slice(dataStart));\n        dataStart += note_algorithms_1.TreeNote.SIZE;\n        const outputNote0 = note_algorithms_1.TreeNote.fromBuffer(buf.slice(dataStart));\n        dataStart += note_algorithms_1.TreeNote.SIZE;\n        const outputNote1 = note_algorithms_1.TreeNote.fromBuffer(buf.slice(dataStart));\n        dataStart += note_algorithms_1.TreeNote.SIZE;\n        const claimNote = note_algorithms_1.ClaimNoteTxData.fromBuffer(buf.slice(dataStart));\n        dataStart += note_algorithms_1.ClaimNoteTxData.SIZE;\n        const accountPrivateKey = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const aliasHash = new account_id_1.AliasHash(buf.slice(dataStart + 4, dataStart + 32));\n        dataStart += 32;\n        const accountRequired = !!buf[dataStart];\n        dataStart += 1;\n        const accountIndex = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const accountPath = merkle_tree_1.HashPath.deserialize(buf, dataStart);\n        dataStart += accountPath.adv;\n        const spendingPublicKey = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const backwardLink = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const allowChain = buf.readUInt32BE(dataStart);\n        return new JoinSplitTx(proofId, publicValue, publicOwner, publicAssetId, numInputNotes, inputNoteIndices, merkleRoot, [inputNotePath0.elem, inputNotePath1.elem], [inputNote0, inputNote1], [outputNote0, outputNote1], claimNote, accountPrivateKey, aliasHash, accountRequired, accountIndex, accountPath.elem, spendingPublicKey, backwardLink, allowChain);\n    }\n}\nexports.JoinSplitTx = JoinSplitTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF90eC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL2pvaW5fc3BsaXRfcHJvb2Yvam9pbl9zcGxpdF90eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBNkM7QUFDN0MsMkNBQTREO0FBQzVELHVEQUE2RDtBQUM3RCxtREFBNkM7QUFDN0MsMkRBQWtFO0FBQ2xFLCtDQUFnRDtBQUVoRCxNQUFhLFdBQVc7SUFDdEIsWUFDUyxPQUFlLEVBQ2YsV0FBbUIsRUFDbkIsV0FBdUIsRUFDdkIsYUFBcUIsRUFDckIsYUFBcUIsRUFDckIsZ0JBQTBCLEVBQzFCLFVBQWtCLEVBQ2xCLGNBQTBCLEVBQzFCLFVBQXNCLEVBQ3RCLFdBQXVCLEVBQ3ZCLFNBQTBCLEVBQzFCLGlCQUF5QixFQUN6QixTQUFvQixFQUNwQixlQUF3QixFQUN4QixZQUFvQixFQUNwQixXQUFxQixFQUNyQixpQkFBa0MsRUFDbEMsWUFBb0IsRUFDcEIsVUFBa0I7UUFsQmxCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUNuQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVU7UUFDMUIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixtQkFBYyxHQUFkLGNBQWMsQ0FBWTtRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBQzFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtRQUN6QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLG9CQUFlLEdBQWYsZUFBZSxDQUFTO1FBQ3hCLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLGdC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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_tx.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_verifier.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_verifier.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JoinSplitVerifier = void 0;\nclass JoinSplitVerifier {\n    async computeKey(pippenger, g2Data) {\n        this.worker = pippenger.getWorker();\n        await this.worker.transferToHeap(g2Data, 0);\n        await this.worker.call('join_split__init_verification_key', pippenger.getPointer(), 0);\n    }\n    async getKey() {\n        const keySize = await this.worker.call('join_split__get_new_verification_key_data', 0);\n        const keyPtr = Buffer.from(await this.worker.sliceMemory(0, 4)).readUInt32LE(0);\n        const buf = Buffer.from(await this.worker.sliceMemory(keyPtr, keyPtr + keySize));\n        await this.worker.call('bbfree', keyPtr);\n        return buf;\n    }\n    async loadKey(worker, keyBuf, g2Data) {\n        this.worker = worker;\n        const keyPtr = await this.worker.call('bbmalloc', keyBuf.length);\n        await this.worker.transferToHeap(g2Data, 0);\n        await this.worker.transferToHeap(keyBuf, keyPtr);\n        await this.worker.call('join_split__init_verification_key_from_buffer', keyPtr, 0);\n        await this.worker.call('bbfree', keyPtr);\n    }\n    async verifyProof(proof) {\n        const proofPtr = await this.worker.call('bbmalloc', proof.length);\n        await this.worker.transferToHeap(proof, proofPtr);\n        const verified = (await this.worker.call('join_split__verify_proof', proofPtr, proof.length)) ? true : false;\n        await this.worker.call('bbfree', proofPtr);\n        return verified;\n    }\n}\nexports.JoinSplitVerifier = JoinSplitVerifier;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF92ZXJpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL2pvaW5fc3BsaXRfcHJvb2Yvam9pbl9zcGxpdF92ZXJpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxNQUFhLGlCQUFpQjtJQUdyQixLQUFLLENBQUMsVUFBVSxDQUFDLFNBQTBCLEVBQUUsTUFBa0I7UUFDcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkYsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBMEIsRUFBRSxNQUFjLEVBQUUsTUFBa0I7UUFDakYsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0NBQStDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQWE7UUFDcEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzdHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQWpDRCw4Q0FpQ0MifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL2pvaW5fc3BsaXRfcHJvb2Yvam9pbl9zcGxpdF92ZXJpZmllci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsTUFBTTtBQUM3QixvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9qb2luX3NwbGl0X3Byb29mL2pvaW5fc3BsaXRfdmVyaWZpZXIuanM/YjViMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSm9pblNwbGl0VmVyaWZpZXIgPSB2b2lkIDA7XG5jbGFzcyBKb2luU3BsaXRWZXJpZmllciB7XG4gICAgYXN5bmMgY29tcHV0ZUtleShwaXBwZW5nZXIsIGcyRGF0YSkge1xuICAgICAgICB0aGlzLndvcmtlciA9IHBpcHBlbmdlci5nZXRXb3JrZXIoKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIudHJhbnNmZXJUb0hlYXAoZzJEYXRhLCAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnam9pbl9zcGxpdF9faW5pdF92ZXJpZmljYXRpb25fa2V5JywgcGlwcGVuZ2VyLmdldFBvaW50ZXIoKSwgMCk7XG4gICAgfVxuICAgIGFzeW5jIGdldEtleSgpIHtcbiAgICAgICAgY29uc3Qga2V5U2l6ZSA9IGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ2pvaW5fc3BsaXRfX2dldF9uZXdfdmVyaWZpY2F0aW9uX2tleV9kYXRhJywgMCk7XG4gICAgICAgIGNvbnN0IGtleVB0ciA9IEJ1ZmZlci5mcm9tKGF3YWl0IHRoaXMud29ya2VyLnNsaWNlTWVtb3J5KDAsIDQpKS5yZWFkVUludDMyTEUoMCk7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5mcm9tKGF3YWl0IHRoaXMud29ya2VyLnNsaWNlTWVtb3J5KGtleVB0ciwga2V5UHRyICsga2V5U2l6ZSkpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYmZyZWUnLCBrZXlQdHIpO1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICBhc3luYyBsb2FkS2V5KHdvcmtlciwga2V5QnVmLCBnMkRhdGEpIHtcbiAgICAgICAgdGhpcy53b3JrZXIgPSB3b3JrZXI7XG4gICAgICAgIGNvbnN0IGtleVB0ciA9IGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ2JibWFsbG9jJywga2V5QnVmLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLnRyYW5zZmVyVG9IZWFwKGcyRGF0YSwgMCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLnRyYW5zZmVyVG9IZWFwKGtleUJ1Ziwga2V5UHRyKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnam9pbl9zcGxpdF9faW5pdF92ZXJpZmljYXRpb25fa2V5X2Zyb21fYnVmZmVyJywga2V5UHRyLCAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJmcmVlJywga2V5UHRyKTtcbiAgICB9XG4gICAgYXN5bmMgdmVyaWZ5UHJvb2YocHJvb2YpIHtcbiAgICAgICAgY29uc3QgcHJvb2ZQdHIgPSBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYm1hbGxvYycsIHByb29mLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLnRyYW5zZmVyVG9IZWFwKHByb29mLCBwcm9vZlB0cik7XG4gICAgICAgIGNvbnN0IHZlcmlmaWVkID0gKGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ2pvaW5fc3BsaXRfX3ZlcmlmeV9wcm9vZicsIHByb29mUHRyLCBwcm9vZi5sZW5ndGgpKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJmcmVlJywgcHJvb2ZQdHIpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Kb2luU3BsaXRWZXJpZmllciA9IEpvaW5TcGxpdFZlcmlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYW05cGJsOXpjR3hwZEY5MlpYSnBabWxsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5amJHbGxiblJmY0hKdmIyWnpMMnB2YVc1ZmMzQnNhWFJmY0hKdmIyWXZhbTlwYmw5emNHeHBkRjkyWlhKcFptbGxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkhRU3hOUVVGaExHbENRVUZwUWp0SlFVZHlRaXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFUQkNMRVZCUVVVc1RVRkJhMEk3VVVGRGNFVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdVVUZEY0VNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCYlVNc1JVRkJSU3hUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla1lzUTBGQlF6dEpRVVZOTEV0QlFVc3NRMEZCUXl4TlFVRk5PMUZCUTJwQ0xFMUJRVTBzVDBGQlR5eEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zTWtOQlFUSkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRrWXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5vUml4TlFVRk5MRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnBHTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNwRExFOUJRVThzUjBGQlJ5eERRVUZETzBsQlEySXNRMEZCUXp0SlFVVk5MRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQk1FSXNSVUZCUlN4TlFVRmpMRVZCUVVVc1RVRkJhMEk3VVVGRGFrWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGRGNrSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEycEZMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRelZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTJwRUxFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc0swTkJRU3RETEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMjVHTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlRTeExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVdFN1VVRkRjRU1zVFVGQlRTeFJRVUZSTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMnhGTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFMUJRVTBzVVVGQlVTeEhRVUZITEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUXpkSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFGQlF6TkRMRTlCUVU4c1VVRkJVU3hEUVVGRE8wbEJRMnhDTEVOQlFVTTdRMEZEUmp0QlFXcERSQ3c0UTBGcFEwTWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/join_split_proof/join_split_verifier.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/account_proof_data.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/account_proof_data.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountProofData = void 0;\nconst proof_data_1 = __webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\");\nconst proof_id_1 = __webpack_require__(/*! ./proof_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\");\nclass AccountProofData {\n    constructor(proofData) {\n        this.proofData = proofData;\n        if (proofData.proofId !== proof_id_1.ProofId.ACCOUNT) {\n            throw new Error('Not an account proof.');\n        }\n    }\n    static fromBuffer(rawProofData) {\n        return new AccountProofData(new proof_data_1.ProofData(rawProofData));\n    }\n}\nexports.AccountProofData = AccountProofData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9wcm9vZl9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvb2ZfZGF0YS9hY2NvdW50X3Byb29mX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQXlDO0FBQ3pDLHlDQUFxQztBQUVyQyxNQUFhLGdCQUFnQjtJQUMzQixZQUE0QixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQzlDLElBQUksU0FBUyxDQUFDLE9BQU8sS0FBSyxrQkFBTyxDQUFDLE9BQU8sRUFBRTtZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFvQjtRQUNwQyxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxzQkFBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBVkQsNENBVUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvYWNjb3VudF9wcm9vZl9kYXRhLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixxQkFBcUIsbUJBQU8sQ0FBQyx3R0FBYztBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvYWNjb3VudF9wcm9vZl9kYXRhLmpzPzU3MGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFjY291bnRQcm9vZkRhdGEgPSB2b2lkIDA7XG5jb25zdCBwcm9vZl9kYXRhXzEgPSByZXF1aXJlKFwiLi9wcm9vZl9kYXRhXCIpO1xuY29uc3QgcHJvb2ZfaWRfMSA9IHJlcXVpcmUoXCIuL3Byb29mX2lkXCIpO1xuY2xhc3MgQWNjb3VudFByb29mRGF0YSB7XG4gICAgY29uc3RydWN0b3IocHJvb2ZEYXRhKSB7XG4gICAgICAgIHRoaXMucHJvb2ZEYXRhID0gcHJvb2ZEYXRhO1xuICAgICAgICBpZiAocHJvb2ZEYXRhLnByb29mSWQgIT09IHByb29mX2lkXzEuUHJvb2ZJZC5BQ0NPVU5UKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhbiBhY2NvdW50IHByb29mLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQnVmZmVyKHJhd1Byb29mRGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRQcm9vZkRhdGEobmV3IHByb29mX2RhdGFfMS5Qcm9vZkRhdGEocmF3UHJvb2ZEYXRhKSk7XG4gICAgfVxufVxuZXhwb3J0cy5BY2NvdW50UHJvb2ZEYXRhID0gQWNjb3VudFByb29mRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXTmpiM1Z1ZEY5d2NtOXZabDlrWVhSaExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyTnNhV1Z1ZEY5d2NtOXZabk12Y0hKdmIyWmZaR0YwWVM5aFkyTnZkVzUwWDNCeWIyOW1YMlJoZEdFdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc05rTkJRWGxETzBGQlEzcERMSGxEUVVGeFF6dEJRVVZ5UXl4TlFVRmhMR2RDUVVGblFqdEpRVU16UWl4WlFVRTBRaXhUUVVGdlFqdFJRVUZ3UWl4alFVRlRMRWRCUVZRc1UwRkJVeXhEUVVGWE8xRkJRemxETEVsQlFVa3NVMEZCVXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhyUWtGQlR5eERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTjZReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVU03VTBGRE1VTTdTVUZEU0N4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFpRVUZ2UWp0UlFVTndReXhQUVVGUExFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3h6UWtGQlV5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRNMFFzUTBGQlF6dERRVU5HTzBGQlZrUXNORU5CVlVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/account_proof_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/create_tx_id.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/create_tx_id.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createTxId = void 0;\nconst sha3_1 = __webpack_require__(/*! sha3 */ \"./node_modules/sha3/index.js\");\nconst proof_id_1 = __webpack_require__(/*! ./proof_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\");\nconst hash = new sha3_1.Keccak(256);\nfunction createTxId(rawProofData) {\n    const proofId = rawProofData.readUInt32BE(28);\n    const txIdData = proofId === proof_id_1.ProofId.DEFI_DEPOSIT\n        ? Buffer.concat([\n            rawProofData.slice(0, 32),\n            Buffer.alloc(32),\n            rawProofData.slice(2 * 32),\n        ])\n        : rawProofData;\n    hash.reset();\n    return hash.update(txIdData).digest();\n}\nexports.createTxId = createTxId;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX3R4X2lkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvb2ZfZGF0YS9jcmVhdGVfdHhfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQThCO0FBQzlCLHlDQUFxQztBQUVyQyxNQUFNLElBQUksR0FBRyxJQUFJLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUU3QixTQUFnQixVQUFVLENBQUMsWUFBb0I7SUFDN0MsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QyxNQUFNLFFBQVEsR0FDWixPQUFPLEtBQUssa0JBQU8sQ0FBQyxZQUFZO1FBQzlCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ1osWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2hCLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMzQixDQUFDO1FBQ0osQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNuQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDeEMsQ0FBQztBQVpELGdDQVlDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvY3JlYXRlX3R4X2lkLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsZUFBZSxtQkFBTyxDQUFDLDBDQUFNO0FBQzdCLG1CQUFtQixtQkFBTyxDQUFDLG9HQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2NyZWF0ZV90eF9pZC5qcz9kYzk1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVUeElkID0gdm9pZCAwO1xuY29uc3Qgc2hhM18xID0gcmVxdWlyZShcInNoYTNcIik7XG5jb25zdCBwcm9vZl9pZF8xID0gcmVxdWlyZShcIi4vcHJvb2ZfaWRcIik7XG5jb25zdCBoYXNoID0gbmV3IHNoYTNfMS5LZWNjYWsoMjU2KTtcbmZ1bmN0aW9uIGNyZWF0ZVR4SWQocmF3UHJvb2ZEYXRhKSB7XG4gICAgY29uc3QgcHJvb2ZJZCA9IHJhd1Byb29mRGF0YS5yZWFkVUludDMyQkUoMjgpO1xuICAgIGNvbnN0IHR4SWREYXRhID0gcHJvb2ZJZCA9PT0gcHJvb2ZfaWRfMS5Qcm9vZklkLkRFRklfREVQT1NJVFxuICAgICAgICA/IEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgcmF3UHJvb2ZEYXRhLnNsaWNlKDAsIDMyKSxcbiAgICAgICAgICAgIEJ1ZmZlci5hbGxvYygzMiksXG4gICAgICAgICAgICByYXdQcm9vZkRhdGEuc2xpY2UoMiAqIDMyKSxcbiAgICAgICAgXSlcbiAgICAgICAgOiByYXdQcm9vZkRhdGE7XG4gICAgaGFzaC5yZXNldCgpO1xuICAgIHJldHVybiBoYXNoLnVwZGF0ZSh0eElkRGF0YSkuZGlnZXN0KCk7XG59XG5leHBvcnRzLmNyZWF0ZVR4SWQgPSBjcmVhdGVUeElkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNKbFlYUmxYM1I0WDJsa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyTnNhV1Z1ZEY5d2NtOXZabk12Y0hKdmIyWmZaR0YwWVM5amNtVmhkR1ZmZEhoZmFXUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNLMEpCUVRoQ08wRkJRemxDTEhsRFFVRnhRenRCUVVWeVF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMR0ZCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVVUzUWl4VFFVRm5RaXhWUVVGVkxFTkJRVU1zV1VGQmIwSTdTVUZETjBNc1RVRkJUU3hQUVVGUExFZEJRVWNzV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNNVF5eE5RVUZOTEZGQlFWRXNSMEZEV2l4UFFVRlBMRXRCUVVzc2EwSkJRVThzUTBGQlF5eFpRVUZaTzFGQlF6bENMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzFsQlExb3NXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEzcENMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETzFsQlEyaENMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0VFFVTXpRaXhEUVVGRE8xRkJRMG9zUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXp0SlFVTnVRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEWWl4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1FVRkRlRU1zUTBGQlF6dEJRVnBFTEdkRFFWbERJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/create_tx_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_claim_proof_data.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_claim_proof_data.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefiClaimProofData = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bridge_id_1 = __webpack_require__(/*! ../../bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\");\nconst proof_data_1 = __webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\");\nconst proof_id_1 = __webpack_require__(/*! ./proof_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\");\nclass DefiClaimProofData {\n    constructor(proofData) {\n        this.proofData = proofData;\n        if (proofData.proofId !== proof_id_1.ProofId.DEFI_CLAIM) {\n            throw new Error('Not a defi claim proof.');\n        }\n    }\n    static fromBuffer(rawProofData) {\n        return new DefiClaimProofData(new proof_data_1.ProofData(rawProofData));\n    }\n    get txFee() {\n        return (0, bigint_buffer_1.toBigIntBE)(this.proofData.txFee);\n    }\n    get txFeeAssetId() {\n        return this.proofData.feeAssetId;\n    }\n    get bridgeId() {\n        return bridge_id_1.BridgeId.fromBuffer(this.proofData.bridgeId);\n    }\n}\nexports.DefiClaimProofData = DefiClaimProofData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9jbGFpbV9wcm9vZl9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvb2ZfZGF0YS9kZWZpX2NsYWltX3Byb29mX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQWlEO0FBQ2pELCtDQUEyQztBQUMzQyw2Q0FBeUM7QUFDekMseUNBQXFDO0FBRXJDLE1BQWEsa0JBQWtCO0lBQzdCLFlBQTRCLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDOUMsSUFBSSxTQUFTLENBQUMsT0FBTyxLQUFLLGtCQUFPLENBQUMsVUFBVSxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQW9CO1FBQ3BDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLHNCQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFBLDBCQUFVLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQXRCRCxnREFzQkMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvZGVmaV9jbGFpbV9wcm9vZl9kYXRhLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQix3QkFBd0IsbUJBQU8sQ0FBQywrRkFBcUI7QUFDckQsb0JBQW9CLG1CQUFPLENBQUMsdUZBQWlCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLHdHQUFjO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLG9HQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NsaWVudF9wcm9vZnMvcHJvb2ZfZGF0YS9kZWZpX2NsYWltX3Byb29mX2RhdGEuanM/Yjg5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVmaUNsYWltUHJvb2ZEYXRhID0gdm9pZCAwO1xuY29uc3QgYmlnaW50X2J1ZmZlcl8xID0gcmVxdWlyZShcIi4uLy4uL2JpZ2ludF9idWZmZXJcIik7XG5jb25zdCBicmlkZ2VfaWRfMSA9IHJlcXVpcmUoXCIuLi8uLi9icmlkZ2VfaWRcIik7XG5jb25zdCBwcm9vZl9kYXRhXzEgPSByZXF1aXJlKFwiLi9wcm9vZl9kYXRhXCIpO1xuY29uc3QgcHJvb2ZfaWRfMSA9IHJlcXVpcmUoXCIuL3Byb29mX2lkXCIpO1xuY2xhc3MgRGVmaUNsYWltUHJvb2ZEYXRhIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9vZkRhdGEpIHtcbiAgICAgICAgdGhpcy5wcm9vZkRhdGEgPSBwcm9vZkRhdGE7XG4gICAgICAgIGlmIChwcm9vZkRhdGEucHJvb2ZJZCAhPT0gcHJvb2ZfaWRfMS5Qcm9vZklkLkRFRklfQ0xBSU0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgZGVmaSBjbGFpbSBwcm9vZi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlcihyYXdQcm9vZkRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZpQ2xhaW1Qcm9vZkRhdGEobmV3IHByb29mX2RhdGFfMS5Qcm9vZkRhdGEocmF3UHJvb2ZEYXRhKSk7XG4gICAgfVxuICAgIGdldCB0eEZlZSgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBiaWdpbnRfYnVmZmVyXzEudG9CaWdJbnRCRSkodGhpcy5wcm9vZkRhdGEudHhGZWUpO1xuICAgIH1cbiAgICBnZXQgdHhGZWVBc3NldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZkRhdGEuZmVlQXNzZXRJZDtcbiAgICB9XG4gICAgZ2V0IGJyaWRnZUlkKCkge1xuICAgICAgICByZXR1cm4gYnJpZGdlX2lkXzEuQnJpZGdlSWQuZnJvbUJ1ZmZlcih0aGlzLnByb29mRGF0YS5icmlkZ2VJZCk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWZpQ2xhaW1Qcm9vZkRhdGEgPSBEZWZpQ2xhaW1Qcm9vZkRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laR1ZtYVY5amJHRnBiVjl3Y205dlpsOWtZWFJoTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDJOc2FXVnVkRjl3Y205dlpuTXZjSEp2YjJaZlpHRjBZUzlrWldacFgyTnNZV2x0WDNCeWIyOW1YMlJoZEdFdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2RVUkJRV2xFTzBGQlEycEVMQ3REUVVFeVF6dEJRVU16UXl3MlEwRkJlVU03UVVGRGVrTXNlVU5CUVhGRE8wRkJSWEpETEUxQlFXRXNhMEpCUVd0Q08wbEJRemRDTEZsQlFUUkNMRk5CUVc5Q08xRkJRWEJDTEdOQlFWTXNSMEZCVkN4VFFVRlRMRU5CUVZjN1VVRkRPVU1zU1VGQlNTeFRRVUZUTEVOQlFVTXNUMEZCVHl4TFFVRkxMR3RDUVVGUExFTkJRVU1zVlVGQlZTeEZRVUZGTzFsQlF6VkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1EwRkJRenRUUVVNMVF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExGbEJRVzlDTzFGQlEzQkRMRTlCUVU4c1NVRkJTU3hyUWtGQmEwSXNRMEZCUXl4SlFVRkpMSE5DUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTNSQ3hEUVVGRE8wbEJSVVFzU1VGQlNTeExRVUZMTzFGQlExQXNUMEZCVHl4SlFVRkJMREJDUVVGVkxFVkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVNeFF5eERRVUZETzBsQlJVUXNTVUZCU1N4WlFVRlpPMUZCUTJRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXp0SlFVTnVReXhEUVVGRE8wbEJSVVFzU1VGQlNTeFJRVUZSTzFGQlExWXNUMEZCVHl4dlFrRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM1JFTEVOQlFVTTdRMEZEUmp0QlFYUkNSQ3huUkVGelFrTWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_claim_proof_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_deposit_proof_data.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_deposit_proof_data.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefiDepositProofData = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bridge_id_1 = __webpack_require__(/*! ../../bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\");\nconst proof_data_1 = __webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\");\nconst proof_id_1 = __webpack_require__(/*! ./proof_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\");\nclass DefiDepositProofData {\n    constructor(proofData) {\n        this.proofData = proofData;\n        if (proofData.proofId !== proof_id_1.ProofId.DEFI_DEPOSIT) {\n            throw new Error('Not a defi deposit proof.');\n        }\n    }\n    static fromBuffer(rawProofData) {\n        return new DefiDepositProofData(new proof_data_1.ProofData(rawProofData));\n    }\n    get txFee() {\n        return (0, bigint_buffer_1.toBigIntBE)(this.proofData.txFee);\n    }\n    get txFeeAssetId() {\n        return this.proofData.feeAssetId;\n    }\n    get bridgeId() {\n        return bridge_id_1.BridgeId.fromBuffer(this.proofData.bridgeId);\n    }\n    get defiDepositValue() {\n        return (0, bigint_buffer_1.toBigIntBE)(this.proofData.defiDepositValue);\n    }\n}\nexports.DefiDepositProofData = DefiDepositProofData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9kZXBvc2l0X3Byb29mX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2RlZmlfZGVwb3NpdF9wcm9vZl9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVEQUFpRDtBQUNqRCwrQ0FBMkM7QUFDM0MsNkNBQXlDO0FBQ3pDLHlDQUFxQztBQUVyQyxNQUFhLG9CQUFvQjtJQUMvQixZQUE0QixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQzlDLElBQUksU0FBUyxDQUFDLE9BQU8sS0FBSyxrQkFBTyxDQUFDLFlBQVksRUFBRTtZQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFvQjtRQUNwQyxPQUFPLElBQUksb0JBQW9CLENBQUMsSUFBSSxzQkFBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBQSwwQkFBVSxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sb0JBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFBLDBCQUFVLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQTFCRCxvREEwQkMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvZGVmaV9kZXBvc2l0X3Byb29mX2RhdGEuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHdCQUF3QixtQkFBTyxDQUFDLCtGQUFxQjtBQUNyRCxvQkFBb0IsbUJBQU8sQ0FBQyx1RkFBaUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsd0dBQWM7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsb0dBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2RlZmlfZGVwb3NpdF9wcm9vZl9kYXRhLmpzPzEyMmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlZmlEZXBvc2l0UHJvb2ZEYXRhID0gdm9pZCAwO1xuY29uc3QgYmlnaW50X2J1ZmZlcl8xID0gcmVxdWlyZShcIi4uLy4uL2JpZ2ludF9idWZmZXJcIik7XG5jb25zdCBicmlkZ2VfaWRfMSA9IHJlcXVpcmUoXCIuLi8uLi9icmlkZ2VfaWRcIik7XG5jb25zdCBwcm9vZl9kYXRhXzEgPSByZXF1aXJlKFwiLi9wcm9vZl9kYXRhXCIpO1xuY29uc3QgcHJvb2ZfaWRfMSA9IHJlcXVpcmUoXCIuL3Byb29mX2lkXCIpO1xuY2xhc3MgRGVmaURlcG9zaXRQcm9vZkRhdGEge1xuICAgIGNvbnN0cnVjdG9yKHByb29mRGF0YSkge1xuICAgICAgICB0aGlzLnByb29mRGF0YSA9IHByb29mRGF0YTtcbiAgICAgICAgaWYgKHByb29mRGF0YS5wcm9vZklkICE9PSBwcm9vZl9pZF8xLlByb29mSWQuREVGSV9ERVBPU0lUKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIGRlZmkgZGVwb3NpdCBwcm9vZi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlcihyYXdQcm9vZkRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZpRGVwb3NpdFByb29mRGF0YShuZXcgcHJvb2ZfZGF0YV8xLlByb29mRGF0YShyYXdQcm9vZkRhdGEpKTtcbiAgICB9XG4gICAgZ2V0IHR4RmVlKCkge1xuICAgICAgICByZXR1cm4gKDAsIGJpZ2ludF9idWZmZXJfMS50b0JpZ0ludEJFKSh0aGlzLnByb29mRGF0YS50eEZlZSk7XG4gICAgfVxuICAgIGdldCB0eEZlZUFzc2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb29mRGF0YS5mZWVBc3NldElkO1xuICAgIH1cbiAgICBnZXQgYnJpZGdlSWQoKSB7XG4gICAgICAgIHJldHVybiBicmlkZ2VfaWRfMS5CcmlkZ2VJZC5mcm9tQnVmZmVyKHRoaXMucHJvb2ZEYXRhLmJyaWRnZUlkKTtcbiAgICB9XG4gICAgZ2V0IGRlZmlEZXBvc2l0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAoMCwgYmlnaW50X2J1ZmZlcl8xLnRvQmlnSW50QkUpKHRoaXMucHJvb2ZEYXRhLmRlZmlEZXBvc2l0VmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGVmaURlcG9zaXRQcm9vZkRhdGEgPSBEZWZpRGVwb3NpdFByb29mRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpHVm1hVjlrWlhCdmMybDBYM0J5YjI5bVgyUmhkR0V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WTJ4cFpXNTBYM0J5YjI5bWN5OXdjbTl2Wmw5a1lYUmhMMlJsWm1sZlpHVndiM05wZEY5d2NtOXZabDlrWVhSaExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxIVkVRVUZwUkR0QlFVTnFSQ3dyUTBGQk1rTTdRVUZETTBNc05rTkJRWGxETzBGQlEzcERMSGxEUVVGeFF6dEJRVVZ5UXl4TlFVRmhMRzlDUVVGdlFqdEpRVU12UWl4WlFVRTBRaXhUUVVGdlFqdFJRVUZ3UWl4alFVRlRMRWRCUVZRc1UwRkJVeXhEUVVGWE8xRkJRemxETEVsQlFVa3NVMEZCVXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhyUWtGQlR5eERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTTVReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETERKQ1FVRXlRaXhEUVVGRExFTkJRVU03VTBGRE9VTTdTVUZEU0N4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFpRVUZ2UWp0UlFVTndReXhQUVVGUExFbEJRVWtzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3h6UWtGQlV5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRMMFFzUTBGQlF6dEpRVVZFTEVsQlFVa3NTMEZCU3p0UlFVTlFMRTlCUVU4c1NVRkJRU3d3UWtGQlZTeEZRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRE1VTXNRMEZCUXp0SlFVVkVMRWxCUVVrc1dVRkJXVHRSUVVOa0xFOUJRVThzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRU5CUVVNN1NVRkRia01zUTBGQlF6dEpRVVZFTEVsQlFVa3NVVUZCVVR0UlFVTldMRTlCUVU4c2IwSkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU4wUkN4RFFVRkRPMGxCUlVRc1NVRkJTU3huUWtGQlowSTdVVUZEYkVJc1QwRkJUeXhKUVVGQkxEQkNRVUZWTEVWQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMGxCUTNKRUxFTkJRVU03UTBGRFJqdEJRVEZDUkN4dlJFRXdRa01pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_deposit_proof_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/index.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./account_proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/account_proof_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./create_tx_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/create_tx_id.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./defi_claim_proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_claim_proof_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./defi_deposit_proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/defi_deposit_proof_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./join_split_proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/join_split_proof_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./proof_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9FQUFxQztBQUNyQyw4REFBK0I7QUFDL0IsdUVBQXdDO0FBQ3hDLHlFQUEwQztBQUMxQyx1RUFBd0M7QUFDeEMsNERBQTZCO0FBQzdCLDBEQUEyQiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsd0hBQXNCO0FBQ3hELDBCQUEwQixtQkFBTyxDQUFDLDRHQUFnQjtBQUNsRCwwQkFBMEIsbUJBQU8sQ0FBQyw4SEFBeUI7QUFDM0QsMEJBQTBCLG1CQUFPLENBQUMsa0lBQTJCO0FBQzdELDBCQUEwQixtQkFBTyxDQUFDLDhIQUF5QjtBQUMzRCwwQkFBMEIsbUJBQU8sQ0FBQyx3R0FBYztBQUNoRCwwQkFBMEIsbUJBQU8sQ0FBQyxvR0FBWTtBQUM5QywyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2luZGV4LmpzPzM2ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9hY2NvdW50X3Byb29mX2RhdGFcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9jcmVhdGVfdHhfaWRcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9kZWZpX2NsYWltX3Byb29mX2RhdGFcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9kZWZpX2RlcG9zaXRfcHJvb2ZfZGF0YVwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2pvaW5fc3BsaXRfcHJvb2ZfZGF0YVwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3Byb29mX2RhdGFcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9wcm9vZl9pZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkyeHBaVzUwWDNCeWIyOW1jeTl3Y205dlpsOWtZWFJoTDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRzlGUVVGeFF6dEJRVU55UXl3NFJFRkJLMEk3UVVGREwwSXNkVVZCUVhkRE8wRkJRM2hETEhsRlFVRXdRenRCUVVNeFF5eDFSVUZCZDBNN1FVRkRlRU1zTkVSQlFUWkNPMEZCUXpkQ0xEQkVRVUV5UWlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/join_split_proof_data.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/join_split_proof_data.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JoinSplitProofData = void 0;\nconst address_1 = __webpack_require__(/*! ../../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst bigint_buffer_1 = __webpack_require__(/*! ../../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst proof_data_1 = __webpack_require__(/*! ./proof_data */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\");\nclass JoinSplitProofData {\n    constructor(proofData) {\n        this.proofData = proofData;\n    }\n    static fromBuffer(rawProofData) {\n        return new JoinSplitProofData(new proof_data_1.ProofData(rawProofData));\n    }\n    get txId() {\n        return this.proofData.txId;\n    }\n    get publicAssetId() {\n        return this.proofData.publicAssetId.readUInt32BE(28);\n    }\n    get publicValue() {\n        return (0, bigint_buffer_1.toBigIntBE)(this.proofData.publicValue);\n    }\n    get publicOwner() {\n        return new address_1.EthAddress(this.proofData.publicOwner);\n    }\n    get txFee() {\n        return (0, bigint_buffer_1.toBigIntBE)(this.proofData.txFee);\n    }\n    get txFeeAssetId() {\n        return this.proofData.feeAssetId;\n    }\n}\nexports.JoinSplitProofData = JoinSplitProofData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbl9zcGxpdF9wcm9vZl9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvb2ZfZGF0YS9qb2luX3NwbGl0X3Byb29mX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQTJDO0FBQzNDLHVEQUFpRDtBQUNqRCw2Q0FBeUM7QUFFekMsTUFBYSxrQkFBa0I7SUFDN0IsWUFBNEIsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFHLENBQUM7SUFFcEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFvQjtRQUNwQyxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxzQkFBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUEsMEJBQVUsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksb0JBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUEsMEJBQVUsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQ25DLENBQUM7Q0FDRjtBQTlCRCxnREE4QkMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvam9pbl9zcGxpdF9wcm9vZl9kYXRhLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixrQkFBa0IsbUJBQU8sQ0FBQyxtRkFBZTtBQUN6Qyx3QkFBd0IsbUJBQU8sQ0FBQywrRkFBcUI7QUFDckQscUJBQXFCLG1CQUFPLENBQUMsd0dBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL2pvaW5fc3BsaXRfcHJvb2ZfZGF0YS5qcz80ZjgzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Kb2luU3BsaXRQcm9vZkRhdGEgPSB2b2lkIDA7XG5jb25zdCBhZGRyZXNzXzEgPSByZXF1aXJlKFwiLi4vLi4vYWRkcmVzc1wiKTtcbmNvbnN0IGJpZ2ludF9idWZmZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9iaWdpbnRfYnVmZmVyXCIpO1xuY29uc3QgcHJvb2ZfZGF0YV8xID0gcmVxdWlyZShcIi4vcHJvb2ZfZGF0YVwiKTtcbmNsYXNzIEpvaW5TcGxpdFByb29mRGF0YSB7XG4gICAgY29uc3RydWN0b3IocHJvb2ZEYXRhKSB7XG4gICAgICAgIHRoaXMucHJvb2ZEYXRhID0gcHJvb2ZEYXRhO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlcihyYXdQcm9vZkRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKb2luU3BsaXRQcm9vZkRhdGEobmV3IHByb29mX2RhdGFfMS5Qcm9vZkRhdGEocmF3UHJvb2ZEYXRhKSk7XG4gICAgfVxuICAgIGdldCB0eElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZkRhdGEudHhJZDtcbiAgICB9XG4gICAgZ2V0IHB1YmxpY0Fzc2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb29mRGF0YS5wdWJsaWNBc3NldElkLnJlYWRVSW50MzJCRSgyOCk7XG4gICAgfVxuICAgIGdldCBwdWJsaWNWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBiaWdpbnRfYnVmZmVyXzEudG9CaWdJbnRCRSkodGhpcy5wcm9vZkRhdGEucHVibGljVmFsdWUpO1xuICAgIH1cbiAgICBnZXQgcHVibGljT3duZXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgYWRkcmVzc18xLkV0aEFkZHJlc3ModGhpcy5wcm9vZkRhdGEucHVibGljT3duZXIpO1xuICAgIH1cbiAgICBnZXQgdHhGZWUoKSB7XG4gICAgICAgIHJldHVybiAoMCwgYmlnaW50X2J1ZmZlcl8xLnRvQmlnSW50QkUpKHRoaXMucHJvb2ZEYXRhLnR4RmVlKTtcbiAgICB9XG4gICAgZ2V0IHR4RmVlQXNzZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvb2ZEYXRhLmZlZUFzc2V0SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Kb2luU3BsaXRQcm9vZkRhdGEgPSBKb2luU3BsaXRQcm9vZkRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhbTlwYmw5emNHeHBkRjl3Y205dlpsOWtZWFJoTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDJOc2FXVnVkRjl3Y205dlpuTXZjSEp2YjJaZlpHRjBZUzlxYjJsdVgzTndiR2wwWDNCeWIyOW1YMlJoZEdFdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc01rTkJRVEpETzBGQlF6TkRMSFZFUVVGcFJEdEJRVU5xUkN3MlEwRkJlVU03UVVGRmVrTXNUVUZCWVN4clFrRkJhMEk3U1VGRE4wSXNXVUZCTkVJc1UwRkJiMEk3VVVGQmNFSXNZMEZCVXl4SFFVRlVMRk5CUVZNc1EwRkJWenRKUVVGSExFTkJRVU03U1VGRmNFUXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhaUVVGdlFqdFJRVU53UXl4UFFVRlBMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4elFrRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETjBRc1EwRkJRenRKUVVWRUxFbEJRVWtzU1VGQlNUdFJRVU5PTEU5QlFVOHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRE4wSXNRMEZCUXp0SlFVVkVMRWxCUVVrc1lVRkJZVHRSUVVObUxFOUJRVThzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEzWkVMRU5CUVVNN1NVRkZSQ3hKUVVGSkxGZEJRVmM3VVVGRFlpeFBRVUZQTEVsQlFVRXNNRUpCUVZVc1JVRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRlJDeEpRVUZKTEZkQlFWYzdVVUZEWWl4UFFVRlBMRWxCUVVrc2IwSkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wbEJRM0JFTEVOQlFVTTdTVUZGUkN4SlFVRkpMRXRCUVVzN1VVRkRVQ3hQUVVGUExFbEJRVUVzTUVKQlFWVXNSVUZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBsQlF6RkRMRU5CUVVNN1NVRkZSQ3hKUVVGSkxGbEJRVms3VVVGRFpDeFBRVUZQTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wbEJRMjVETEVOQlFVTTdRMEZEUmp0QlFUbENSQ3huUkVFNFFrTWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/join_split_proof_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProofData = void 0;\nconst create_tx_id_1 = __webpack_require__(/*! ./create_tx_id */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/create_tx_id.js\");\nvar ProofDataFields;\n(function (ProofDataFields) {\n    ProofDataFields[ProofDataFields[\"PROOF_ID\"] = 0] = \"PROOF_ID\";\n    ProofDataFields[ProofDataFields[\"NOTE_COMMITMENT_1\"] = 1] = \"NOTE_COMMITMENT_1\";\n    ProofDataFields[ProofDataFields[\"NOTE_COMMITMENT_2\"] = 2] = \"NOTE_COMMITMENT_2\";\n    ProofDataFields[ProofDataFields[\"NULLIFIER_1\"] = 3] = \"NULLIFIER_1\";\n    ProofDataFields[ProofDataFields[\"NULLIFIER_2\"] = 4] = \"NULLIFIER_2\";\n    ProofDataFields[ProofDataFields[\"PUBLIC_VALUE\"] = 5] = \"PUBLIC_VALUE\";\n    ProofDataFields[ProofDataFields[\"PUBLIC_OWNER\"] = 6] = \"PUBLIC_OWNER\";\n    ProofDataFields[ProofDataFields[\"PUBLIC_ASSET_ID\"] = 7] = \"PUBLIC_ASSET_ID\";\n    ProofDataFields[ProofDataFields[\"NOTE_TREE_ROOT\"] = 8] = \"NOTE_TREE_ROOT\";\n    ProofDataFields[ProofDataFields[\"TX_FEE\"] = 9] = \"TX_FEE\";\n    ProofDataFields[ProofDataFields[\"TX_FEE_ASSET_ID\"] = 10] = \"TX_FEE_ASSET_ID\";\n    ProofDataFields[ProofDataFields[\"BRIDGE_ID\"] = 11] = \"BRIDGE_ID\";\n    ProofDataFields[ProofDataFields[\"DEFI_DEPOSIT_VALUE\"] = 12] = \"DEFI_DEPOSIT_VALUE\";\n    ProofDataFields[ProofDataFields[\"DEFI_ROOT\"] = 13] = \"DEFI_ROOT\";\n    ProofDataFields[ProofDataFields[\"BACKWARD_LINK\"] = 14] = \"BACKWARD_LINK\";\n    ProofDataFields[ProofDataFields[\"ALLOW_CHAIN\"] = 15] = \"ALLOW_CHAIN\";\n})(ProofDataFields || (ProofDataFields = {}));\nvar ProofDataOffsets;\n(function (ProofDataOffsets) {\n    ProofDataOffsets[ProofDataOffsets[\"PROOF_ID\"] = 28] = \"PROOF_ID\";\n    ProofDataOffsets[ProofDataOffsets[\"NOTE_COMMITMENT_1\"] = 32] = \"NOTE_COMMITMENT_1\";\n    ProofDataOffsets[ProofDataOffsets[\"NOTE_COMMITMENT_2\"] = 64] = \"NOTE_COMMITMENT_2\";\n    ProofDataOffsets[ProofDataOffsets[\"NULLIFIER_1\"] = 96] = \"NULLIFIER_1\";\n    ProofDataOffsets[ProofDataOffsets[\"NULLIFIER_2\"] = 128] = \"NULLIFIER_2\";\n    ProofDataOffsets[ProofDataOffsets[\"PUBLIC_VALUE\"] = 160] = \"PUBLIC_VALUE\";\n    ProofDataOffsets[ProofDataOffsets[\"PUBLIC_OWNER\"] = 192] = \"PUBLIC_OWNER\";\n    ProofDataOffsets[ProofDataOffsets[\"PUBLIC_ASSET_ID\"] = 224] = \"PUBLIC_ASSET_ID\";\n    ProofDataOffsets[ProofDataOffsets[\"NOTE_TREE_ROOT\"] = 256] = \"NOTE_TREE_ROOT\";\n    ProofDataOffsets[ProofDataOffsets[\"TX_FEE\"] = 288] = \"TX_FEE\";\n    ProofDataOffsets[ProofDataOffsets[\"TX_FEE_ASSET_ID\"] = 320] = \"TX_FEE_ASSET_ID\";\n    ProofDataOffsets[ProofDataOffsets[\"BRIDGE_ID\"] = 352] = \"BRIDGE_ID\";\n    ProofDataOffsets[ProofDataOffsets[\"DEFI_DEPOSIT_VALUE\"] = 384] = \"DEFI_DEPOSIT_VALUE\";\n    ProofDataOffsets[ProofDataOffsets[\"DEFI_ROOT\"] = 416] = \"DEFI_ROOT\";\n    ProofDataOffsets[ProofDataOffsets[\"BACKWARD_LINK\"] = 448] = \"BACKWARD_LINK\";\n    ProofDataOffsets[ProofDataOffsets[\"ALLOW_CHAIN\"] = 480] = \"ALLOW_CHAIN\";\n})(ProofDataOffsets || (ProofDataOffsets = {}));\n/**\n * Represents tx proof data as returned by the proof generator.\n * Differs to on chain data, in that not all data here is actually published.\n * Fields that differ between proofs, or natural buffers, are of type Buffer.\n * Fields that are always of fixed type/meaning are converted.\n */\nclass ProofData {\n    constructor(rawProofData) {\n        this.rawProofData = rawProofData;\n        this.proofId = rawProofData.readUInt32BE(ProofDataOffsets.PROOF_ID);\n        this.noteCommitment1 = rawProofData.slice(ProofDataOffsets.NOTE_COMMITMENT_1, ProofDataOffsets.NOTE_COMMITMENT_1 + 32);\n        this.noteCommitment2 = rawProofData.slice(ProofDataOffsets.NOTE_COMMITMENT_2, ProofDataOffsets.NOTE_COMMITMENT_2 + 32);\n        this.nullifier1 = rawProofData.slice(ProofDataOffsets.NULLIFIER_1, ProofDataOffsets.NULLIFIER_1 + 32);\n        this.nullifier2 = rawProofData.slice(ProofDataOffsets.NULLIFIER_2, ProofDataOffsets.NULLIFIER_2 + 32);\n        this.publicValue = rawProofData.slice(ProofDataOffsets.PUBLIC_VALUE, ProofDataOffsets.PUBLIC_VALUE + 32);\n        this.publicOwner = rawProofData.slice(ProofDataOffsets.PUBLIC_OWNER, ProofDataOffsets.PUBLIC_OWNER + 32);\n        this.publicAssetId = rawProofData.slice(ProofDataOffsets.PUBLIC_ASSET_ID, ProofDataOffsets.PUBLIC_ASSET_ID + 32);\n        // Not published as part of inner proofs.\n        this.noteTreeRoot = rawProofData.slice(ProofDataOffsets.NOTE_TREE_ROOT, ProofDataOffsets.NOTE_TREE_ROOT + 32);\n        this.txFee = rawProofData.slice(ProofDataOffsets.TX_FEE, ProofDataOffsets.TX_FEE + 32);\n        this.txFeeAssetId = rawProofData.slice(ProofDataOffsets.TX_FEE_ASSET_ID, ProofDataOffsets.TX_FEE_ASSET_ID + 32);\n        this.bridgeId = rawProofData.slice(ProofDataOffsets.BRIDGE_ID, ProofDataOffsets.BRIDGE_ID + 32);\n        this.defiDepositValue = rawProofData.slice(ProofDataOffsets.DEFI_DEPOSIT_VALUE, ProofDataOffsets.DEFI_DEPOSIT_VALUE + 32);\n        this.defiRoot = rawProofData.slice(ProofDataOffsets.DEFI_ROOT, ProofDataOffsets.DEFI_ROOT + 32);\n        this.backwardLink = rawProofData.slice(ProofDataOffsets.BACKWARD_LINK, ProofDataOffsets.BACKWARD_LINK + 32);\n        this.allowChain = rawProofData.slice(ProofDataOffsets.ALLOW_CHAIN, ProofDataOffsets.ALLOW_CHAIN + 32);\n        this.txId = (0, create_tx_id_1.createTxId)(rawProofData.slice(0, ProofData.NUM_PUBLISHED_PUBLIC_INPUTS * 32));\n    }\n    static getProofIdFromBuffer(rawProofData) {\n        return rawProofData.readUInt32BE(ProofDataOffsets.PROOF_ID);\n    }\n    get allowChainFromNote1() {\n        const allowChain = this.allowChain.readUInt32BE(28);\n        return [1, 3].includes(allowChain);\n    }\n    get allowChainFromNote2() {\n        const allowChain = this.allowChain.readUInt32BE(28);\n        return [2, 3].includes(allowChain);\n    }\n    get feeAssetId() {\n        return this.txFeeAssetId.readUInt32BE(28);\n    }\n}\nexports.ProofData = ProofData;\nProofData.NUM_PUBLIC_INPUTS = 17;\nProofData.NUM_PUBLISHED_PUBLIC_INPUTS = 8;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvcHJvb2ZfZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBNEM7QUFHNUMsSUFBSyxlQWlCSjtBQWpCRCxXQUFLLGVBQWU7SUFDbEIsNkRBQVEsQ0FBQTtJQUNSLCtFQUFpQixDQUFBO0lBQ2pCLCtFQUFpQixDQUFBO0lBQ2pCLG1FQUFXLENBQUE7SUFDWCxtRUFBVyxDQUFBO0lBQ1gscUVBQVksQ0FBQTtJQUNaLHFFQUFZLENBQUE7SUFDWiwyRUFBZSxDQUFBO0lBQ2YseUVBQWMsQ0FBQTtJQUNkLHlEQUFNLENBQUE7SUFDTiw0RUFBZSxDQUFBO0lBQ2YsZ0VBQVMsQ0FBQTtJQUNULGtGQUFrQixDQUFBO0lBQ2xCLGdFQUFTLENBQUE7SUFDVCx3RUFBYSxDQUFBO0lBQ2Isb0VBQVcsQ0FBQTtBQUNiLENBQUMsRUFqQkksZUFBZSxLQUFmLGVBQWUsUUFpQm5CO0FBRUQsSUFBSyxnQkFpQko7QUFqQkQsV0FBSyxnQkFBZ0I7SUFDbkIsZ0VBQTZDLENBQUE7SUFDN0Msa0ZBQTBELENBQUE7SUFDMUQsa0ZBQTBELENBQUE7SUFDMUQsc0VBQThDLENBQUE7SUFDOUMsdUVBQThDLENBQUE7SUFDOUMseUVBQWdELENBQUE7SUFDaEQseUVBQWdELENBQUE7SUFDaEQsK0VBQXNELENBQUE7SUFDdEQsNkVBQW9ELENBQUE7SUFDcEQsNkRBQW9DLENBQUE7SUFDcEMsK0VBQXNELENBQUE7SUFDdEQsbUVBQTBDLENBQUE7SUFDMUMscUZBQTRELENBQUE7SUFDNUQsbUVBQTBDLENBQUE7SUFDMUMsMkVBQWtELENBQUE7SUFDbEQsdUVBQThDLENBQUE7QUFDaEQsQ0FBQyxFQWpCSSxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBaUJwQjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBYSxTQUFTO0lBNkJwQixZQUFtQixZ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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProofId = void 0;\nvar ProofId;\n(function (ProofId) {\n    ProofId[ProofId[\"PADDING\"] = 0] = \"PADDING\";\n    ProofId[ProofId[\"DEPOSIT\"] = 1] = \"DEPOSIT\";\n    ProofId[ProofId[\"WITHDRAW\"] = 2] = \"WITHDRAW\";\n    ProofId[ProofId[\"SEND\"] = 3] = \"SEND\";\n    ProofId[ProofId[\"ACCOUNT\"] = 4] = \"ACCOUNT\";\n    ProofId[ProofId[\"DEFI_DEPOSIT\"] = 5] = \"DEFI_DEPOSIT\";\n    ProofId[ProofId[\"DEFI_CLAIM\"] = 6] = \"DEFI_CLAIM\";\n})(ProofId = exports.ProofId || (exports.ProofId = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvb2ZfaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL3Byb29mX2lkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQVksT0FRWDtBQVJELFdBQVksT0FBTztJQUNqQiwyQ0FBTyxDQUFBO0lBQ1AsMkNBQU8sQ0FBQTtJQUNQLDZDQUFRLENBQUE7SUFDUixxQ0FBSSxDQUFBO0lBQ0osMkNBQU8sQ0FBQTtJQUNQLHFEQUFZLENBQUE7SUFDWixpREFBVSxDQUFBO0FBQ1osQ0FBQyxFQVJXLE9BQU8sR0FBUCxlQUFPLEtBQVAsZUFBTyxRQVFsQiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb29mX2RhdGEvcHJvb2ZfaWQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDLGVBQWUsS0FBSztBQUNyRCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm9vZl9kYXRhL3Byb29mX2lkLmpzP2U5NDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb29mSWQgPSB2b2lkIDA7XG52YXIgUHJvb2ZJZDtcbihmdW5jdGlvbiAoUHJvb2ZJZCkge1xuICAgIFByb29mSWRbUHJvb2ZJZFtcIlBBRERJTkdcIl0gPSAwXSA9IFwiUEFERElOR1wiO1xuICAgIFByb29mSWRbUHJvb2ZJZFtcIkRFUE9TSVRcIl0gPSAxXSA9IFwiREVQT1NJVFwiO1xuICAgIFByb29mSWRbUHJvb2ZJZFtcIldJVEhEUkFXXCJdID0gMl0gPSBcIldJVEhEUkFXXCI7XG4gICAgUHJvb2ZJZFtQcm9vZklkW1wiU0VORFwiXSA9IDNdID0gXCJTRU5EXCI7XG4gICAgUHJvb2ZJZFtQcm9vZklkW1wiQUNDT1VOVFwiXSA9IDRdID0gXCJBQ0NPVU5UXCI7XG4gICAgUHJvb2ZJZFtQcm9vZklkW1wiREVGSV9ERVBPU0lUXCJdID0gNV0gPSBcIkRFRklfREVQT1NJVFwiO1xuICAgIFByb29mSWRbUHJvb2ZJZFtcIkRFRklfQ0xBSU1cIl0gPSA2XSA9IFwiREVGSV9DTEFJTVwiO1xufSkoUHJvb2ZJZCA9IGV4cG9ydHMuUHJvb2ZJZCB8fCAoZXhwb3J0cy5Qcm9vZklkID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNISnZiMlpmYVdRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkyeHBaVzUwWDNCeWIyOW1jeTl3Y205dlpsOWtZWFJoTDNCeWIyOW1YMmxrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCTEVsQlFWa3NUMEZSV0R0QlFWSkVMRmRCUVZrc1QwRkJUenRKUVVOcVFpd3lRMEZCVHl4RFFVRkJPMGxCUTFBc01rTkJRVThzUTBGQlFUdEpRVU5RTERaRFFVRlJMRU5CUVVFN1NVRkRVaXh4UTBGQlNTeERRVUZCTzBsQlEwb3NNa05CUVU4c1EwRkJRVHRKUVVOUUxIRkVRVUZaTEVOQlFVRTdTVUZEV2l4cFJFRkJWU3hEUVVGQk8wRkJRMW9zUTBGQlF5eEZRVkpYTEU5QlFVOHNSMEZCVUN4bFFVRlBMRXRCUVZBc1pVRkJUeXhSUVZGc1FpSjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/proof_data/proof_id.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/index.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/prover.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./unrolled_prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/unrolled_prover.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50X3Byb29mcy9wcm92ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0RBQXlCO0FBQ3pCLGlFQUFrQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb3Zlci9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxxRkFBTztBQUMvQiwwQkFBMEIsbUJBQU8sQ0FBQyw0RkFBVTtBQUM1QywwQkFBMEIsbUJBQU8sQ0FBQyw4R0FBbUI7QUFDckQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NsaWVudF9wcm9vZnMvcHJvdmVyL2luZGV4LmpzP2E0NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9wcm92ZXJcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi91bnJvbGxlZF9wcm92ZXJcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZZMnhwWlc1MFgzQnliMjltY3k5d2NtOTJaWEl2YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkMFJCUVhsQ08wRkJRM3BDTEdsRlFVRnJReUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/prover.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/prover.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Prover = void 0;\nconst log_1 = __webpack_require__(/*! ../../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst debug = (0, log_1.createDebugLogger)('bb:prover');\nclass Timer {\n    constructor(msg) {\n        debug(msg);\n        this.start = new Date().getTime();\n    }\n    mark(msg) {\n        const diff = new Date().getTime() - this.start;\n        debug(`${msg} (ms:${diff})`);\n        this.start = new Date().getTime();\n    }\n}\n/**\n * A Prover is composed of a single underlying worker (`wasm`), and implementations of Pippenger and Fft, which may\n * or may not be backed multiple wasm workers on which they execute their algorithms.\n *\n * The single given worker, must be the worker within which any proof generators will initialise their proving keys,\n * and must be the worker within which the given `proverPtr` exists.\n *\n * The `getWorker()` method should be used by proof generation components to return the worker on which to make their\n * appropriate wasmCalls.\n *\n * Given that the Fft implementation is provided in the constructor, a Prover is fixed to whatever circuit size the\n * Fft implementation was initialised with.\n */\nclass Prover {\n    constructor(wasm, pippenger, fft, callPrefix = '') {\n        this.wasm = wasm;\n        this.pippenger = pippenger;\n        this.fft = fft;\n        this.callPrefix = callPrefix;\n    }\n    getWorker() {\n        return this.wasm;\n    }\n    async proverCall(name, ...args) {\n        return await this.wasm.call(this.callPrefix + name, ...args);\n    }\n    async createProof(proverPtr) {\n        await this.wasm.acquire();\n        try {\n            const circuitSize = await this.proverCall('prover_get_circuit_size', proverPtr);\n            const timer = new Timer('enter createProof');\n            await this.proverCall('prover_execute_preamble_round', proverPtr);\n            timer.mark('preamble end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('first round start');\n            await this.proverCall('prover_execute_first_round', proverPtr);\n            timer.mark('first round end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('second round start');\n            await this.proverCall('prover_execute_second_round', proverPtr);\n            timer.mark('second round end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('third round start');\n            await this.proverCall('prover_execute_third_round', proverPtr);\n            timer.mark('third round end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('fourth round start');\n            await this.proverCall('prover_execute_fourth_round', proverPtr);\n            timer.mark('fourth round end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('fifth round start');\n            await this.proverCall('prover_execute_fifth_round', proverPtr);\n            timer.mark('fifth round end');\n            timer.mark('sixth round start');\n            await this.proverCall('prover_execute_sixth_round', proverPtr);\n            timer.mark('sixth round end');\n            await this.processProverQueue(proverPtr, circuitSize);\n            timer.mark('done');\n            const proofSize = await this.proverCall('prover_export_proof', proverPtr, 0);\n            const proofPtr = Buffer.from(await this.wasm.sliceMemory(0, 4)).readUInt32LE(0);\n            return Buffer.from(await this.wasm.sliceMemory(proofPtr, proofPtr + proofSize));\n        }\n        finally {\n            await this.wasm.release();\n        }\n    }\n    async processProverQueue(proverPtr, circuitSize) {\n        await this.proverCall('prover_get_work_queue_item_info', proverPtr, 0);\n        const jobInfo = Buffer.from(await this.wasm.sliceMemory(0, 12));\n        const scalarJobs = jobInfo.readUInt32LE(0);\n        const fftJobs = jobInfo.readUInt32LE(4);\n        const ifftJobs = jobInfo.readUInt32LE(8);\n        debug(`starting jobs scalars:${scalarJobs} ffts:${fftJobs} iffts:${ifftJobs}`);\n        for (let i = 0; i < scalarJobs; ++i) {\n            const scalarsPtr = await this.proverCall('prover_get_scalar_multiplication_data', proverPtr, i);\n            const scalars = await this.wasm.sliceMemory(scalarsPtr, scalarsPtr + circuitSize * 32);\n            const result = await this.pippenger.pippengerUnsafe(scalars, 0, circuitSize);\n            await this.wasm.transferToHeap(result, 0);\n            await this.proverCall('prover_put_scalar_multiplication_data', proverPtr, 0, i);\n        }\n        const jobs = [];\n        for (let i = 0; i < fftJobs; ++i) {\n            const coeffsPtr = await this.proverCall('prover_get_fft_data', proverPtr, 0, i);\n            const coefficients = await this.wasm.sliceMemory(coeffsPtr, coeffsPtr + circuitSize * 32);\n            const constant = await this.wasm.sliceMemory(0, 32);\n            jobs.push({ coefficients, constant, inverse: false, i });\n        }\n        for (let i = 0; i < ifftJobs; ++i) {\n            const coeffsPtr = await this.proverCall('prover_get_ifft_data', proverPtr, i);\n            const coefficients = await this.wasm.sliceMemory(coeffsPtr, coeffsPtr + circuitSize * 32);\n            jobs.push({ coefficients, inverse: true, i });\n        }\n        await Promise.all(jobs.map(({ inverse, coefficients, constant, i }) => inverse\n            ? this.doIfft(proverPtr, i, circuitSize, coefficients)\n            : this.doFft(proverPtr, i, circuitSize, coefficients, constant)));\n    }\n    async doFft(proverPtr, i, circuitSize, coefficients, constant) {\n        const result = await this.fft.fft(coefficients, constant);\n        const resultPtr = await this.wasm.call('bbmalloc', circuitSize * 32);\n        await this.wasm.transferToHeap(result, resultPtr);\n        await this.proverCall('prover_put_fft_data', proverPtr, resultPtr, i);\n        await this.wasm.call('bbfree', resultPtr);\n    }\n    async doIfft(proverPtr, i, circuitSize, coefficients) {\n        const result = await this.fft.ifft(coefficients);\n        const resultPtr = await this.wasm.call('bbmalloc', circuitSize * 32);\n        await this.wasm.transferToHeap(result, resultPtr);\n        await this.proverCall('prover_put_ifft_data', proverPtr, resultPtr, i);\n        await this.wasm.call('bbfree', resultPtr);\n    }\n}\nexports.Prover = Prover;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvdmVyL3Byb3Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBOEM7QUFLOUMsTUFBTSxLQUFLLEdBQUcsSUFBQSx1QkFBaUIsRUFBQyxXQUFXLENBQUMsQ0FBQztBQUU3QyxNQUFNLEtBQUs7SUFHVCxZQUFZLEdBQVc7UUFDckIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFTSxJQUFJLENBQUMsR0FBVztRQUNyQixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0MsS0FBSyxDQUFDLEdBQUcsR0FBRyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQWEsTUFBTTtJQUNqQixZQUNVLElBQTJDLEVBQzNDLFNBQW9CLEVBQ3BCLEdBQVEsRUFDUixhQUFhLEVBQUU7UUFIZixTQUFJLEdBQUosSUFBSSxDQUF1QztRQUMzQyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDUixlQUFVLEdBQVYsVUFBVSxDQUFLO0lBQ3RCLENBQUM7SUFFRyxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsSUFBMEIsQ0FBQztJQUN6QyxDQUFDO0lBRU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFZLEVBQUUsR0FBRyxJQUFXO1FBQ25ELE9BQU8sTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FB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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb3Zlci9wcm92ZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxjQUFjLG1CQUFPLENBQUMsMkVBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixLQUFLLE1BQU0sS0FBSztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLE1BQU07QUFDbkMsbUJBQW1CLE1BQU07QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsTUFBTTtBQUM5QjtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsWUFBWSxPQUFPLFNBQVMsUUFBUSxTQUFTO0FBQ3BGLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkNBQTJDO0FBQ25FO0FBQ0Esd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQSxzQ0FBc0Msb0NBQW9DO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY2xpZW50X3Byb29mcy9wcm92ZXIvcHJvdmVyLmpzPzAwOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb3ZlciA9IHZvaWQgMDtcbmNvbnN0IGxvZ18xID0gcmVxdWlyZShcIi4uLy4uL2xvZ1wiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGxvZ18xLmNyZWF0ZURlYnVnTG9nZ2VyKSgnYmI6cHJvdmVyJyk7XG5jbGFzcyBUaW1lciB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIGRlYnVnKG1zZyk7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB9XG4gICAgbWFyayhtc2cpIHtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5zdGFydDtcbiAgICAgICAgZGVidWcoYCR7bXNnfSAobXM6JHtkaWZmfSlgKTtcbiAgICAgICAgdGhpcy5zdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH1cbn1cbi8qKlxuICogQSBQcm92ZXIgaXMgY29tcG9zZWQgb2YgYSBzaW5nbGUgdW5kZXJseWluZyB3b3JrZXIgKGB3YXNtYCksIGFuZCBpbXBsZW1lbnRhdGlvbnMgb2YgUGlwcGVuZ2VyIGFuZCBGZnQsIHdoaWNoIG1heVxuICogb3IgbWF5IG5vdCBiZSBiYWNrZWQgbXVsdGlwbGUgd2FzbSB3b3JrZXJzIG9uIHdoaWNoIHRoZXkgZXhlY3V0ZSB0aGVpciBhbGdvcml0aG1zLlxuICpcbiAqIFRoZSBzaW5nbGUgZ2l2ZW4gd29ya2VyLCBtdXN0IGJlIHRoZSB3b3JrZXIgd2l0aGluIHdoaWNoIGFueSBwcm9vZiBnZW5lcmF0b3JzIHdpbGwgaW5pdGlhbGlzZSB0aGVpciBwcm92aW5nIGtleXMsXG4gKiBhbmQgbXVzdCBiZSB0aGUgd29ya2VyIHdpdGhpbiB3aGljaCB0aGUgZ2l2ZW4gYHByb3ZlclB0cmAgZXhpc3RzLlxuICpcbiAqIFRoZSBgZ2V0V29ya2VyKClgIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBieSBwcm9vZiBnZW5lcmF0aW9uIGNvbXBvbmVudHMgdG8gcmV0dXJuIHRoZSB3b3JrZXIgb24gd2hpY2ggdG8gbWFrZSB0aGVpclxuICogYXBwcm9wcmlhdGUgd2FzbUNhbGxzLlxuICpcbiAqIEdpdmVuIHRoYXQgdGhlIEZmdCBpbXBsZW1lbnRhdGlvbiBpcyBwcm92aWRlZCBpbiB0aGUgY29uc3RydWN0b3IsIGEgUHJvdmVyIGlzIGZpeGVkIHRvIHdoYXRldmVyIGNpcmN1aXQgc2l6ZSB0aGVcbiAqIEZmdCBpbXBsZW1lbnRhdGlvbiB3YXMgaW5pdGlhbGlzZWQgd2l0aC5cbiAqL1xuY2xhc3MgUHJvdmVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3YXNtLCBwaXBwZW5nZXIsIGZmdCwgY2FsbFByZWZpeCA9ICcnKSB7XG4gICAgICAgIHRoaXMud2FzbSA9IHdhc207XG4gICAgICAgIHRoaXMucGlwcGVuZ2VyID0gcGlwcGVuZ2VyO1xuICAgICAgICB0aGlzLmZmdCA9IGZmdDtcbiAgICAgICAgdGhpcy5jYWxsUHJlZml4ID0gY2FsbFByZWZpeDtcbiAgICB9XG4gICAgZ2V0V29ya2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53YXNtO1xuICAgIH1cbiAgICBhc3luYyBwcm92ZXJDYWxsKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMud2FzbS5jYWxsKHRoaXMuY2FsbFByZWZpeCArIG5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVQcm9vZihwcm92ZXJQdHIpIHtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLmFjcXVpcmUoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNpcmN1aXRTaXplID0gYXdhaXQgdGhpcy5wcm92ZXJDYWxsKCdwcm92ZXJfZ2V0X2NpcmN1aXRfc2l6ZScsIHByb3ZlclB0cik7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IG5ldyBUaW1lcignZW50ZXIgY3JlYXRlUHJvb2YnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvdmVyQ2FsbCgncHJvdmVyX2V4ZWN1dGVfcHJlYW1ibGVfcm91bmQnLCBwcm92ZXJQdHIpO1xuICAgICAgICAgICAgdGltZXIubWFyaygncHJlYW1ibGUgZW5kJyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NQcm92ZXJRdWV1ZShwcm92ZXJQdHIsIGNpcmN1aXRTaXplKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ2ZpcnN0IHJvdW5kIHN0YXJ0Jyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9leGVjdXRlX2ZpcnN0X3JvdW5kJywgcHJvdmVyUHRyKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ2ZpcnN0IHJvdW5kIGVuZCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzUHJvdmVyUXVldWUocHJvdmVyUHRyLCBjaXJjdWl0U2l6ZSk7XG4gICAgICAgICAgICB0aW1lci5tYXJrKCdzZWNvbmQgcm91bmQgc3RhcnQnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvdmVyQ2FsbCgncHJvdmVyX2V4ZWN1dGVfc2Vjb25kX3JvdW5kJywgcHJvdmVyUHRyKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ3NlY29uZCByb3VuZCBlbmQnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc1Byb3ZlclF1ZXVlKHByb3ZlclB0ciwgY2lyY3VpdFNpemUpO1xuICAgICAgICAgICAgdGltZXIubWFyaygndGhpcmQgcm91bmQgc3RhcnQnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvdmVyQ2FsbCgncHJvdmVyX2V4ZWN1dGVfdGhpcmRfcm91bmQnLCBwcm92ZXJQdHIpO1xuICAgICAgICAgICAgdGltZXIubWFyaygndGhpcmQgcm91bmQgZW5kJyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NQcm92ZXJRdWV1ZShwcm92ZXJQdHIsIGNpcmN1aXRTaXplKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ2ZvdXJ0aCByb3VuZCBzdGFydCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm92ZXJDYWxsKCdwcm92ZXJfZXhlY3V0ZV9mb3VydGhfcm91bmQnLCBwcm92ZXJQdHIpO1xuICAgICAgICAgICAgdGltZXIubWFyaygnZm91cnRoIHJvdW5kIGVuZCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzUHJvdmVyUXVldWUocHJvdmVyUHRyLCBjaXJjdWl0U2l6ZSk7XG4gICAgICAgICAgICB0aW1lci5tYXJrKCdmaWZ0aCByb3VuZCBzdGFydCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm92ZXJDYWxsKCdwcm92ZXJfZXhlY3V0ZV9maWZ0aF9yb3VuZCcsIHByb3ZlclB0cik7XG4gICAgICAgICAgICB0aW1lci5tYXJrKCdmaWZ0aCByb3VuZCBlbmQnKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ3NpeHRoIHJvdW5kIHN0YXJ0Jyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9leGVjdXRlX3NpeHRoX3JvdW5kJywgcHJvdmVyUHRyKTtcbiAgICAgICAgICAgIHRpbWVyLm1hcmsoJ3NpeHRoIHJvdW5kIGVuZCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzUHJvdmVyUXVldWUocHJvdmVyUHRyLCBjaXJjdWl0U2l6ZSk7XG4gICAgICAgICAgICB0aW1lci5tYXJrKCdkb25lJyk7XG4gICAgICAgICAgICBjb25zdCBwcm9vZlNpemUgPSBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9leHBvcnRfcHJvb2YnLCBwcm92ZXJQdHIsIDApO1xuICAgICAgICAgICAgY29uc3QgcHJvb2ZQdHIgPSBCdWZmZXIuZnJvbShhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgNCkpLnJlYWRVSW50MzJMRSgwKTtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkocHJvb2ZQdHIsIHByb29mUHRyICsgcHJvb2ZTaXplKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhc20ucmVsZWFzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHByb2Nlc3NQcm92ZXJRdWV1ZShwcm92ZXJQdHIsIGNpcmN1aXRTaXplKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvdmVyQ2FsbCgncHJvdmVyX2dldF93b3JrX3F1ZXVlX2l0ZW1faW5mbycsIHByb3ZlclB0ciwgMCk7XG4gICAgICAgIGNvbnN0IGpvYkluZm8gPSBCdWZmZXIuZnJvbShhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMTIpKTtcbiAgICAgICAgY29uc3Qgc2NhbGFySm9icyA9IGpvYkluZm8ucmVhZFVJbnQzMkxFKDApO1xuICAgICAgICBjb25zdCBmZnRKb2JzID0gam9iSW5mby5yZWFkVUludDMyTEUoNCk7XG4gICAgICAgIGNvbnN0IGlmZnRKb2JzID0gam9iSW5mby5yZWFkVUludDMyTEUoOCk7XG4gICAgICAgIGRlYnVnKGBzdGFydGluZyBqb2JzIHNjYWxhcnM6JHtzY2FsYXJKb2JzfSBmZnRzOiR7ZmZ0Sm9ic30gaWZmdHM6JHtpZmZ0Sm9ic31gKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsYXJKb2JzOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxhcnNQdHIgPSBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9nZXRfc2NhbGFyX211bHRpcGxpY2F0aW9uX2RhdGEnLCBwcm92ZXJQdHIsIGkpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGFycyA9IGF3YWl0IHRoaXMud2FzbS5zbGljZU1lbW9yeShzY2FsYXJzUHRyLCBzY2FsYXJzUHRyICsgY2lyY3VpdFNpemUgKiAzMik7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBpcHBlbmdlci5waXBwZW5nZXJVbnNhZmUoc2NhbGFycywgMCwgY2lyY3VpdFNpemUpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKHJlc3VsdCwgMCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9wdXRfc2NhbGFyX211bHRpcGxpY2F0aW9uX2RhdGEnLCBwcm92ZXJQdHIsIDAsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpvYnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmZnRKb2JzOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZWZmc1B0ciA9IGF3YWl0IHRoaXMucHJvdmVyQ2FsbCgncHJvdmVyX2dldF9mZnRfZGF0YScsIHByb3ZlclB0ciwgMCwgaSk7XG4gICAgICAgICAgICBjb25zdCBjb2VmZmljaWVudHMgPSBhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkoY29lZmZzUHRyLCBjb2VmZnNQdHIgKyBjaXJjdWl0U2l6ZSAqIDMyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnN0YW50ID0gYXdhaXQgdGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKTtcbiAgICAgICAgICAgIGpvYnMucHVzaCh7IGNvZWZmaWNpZW50cywgY29uc3RhbnQsIGludmVyc2U6IGZhbHNlLCBpIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWZmdEpvYnM7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY29lZmZzUHRyID0gYXdhaXQgdGhpcy5wcm92ZXJDYWxsKCdwcm92ZXJfZ2V0X2lmZnRfZGF0YScsIHByb3ZlclB0ciwgaSk7XG4gICAgICAgICAgICBjb25zdCBjb2VmZmljaWVudHMgPSBhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkoY29lZmZzUHRyLCBjb2VmZnNQdHIgKyBjaXJjdWl0U2l6ZSAqIDMyKTtcbiAgICAgICAgICAgIGpvYnMucHVzaCh7IGNvZWZmaWNpZW50cywgaW52ZXJzZTogdHJ1ZSwgaSB9KTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChqb2JzLm1hcCgoeyBpbnZlcnNlLCBjb2VmZmljaWVudHMsIGNvbnN0YW50LCBpIH0pID0+IGludmVyc2VcbiAgICAgICAgICAgID8gdGhpcy5kb0lmZnQocHJvdmVyUHRyLCBpLCBjaXJjdWl0U2l6ZSwgY29lZmZpY2llbnRzKVxuICAgICAgICAgICAgOiB0aGlzLmRvRmZ0KHByb3ZlclB0ciwgaSwgY2lyY3VpdFNpemUsIGNvZWZmaWNpZW50cywgY29uc3RhbnQpKSk7XG4gICAgfVxuICAgIGFzeW5jIGRvRmZ0KHByb3ZlclB0ciwgaSwgY2lyY3VpdFNpemUsIGNvZWZmaWNpZW50cywgY29uc3RhbnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5mZnQuZmZ0KGNvZWZmaWNpZW50cywgY29uc3RhbnQpO1xuICAgICAgICBjb25zdCByZXN1bHRQdHIgPSBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJtYWxsb2MnLCBjaXJjdWl0U2l6ZSAqIDMyKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKHJlc3VsdCwgcmVzdWx0UHRyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm92ZXJDYWxsKCdwcm92ZXJfcHV0X2ZmdF9kYXRhJywgcHJvdmVyUHRyLCByZXN1bHRQdHIsIGkpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJmcmVlJywgcmVzdWx0UHRyKTtcbiAgICB9XG4gICAgYXN5bmMgZG9JZmZ0KHByb3ZlclB0ciwgaSwgY2lyY3VpdFNpemUsIGNvZWZmaWNpZW50cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmZmdC5pZmZ0KGNvZWZmaWNpZW50cyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdFB0ciA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIGNpcmN1aXRTaXplICogMzIpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAocmVzdWx0LCByZXN1bHRQdHIpO1xuICAgICAgICBhd2FpdCB0aGlzLnByb3ZlckNhbGwoJ3Byb3Zlcl9wdXRfaWZmdF9kYXRhJywgcHJvdmVyUHRyLCByZXN1bHRQdHIsIGkpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJmcmVlJywgcmVzdWx0UHRyKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3ZlciA9IFByb3Zlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNISnZkbVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDJOc2FXVnVkRjl3Y205dlpuTXZjSEp2ZG1WeUwzQnliM1psY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4dFEwRkJPRU03UVVGTE9VTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJRU3gxUWtGQmFVSXNSVUZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVVM1F5eE5RVUZOTEV0QlFVczdTVUZIVkN4WlFVRlpMRWRCUVZjN1VVRkRja0lzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFnc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZGVFN4SlFVRkpMRU5CUVVNc1IwRkJWenRSUVVOeVFpeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRMME1zUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnl4UlFVRlJMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRE4wSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUTNCRExFTkJRVU03UTBGRFJqdEJRVVZFT3pzN096czdPenM3T3pzN1IwRlpSenRCUVVOSUxFMUJRV0VzVFVGQlRUdEpRVU5xUWl4WlFVTlZMRWxCUVRKRExFVkJRek5ETEZOQlFXOUNMRVZCUTNCQ0xFZEJRVkVzUlVGRFVpeGhRVUZoTEVWQlFVVTdVVUZJWml4VFFVRkpMRWRCUVVvc1NVRkJTU3hEUVVGMVF6dFJRVU16UXl4alFVRlRMRWRCUVZRc1UwRkJVeXhEUVVGWE8xRkJRM0JDTEZGQlFVY3NSMEZCU0N4SFFVRkhMRU5CUVVzN1VVRkRVaXhsUVVGVkxFZEJRVllzVlVGQlZTeERRVUZMTzBsQlEzUkNMRU5CUVVNN1NVRkZSeXhUUVVGVE8xRkJRMlFzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCTUVJc1EwRkJRenRKUVVONlF5eERRVUZETzBsQlJVOHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGWkxFVkJRVVVzUjBGQlJ5eEpRVUZYTzFGQlEyNUVMRTlCUVU4c1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUXk5RUxFTkJRVU03U1VGRlRTeExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRk5CUVdsQ08xRkJRM2hETEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU14UWl4SlFVRkpPMWxCUTBZc1RVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUTJoR0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdXVUZETjBNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEN0Q1FVRXJRaXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzFsQlEyeEZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdXVUZETTBJc1RVRkJUU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1UwRkJVeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFsQlEzUkVMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRaUVVOb1F5eE5RVUZOTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc05FSkJRVFJDTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRMMFFzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFsQlF6bENMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dFpRVU4wUkN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNN1dVRkRha01zVFVGQlRTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRFpDUVVFMlFpeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUTJoRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFpRVU12UWl4TlFVRk5MRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRGRFUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMWxCUTJoRExFMUJRVTBzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl3MFFrRkJORUlzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTXZSQ3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03V1VGRE9VSXNUVUZCVFN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRM1JFTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhOUVVGTkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdXVUZEYUVVc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xbEJReTlDTEUxQlFVMHNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZOQlFWTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOMFJDeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdXVUZEYUVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETERSQ1FVRTBRaXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzFsQlF5OUVMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRaUVVNNVFpeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdXVUZEYUVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETERSQ1FVRTBRaXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzFsQlF5OUVMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRaUVVNNVFpeE5RVUZOTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFRRVUZUTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRkRVFzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVOdVFpeE5RVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZEZMRTFCUVUwc1VVRkJVU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYUVZc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnBHTzJkQ1FVRlRPMWxCUTFJc1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMU5CUXpOQ08wbEJRMGdzUTBGQlF6dEpRVVZQTEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFRRVUZwUWl4RlFVRkZMRmRCUVcxQ08xRkJRM0pGTEUxQlFVMHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhwUTBGQmFVTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRrVXNUVUZCVFN4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJoRkxFMUJRVTBzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjRReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSWHBETEV0QlFVc3NRMEZCUXl4NVFrRkJlVUlzVlVGQlZTeFRRVUZUTEU5QlFVOHNWVUZCVlN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJSUzlGTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkRia01zVFVGQlRTeFZRVUZWTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExIVkRRVUYxUXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5vUnl4TlFVRk5MRTlCUVU4c1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1JVRkJSU3hWUVVGVkxFZEJRVWNzVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTNaR0xFMUJRVTBzVFVGQlRTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVNM1JTeE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXhReXhOUVVGTkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNkVU5CUVhWRExFVkJRVVVzVTBGQlV5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOcVJqdFJRVVZFTEUxQlFVMHNTVUZCU1N4SFFVRjFSaXhGUVVGRkxFTkJRVU03VVVGRGNFY3NTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEU5QlFVOHNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVOb1F5eE5RVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9SaXhOUVVGTkxGbEJRVmtzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGTkJRVk1zUlVGQlJTeFRRVUZUTEVkQlFVY3NWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRekZHTEUxQlFVMHNVVUZCVVN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM0JFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3haUVVGWkxFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU14UkR0UlFVVkVMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGFrTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEhOQ1FVRnpRaXhGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTVSU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGTkJRVk1zUlVGQlJTeFRRVUZUTEVkQlFVY3NWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRekZHTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3haUVVGWkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJReTlETzFGQlJVUXNUVUZCVFN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVObUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSU3haUVVGWkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkRiRVFzVDBGQlR6dFpRVU5NTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRmxCUVZrc1EwRkJRenRaUVVOMFJDeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eEZRVUZGTEZkQlFWY3NSVUZCUlN4WlFVRlpMRVZCUVVVc1VVRkJVeXhEUVVGRExFTkJRMjVGTEVOQlEwWXNRMEZCUXp0SlFVTktMRU5CUVVNN1NVRkZUeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVU5xUWl4VFFVRnBRaXhGUVVOcVFpeERRVUZUTEVWQlExUXNWMEZCYlVJc1JVRkRia0lzV1VGQmQwSXNSVUZEZUVJc1VVRkJiMEk3VVVGRmNFSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRE1VUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1YwRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzSkZMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRMnhFTEUxQlFVMHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4VFFVRlRMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzUkZMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJRelZETEVOQlFVTTdTVUZGVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRV2xDTEVWQlFVVXNRMEZCVXl4RlFVRkZMRmRCUVcxQ0xFVkJRVVVzV1VGQmQwSTdVVUZET1VZc1RVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU5xUkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hYUVVGWExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY2tVc1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGJFUXNUVUZCVFN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExITkNRVUZ6UWl4RlFVRkZMRk5CUVZNc1JVRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtVc1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRE5VTXNRMEZCUXp0RFFVTkdPMEZCY2toRUxIZENRWEZJUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/prover.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/unrolled_prover.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/unrolled_prover.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnrolledProver = void 0;\nconst prover_1 = __webpack_require__(/*! ./prover */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/prover.js\");\n/**\n * An UnrolledProver is used for proofs that are verified inside a another snark (e.g. the rollup).\n */\nclass UnrolledProver extends prover_1.Prover {\n    constructor(wasm, pippenger, fft) {\n        super(wasm, pippenger, fft, 'unrolled_');\n    }\n}\nexports.UnrolledProver = UnrolledProver;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5yb2xsZWRfcHJvdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsaWVudF9wcm9vZnMvcHJvdmVyL3Vucm9sbGVkX3Byb3Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxxQ0FBa0M7QUFFbEM7O0dBRUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxlQUFNO0lBQ3hDLFlBQVksSUFBMkMsRUFBRSxTQUFvQixFQUFFLEdBQVE7UUFDckYsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDRjtBQUpELHdDQUlDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jbGllbnRfcHJvb2ZzL3Byb3Zlci91bnJvbGxlZF9wcm92ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGlCQUFpQixtQkFBTyxDQUFDLDRGQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NsaWVudF9wcm9vZnMvcHJvdmVyL3Vucm9sbGVkX3Byb3Zlci5qcz9mN2U2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbnJvbGxlZFByb3ZlciA9IHZvaWQgMDtcbmNvbnN0IHByb3Zlcl8xID0gcmVxdWlyZShcIi4vcHJvdmVyXCIpO1xuLyoqXG4gKiBBbiBVbnJvbGxlZFByb3ZlciBpcyB1c2VkIGZvciBwcm9vZnMgdGhhdCBhcmUgdmVyaWZpZWQgaW5zaWRlIGEgYW5vdGhlciBzbmFyayAoZS5nLiB0aGUgcm9sbHVwKS5cbiAqL1xuY2xhc3MgVW5yb2xsZWRQcm92ZXIgZXh0ZW5kcyBwcm92ZXJfMS5Qcm92ZXIge1xuICAgIGNvbnN0cnVjdG9yKHdhc20sIHBpcHBlbmdlciwgZmZ0KSB7XG4gICAgICAgIHN1cGVyKHdhc20sIHBpcHBlbmdlciwgZmZ0LCAndW5yb2xsZWRfJyk7XG4gICAgfVxufVxuZXhwb3J0cy5VbnJvbGxlZFByb3ZlciA9IFVucm9sbGVkUHJvdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZFc1eWIyeHNaV1JmY0hKdmRtVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMMk5zYVdWdWRGOXdjbTl2Wm5NdmNISnZkbVZ5TDNWdWNtOXNiR1ZrWDNCeWIzWmxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkhRU3h4UTBGQmEwTTdRVUZGYkVNN08wZEJSVWM3UVVGRFNDeE5RVUZoTEdOQlFXVXNVMEZCVVN4bFFVRk5PMGxCUTNoRExGbEJRVmtzU1VGQk1rTXNSVUZCUlN4VFFVRnZRaXhGUVVGRkxFZEJRVkU3VVVGRGNrWXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzUjBGQlJ5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03UTBGRFJqdEJRVXBFTEhkRFFVbERJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/client_proofs/prover/unrolled_prover.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crs/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crs/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Crs = void 0;\nconst iso_fetch_1 = __webpack_require__(/*! ../iso_fetch */ \"./node_modules/@noir-lang/barretenberg/dest/iso_fetch/index.js\");\nclass Crs {\n    constructor(numPoints) {\n        this.numPoints = numPoints;\n    }\n    async download() {\n        const g1Start = 28;\n        const g1End = g1Start + this.numPoints * 64 - 1;\n        // Download required range of data.\n        const response = await (0, iso_fetch_1.fetch)('https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/sealed/transcript00.dat', {\n            headers: {\n                Range: `bytes=${g1Start}-${g1End}`,\n            },\n        });\n        this.data = new Uint8Array(await response.arrayBuffer());\n        await this.downloadG2Data();\n    }\n    async downloadG2Data() {\n        const g2Start = 28 + 5040000 * 64;\n        const g2End = g2Start + 128 - 1;\n        const response2 = await (0, iso_fetch_1.fetch)('https://aztec-ignition.s3.amazonaws.com/MAIN%20IGNITION/sealed/transcript00.dat', {\n            headers: {\n                Range: `bytes=${g2Start}-${g2End}`,\n            },\n        });\n        this.g2Data = new Uint8Array(await response2.arrayBuffer());\n    }\n    getData() {\n        return this.data;\n    }\n    getG2Data() {\n        return this.g2Data;\n    }\n}\nexports.Crs = Crs;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3JzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRDQUFxQztBQUVyQyxNQUFhLEdBQUc7SUFJZCxZQUE0QixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQUcsQ0FBQztJQUVqRCxLQUFLLENBQUMsUUFBUTtRQUNaLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixNQUFNLEtBQUssR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWhELG1DQUFtQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsaUJBQUssRUFBQyxpRkFBaUYsRUFBRTtZQUM5RyxPQUFPLEVBQUU7Z0JBQ1AsS0FBSyxFQUFFLFNBQVMsT0FBTyxJQUFJLEtBQUssRUFBRTthQUNuQztTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUV6RCxNQUFNLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDbEIsTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFaEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFBLGlCQUFLLEVBQUMsaUZBQWlGLEVBQUU7WUFDL0csT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxTQUFTLE9BQU8sSUFBSSxLQUFLLEVBQUU7YUFDbkM7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBMUNELGtCQTBDQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLG9CQUFvQixtQkFBTyxDQUFDLG9GQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVEsR0FBRyxNQUFNO0FBQ2pELGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRLEdBQUcsTUFBTTtBQUNqRCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY3JzL2luZGV4LmpzP2I5ODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNycyA9IHZvaWQgMDtcbmNvbnN0IGlzb19mZXRjaF8xID0gcmVxdWlyZShcIi4uL2lzb19mZXRjaFwiKTtcbmNsYXNzIENycyB7XG4gICAgY29uc3RydWN0b3IobnVtUG9pbnRzKSB7XG4gICAgICAgIHRoaXMubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xuICAgIH1cbiAgICBhc3luYyBkb3dubG9hZCgpIHtcbiAgICAgICAgY29uc3QgZzFTdGFydCA9IDI4O1xuICAgICAgICBjb25zdCBnMUVuZCA9IGcxU3RhcnQgKyB0aGlzLm51bVBvaW50cyAqIDY0IC0gMTtcbiAgICAgICAgLy8gRG93bmxvYWQgcmVxdWlyZWQgcmFuZ2Ugb2YgZGF0YS5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgaXNvX2ZldGNoXzEuZmV0Y2gpKCdodHRwczovL2F6dGVjLWlnbml0aW9uLnMzLmFtYXpvbmF3cy5jb20vTUFJTiUyMElHTklUSU9OL3NlYWxlZC90cmFuc2NyaXB0MDAuZGF0Jywge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFJhbmdlOiBgYnl0ZXM9JHtnMVN0YXJ0fS0ke2cxRW5kfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZG93bmxvYWRHMkRhdGEoKTtcbiAgICB9XG4gICAgYXN5bmMgZG93bmxvYWRHMkRhdGEoKSB7XG4gICAgICAgIGNvbnN0IGcyU3RhcnQgPSAyOCArIDUwNDAwMDAgKiA2NDtcbiAgICAgICAgY29uc3QgZzJFbmQgPSBnMlN0YXJ0ICsgMTI4IC0gMTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgKDAsIGlzb19mZXRjaF8xLmZldGNoKSgnaHR0cHM6Ly9henRlYy1pZ25pdGlvbi5zMy5hbWF6b25hd3MuY29tL01BSU4lMjBJR05JVElPTi9zZWFsZWQvdHJhbnNjcmlwdDAwLmRhdCcsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBSYW5nZTogYGJ5dGVzPSR7ZzJTdGFydH0tJHtnMkVuZH1gLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZzJEYXRhID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UyLmFycmF5QnVmZmVyKCkpO1xuICAgIH1cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cbiAgICBnZXRHMkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmcyRGF0YTtcbiAgICB9XG59XG5leHBvcnRzLkNycyA9IENycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZM0p6TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMRFJEUVVGeFF6dEJRVVZ5UXl4TlFVRmhMRWRCUVVjN1NVRkpaQ3haUVVFMFFpeFRRVUZwUWp0UlFVRnFRaXhqUVVGVExFZEJRVlFzVTBGQlV5eERRVUZSTzBsQlFVY3NRMEZCUXp0SlFVVnFSQ3hMUVVGTExFTkJRVU1zVVVGQlVUdFJRVU5hTEUxQlFVMHNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOdVFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUldoRUxHMURRVUZ0UXp0UlFVTnVReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVsQlFVRXNhVUpCUVVzc1JVRkJReXhwUmtGQmFVWXNSVUZCUlR0WlFVTTVSeXhQUVVGUExFVkJRVVU3WjBKQlExQXNTMEZCU3l4RlFVRkZMRk5CUVZNc1QwRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJUdGhRVU51UXp0VFFVTkdMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1RVRkJUU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVVjZSQ3hOUVVGTkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0SlFVTTVRaXhEUVVGRE8wbEJSVVFzUzBGQlN5eERRVUZETEdOQlFXTTdVVUZEYkVJc1RVRkJUU3hQUVVGUExFZEJRVWNzUlVGQlJTeEhRVUZITEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRiRU1zVFVGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRmFFTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hKUVVGQkxHbENRVUZMTEVWQlFVTXNhVVpCUVdsR0xFVkJRVVU3V1VGREwwY3NUMEZCVHl4RlFVRkZPMmRDUVVOUUxFdEJRVXNzUlVGQlJTeFRRVUZUTEU5QlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVN1lVRkRia003VTBGRFJpeERRVUZETEVOQlFVTTdVVUZGU0N4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzVlVGQlZTeERRVUZETEUxQlFVMHNVMEZCVXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRE9VUXNRMEZCUXp0SlFVVkVMRTlCUVU4N1VVRkRUQ3hQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEYmtJc1EwRkJRenRKUVVWRUxGTkJRVk03VVVGRFVDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5HTzBGQk1VTkVMR3RDUVRCRFF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crs/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/aes128/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/aes128/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Aes128 = void 0;\nclass Aes128 {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    encryptBufferCBC(data, iv, key) {\n        const rawLength = data.length;\n        const numPaddingBytes = rawLength % 16 != 0 ? 16 - (rawLength % 16) : 0;\n        const paddingBuffer = Buffer.alloc(numPaddingBytes);\n        // input num bytes needs to be a multiple of 16\n        // node uses PKCS#7-Padding scheme, where padding byte value = the number of padding bytes\n        if (numPaddingBytes != 0) {\n            paddingBuffer.fill(numPaddingBytes);\n        }\n        const input = Buffer.concat([data, paddingBuffer]);\n        const mem = this.wasm.call('bbmalloc', input.length + key.length + iv.length + input.length);\n        this.wasm.transferToHeap(input, mem);\n        this.wasm.transferToHeap(iv, mem + input.length);\n        this.wasm.transferToHeap(key, mem + input.length + iv.length);\n        this.wasm.call('aes__encrypt_buffer_cbc', mem, mem + input.length, mem + input.length + iv.length, input.length, mem + input.length + iv.length + key.length);\n        const result = Buffer.from(this.wasm.sliceMemory(mem + input.length + key.length + iv.length, mem + input.length + key.length + iv.length + input.length));\n        this.wasm.call('bbfree', mem);\n        return result;\n    }\n    decryptBufferCBC(data, iv, key) {\n        const mem = this.wasm.call('bbmalloc', data.length + key.length + iv.length + data.length);\n        this.wasm.transferToHeap(data, mem);\n        this.wasm.transferToHeap(iv, mem + data.length);\n        this.wasm.transferToHeap(key, mem + data.length + iv.length);\n        this.wasm.call('aes__decrypt_buffer_cbc', mem, mem + data.length, mem + data.length + iv.length, data.length, mem + data.length + iv.length + key.length);\n        const result = Buffer.from(this.wasm.sliceMemory(mem + data.length + key.length + iv.length, mem + data.length + key.length + iv.length + data.length));\n        this.wasm.call('bbfree', mem);\n        return result;\n    }\n}\nexports.Aes128 = Aes128;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL2FlczEyOC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLE1BQU07SUFDakIsWUFBb0IsSUFBc0I7UUFBdEIsU0FBSSxHQUFKLElBQUksQ0FBa0I7SUFBRyxDQUFDO0lBRXZDLGdCQUFnQixDQUFDLElBQWdCLEVBQUUsRUFBYyxFQUFFLEdBQWU7UUFDdkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLGVBQWUsR0FBRyxTQUFTLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRCwrQ0FBK0M7UUFDL0MsMEZBQTBGO1FBQzFGLElBQUksZUFBZSxJQUFJLENBQUMsRUFBRTtZQUN4QixhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsS0FB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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/aes128/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/blake2s/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/blake2s/index.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Blake2s = void 0;\nclass Blake2s {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    hashToField(data) {\n        const mem = this.wasm.call('bbmalloc', data.length);\n        this.wasm.transferToHeap(data, mem);\n        this.wasm.call('blake2s_to_field', mem, data.length, 0);\n        this.wasm.call('bbfree', mem);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n}\nexports.Blake2s = Blake2s;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL2JsYWtlMnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsTUFBYSxPQUFPO0lBQ2xCLFlBQW9CLElBQXNCO1FBQXRCLFNBQUksR0FBSixJQUFJLENBQWtCO0lBQUcsQ0FBQztJQUV2QyxXQUFXLENBQUMsSUFBZ0I7UUFDakMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0Y7QUFWRCwwQkFVQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vYmxha2Uycy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZTtBQUNmLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vYmxha2Uycy9pbmRleC5qcz82M2U5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CbGFrZTJzID0gdm9pZCAwO1xuY2xhc3MgQmxha2UycyB7XG4gICAgY29uc3RydWN0b3Iod2FzbSkge1xuICAgICAgICB0aGlzLndhc20gPSB3YXNtO1xuICAgIH1cbiAgICBoYXNoVG9GaWVsZChkYXRhKSB7XG4gICAgICAgIGNvbnN0IG1lbSA9IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKGRhdGEsIG1lbSk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdibGFrZTJzX3RvX2ZpZWxkJywgbWVtLCBkYXRhLmxlbmd0aCwgMCk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdiYmZyZWUnLCBtZW0pO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKSk7XG4gICAgfVxufVxuZXhwb3J0cy5CbGFrZTJzID0gQmxha2Uycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WTNKNWNIUnZMMkpzWVd0bE1uTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUlVFc1RVRkJZU3hQUVVGUE8wbEJRMnhDTEZsQlFXOUNMRWxCUVhOQ08xRkJRWFJDTEZOQlFVa3NSMEZCU2l4SlFVRkpMRU5CUVd0Q08wbEJRVWNzUTBGQlF6dEpRVVYyUXl4WFFVRlhMRU5CUVVNc1NVRkJaMEk3VVVGRGFrTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU53UkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZUVRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRemxDTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU51UkN4RFFVRkRPME5CUTBZN1FVRldSQ3d3UWtGVlF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/blake2s/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./aes128 */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/aes128/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./blake2s */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/blake2s/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pedersen */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./random */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/random/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./schnorr */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./sha256 */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/sha256/index.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3J5cHRvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUF5QjtBQUN6Qix5REFBMEI7QUFDMUIsMERBQTJCO0FBQzNCLHdEQUF5QjtBQUN6Qix5REFBMEI7QUFDMUIsd0RBQXlCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsb0ZBQVU7QUFDNUMsMEJBQTBCLG1CQUFPLENBQUMsc0ZBQVc7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMsd0ZBQVk7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMsb0ZBQVU7QUFDNUMsMEJBQTBCLG1CQUFPLENBQUMsc0ZBQVc7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMsb0ZBQVU7QUFDNUMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NyeXB0by9pbmRleC5qcz9mMDI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vYWVzMTI4XCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vYmxha2Uyc1wiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3BlZGVyc2VuXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vcmFuZG9tXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vc2Nobm9yclwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3NoYTI1NlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12WTNKNWNIUnZMMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxIZEVRVUY1UWp0QlFVTjZRaXg1UkVGQk1FSTdRVUZETVVJc01FUkJRVEpDTzBGQlF6TkNMSGRFUVVGNVFqdEJRVU42UWl4NVJFRkJNRUk3UVVGRE1VSXNkMFJCUVhsQ0luMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pedersen */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pedersen.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pooled_pedersen */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pooled_pedersen.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./single_pedersen */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/single_pedersen.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3BlZGVyc2VuL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUEyQjtBQUMzQixpRUFBa0M7QUFDbEMsaUVBQWtDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vcGVkZXJzZW4vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsMkZBQVk7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMseUdBQW1CO0FBQ3JELDBCQUEwQixtQkFBTyxDQUFDLHlHQUFtQjtBQUNyRCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY3J5cHRvL3BlZGVyc2VuL2luZGV4LmpzPzdmOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9wZWRlcnNlblwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3Bvb2xlZF9wZWRlcnNlblwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3NpbmdsZV9wZWRlcnNlblwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkzSjVjSFJ2TDNCbFpHVnljMlZ1TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMREJFUVVFeVFqdEJRVU16UWl4cFJVRkJhME03UVVGRGJFTXNhVVZCUVd0REluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pedersen.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pedersen.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3BlZGVyc2VuL3BlZGVyc2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vcGVkZXJzZW4vcGVkZXJzZW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NyeXB0by9wZWRlcnNlbi9wZWRlcnNlbi5qcz85ZDM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0dWa1pYSnpaVzR1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WTNKNWNIUnZMM0JsWkdWeWMyVnVMM0JsWkdWeWMyVnVMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUlpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pedersen.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pooled_pedersen.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pooled_pedersen.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PooledPedersen = void 0;\nconst single_pedersen_1 = __webpack_require__(/*! ./single_pedersen */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/single_pedersen.js\");\n// import createDebug from 'debug';\n// const debug = createDebug('bb:pooled_pedersen');\n/**\n * Multi-threaded implementation of pedersen.\n */\nclass PooledPedersen extends single_pedersen_1.SinglePedersen {\n    /**\n     * @param wasm Synchronous functions will use use this wasm directly on the calling thread.\n     * @param pool Asynchronous functions use this pool of workers to multi-thread processing.\n     */\n    constructor(wasm, pool) {\n        super(wasm);\n        this.pool = [];\n        this.pool = pool.workers.map(w => new single_pedersen_1.SinglePedersen(wasm, w));\n    }\n    async init() {\n        await Promise.all(this.pool.map(p => p.init()));\n    }\n    async hashToTree(values) {\n        const isPowerOf2 = (v) => v && !(v & (v - 1));\n        if (!isPowerOf2(values.length)) {\n            throw new Error('PooledPedersen::hashValuesToTree can only handle powers of 2.');\n        }\n        const numWorkers = Math.min(values.length / 2, this.pool.length);\n        const workers = this.pool.slice(0, Math.max(numWorkers, 1));\n        const numPerThread = values.length / workers.length;\n        const results = await Promise.all(workers.map((pedersen, i) => pedersen.hashToTree(values.slice(i * numPerThread, (i + 1) * numPerThread))));\n        const sliced = results.map(hashes => {\n            const treeHashes = [];\n            for (let i = numPerThread, j = 0; i >= 1; j += i, i /= 2) {\n                treeHashes.push(hashes.slice(j, j + i));\n            }\n            return treeHashes;\n        });\n        const flattened = sliced[0];\n        for (let i = 1; i < sliced.length; ++i) {\n            for (let j = 0; j < sliced[i].length; ++j) {\n                flattened[j] = [...flattened[j], ...sliced[i][j]];\n            }\n        }\n        while (flattened[flattened.length - 1].length > 1) {\n            const lastRow = flattened[flattened.length - 1];\n            const newRow = [];\n            for (let i = 0; i < lastRow.length; i += 2) {\n                newRow[i / 2] = this.pool[0].compress(lastRow[i], lastRow[i + 1]);\n            }\n            flattened.push(newRow);\n        }\n        return flattened.flat();\n    }\n}\nexports.PooledPedersen = PooledPedersen;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbGVkX3BlZGVyc2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NyeXB0by9wZWRlcnNlbi9wb29sZWRfcGVkZXJzZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdURBQW1EO0FBQ25ELG1DQUFtQztBQUVuQyxtREFBbUQ7QUFFbkQ7O0dBRUc7QUFDSCxNQUFhLGNBQWUsU0FBUSxnQ0FBYztJQUdoRDs7O09BR0c7SUFDSCxZQUFZLElBQXNCLEVBQUUsSUFBZ0I7UUFDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBUFAsU0FBSSxHQUFxQixFQUFFLENBQUM7UUFRakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDZixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQWdCO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQztTQUNsRjtRQUVELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxD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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/pooled_pedersen.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/single_pedersen.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/single_pedersen.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SinglePedersen = void 0;\nconst serialize_1 = __webpack_require__(/*! ../../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\n/**\n * Single threaded implementation of pedersen.\n */\nclass SinglePedersen {\n    /**\n     * Long running functions can execute on a worker. If none is provided, call the wasm on the calling thread.\n     *\n     * @param wasm Synchronous functions will use use this wasm directly on the calling thread.\n     * @param worker Asynchronous functions execute on this worker, preventing blocking the calling thread.\n     */\n    constructor(wasm, worker = wasm) {\n        this.wasm = wasm;\n        this.worker = worker;\n    }\n    async init() {\n        this.wasm.call('pedersen__init');\n        await this.worker.call('pedersen__init');\n    }\n    compress(lhs, rhs) {\n        this.wasm.transferToHeap(lhs, 0);\n        this.wasm.transferToHeap(rhs, 32);\n        this.wasm.call('pedersen__compress_fields', 0, 32, 64);\n        return Buffer.from(this.wasm.sliceMemory(64, 96));\n    }\n    compressInputs(inputs) {\n        const inputVectors = (0, serialize_1.serializeBufferArrayToVector)(inputs);\n        this.wasm.transferToHeap(inputVectors, 0);\n        this.wasm.call('pedersen__compress', 0, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    compressWithHashIndex(inputs, hashIndex) {\n        const inputVectors = (0, serialize_1.serializeBufferArrayToVector)(inputs);\n        this.wasm.transferToHeap(inputVectors, 0);\n        this.wasm.call('pedersen__compress_with_hash_index', 0, 0, hashIndex);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    hashToField(data) {\n        const mem = this.wasm.call('bbmalloc', data.length);\n        this.wasm.transferToHeap(data, mem);\n        this.wasm.call('pedersen__buffer_to_field', mem, data.length, 0);\n        this.wasm.call('bbfree', mem);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    async hashToTree(values) {\n        const data = (0, serialize_1.serializeBufferArrayToVector)(values);\n        const inputPtr = await this.worker.call('bbmalloc', data.length);\n        await this.worker.transferToHeap(data, inputPtr);\n        const resultPtr = await this.worker.call('pedersen__hash_to_tree', inputPtr);\n        const resultNumFields = Buffer.from(await this.worker.sliceMemory(resultPtr, resultPtr + 4)).readUInt32BE(0);\n        const resultData = Buffer.from(await this.worker.sliceMemory(resultPtr, resultPtr + 4 + resultNumFields * 32));\n        await this.worker.call('bbfree', inputPtr);\n        await this.worker.call('bbfree', resultPtr);\n        return (0, serialize_1.deserializeArrayFromVector)(serialize_1.deserializeField, resultData).elem;\n    }\n}\nexports.SinglePedersen = SinglePedersen;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX3BlZGVyc2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NyeXB0by9wZWRlcnNlbi9zaW5nbGVfcGVkZXJzZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0NBQTZHO0FBSzdHOztHQUVHO0FBQ0gsTUFBYSxjQUFjO0lBQ3pCOzs7OztPQUtHO0lBQ0gsWUFBb0IsSUFBc0IsRUFBVSxTQUE2QixJQUFXO1FBQXhFLFNBQUksR0FBSixJQUFJLENBQWtCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBa0M7SUFBRyxDQUFDO0lBRXpGLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFlLEVBQUUsR0FBZTtRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxjQUFjLENBQUMsTUFBZ0I7UUFDcEMsTUFBTSxZQUFZLEdBQUcsSUFBQSx3Q0FBNEIsRUFBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0scUJBQXFCLENBQUMsTUFBZ0IsRUFBRSxTQUFpQjtRQUM5RCxNQUFNLFlBQVksR0FBRyxJQUFBLHdDQUE0QixFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sV0FBVyxDQUFDLElBQVk7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFnQjtRQUN0QyxNQUFNLElBQUksR0FBRyxJQUFBLHdDQUE0QixFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVqRCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLENBQUMsR0FBRyxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUU1QyxPQUFPLElBQUEsc0NBQTBCLEVBQUMsNEJBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZFLENBQUM7Q0FDRjtBQXhERCx3Q0F3REMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vcGVkZXJzZW4vc2luZ2xlX3BlZGVyc2VuLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsb0JBQW9CLG1CQUFPLENBQUMsdUZBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEMsMkJBQTJCLE1BQU07QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvY3J5cHRvL3BlZGVyc2VuL3NpbmdsZV9wZWRlcnNlbi5qcz9iM2JkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaW5nbGVQZWRlcnNlbiA9IHZvaWQgMDtcbmNvbnN0IHNlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4uLy4uL3NlcmlhbGl6ZVwiKTtcbi8qKlxuICogU2luZ2xlIHRocmVhZGVkIGltcGxlbWVudGF0aW9uIG9mIHBlZGVyc2VuLlxuICovXG5jbGFzcyBTaW5nbGVQZWRlcnNlbiB7XG4gICAgLyoqXG4gICAgICogTG9uZyBydW5uaW5nIGZ1bmN0aW9ucyBjYW4gZXhlY3V0ZSBvbiBhIHdvcmtlci4gSWYgbm9uZSBpcyBwcm92aWRlZCwgY2FsbCB0aGUgd2FzbSBvbiB0aGUgY2FsbGluZyB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2FzbSBTeW5jaHJvbm91cyBmdW5jdGlvbnMgd2lsbCB1c2UgdXNlIHRoaXMgd2FzbSBkaXJlY3RseSBvbiB0aGUgY2FsbGluZyB0aHJlYWQuXG4gICAgICogQHBhcmFtIHdvcmtlciBBc3luY2hyb25vdXMgZnVuY3Rpb25zIGV4ZWN1dGUgb24gdGhpcyB3b3JrZXIsIHByZXZlbnRpbmcgYmxvY2tpbmcgdGhlIGNhbGxpbmcgdGhyZWFkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHdhc20sIHdvcmtlciA9IHdhc20pIHtcbiAgICAgICAgdGhpcy53YXNtID0gd2FzbTtcbiAgICAgICAgdGhpcy53b3JrZXIgPSB3b3JrZXI7XG4gICAgfVxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdwZWRlcnNlbl9faW5pdCcpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdwZWRlcnNlbl9faW5pdCcpO1xuICAgIH1cbiAgICBjb21wcmVzcyhsaHMsIHJocykge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAobGhzLCAwKTtcbiAgICAgICAgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKHJocywgMzIpO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgncGVkZXJzZW5fX2NvbXByZXNzX2ZpZWxkcycsIDAsIDMyLCA2NCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoNjQsIDk2KSk7XG4gICAgfVxuICAgIGNvbXByZXNzSW5wdXRzKGlucHV0cykge1xuICAgICAgICBjb25zdCBpbnB1dFZlY3RvcnMgPSAoMCwgc2VyaWFsaXplXzEuc2VyaWFsaXplQnVmZmVyQXJyYXlUb1ZlY3RvcikoaW5wdXRzKTtcbiAgICAgICAgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKGlucHV0VmVjdG9ycywgMCk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdwZWRlcnNlbl9fY29tcHJlc3MnLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMud2FzbS5zbGljZU1lbW9yeSgwLCAzMikpO1xuICAgIH1cbiAgICBjb21wcmVzc1dpdGhIYXNoSW5kZXgoaW5wdXRzLCBoYXNoSW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5wdXRWZWN0b3JzID0gKDAsIHNlcmlhbGl6ZV8xLnNlcmlhbGl6ZUJ1ZmZlckFycmF5VG9WZWN0b3IpKGlucHV0cyk7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChpbnB1dFZlY3RvcnMsIDApO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgncGVkZXJzZW5fX2NvbXByZXNzX3dpdGhfaGFzaF9pbmRleCcsIDAsIDAsIGhhc2hJbmRleCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgaGFzaFRvRmllbGQoZGF0YSkge1xuICAgICAgICBjb25zdCBtZW0gPSB0aGlzLndhc20uY2FsbCgnYmJtYWxsb2MnLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChkYXRhLCBtZW0pO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgncGVkZXJzZW5fX2J1ZmZlcl90b19maWVsZCcsIG1lbSwgZGF0YS5sZW5ndGgsIDApO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnYmJmcmVlJywgbWVtKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMud2FzbS5zbGljZU1lbW9yeSgwLCAzMikpO1xuICAgIH1cbiAgICBhc3luYyBoYXNoVG9UcmVlKHZhbHVlcykge1xuICAgICAgICBjb25zdCBkYXRhID0gKDAsIHNlcmlhbGl6ZV8xLnNlcmlhbGl6ZUJ1ZmZlckFycmF5VG9WZWN0b3IpKHZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGlucHV0UHRyID0gYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJtYWxsb2MnLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLnRyYW5zZmVyVG9IZWFwKGRhdGEsIGlucHV0UHRyKTtcbiAgICAgICAgY29uc3QgcmVzdWx0UHRyID0gYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgncGVkZXJzZW5fX2hhc2hfdG9fdHJlZScsIGlucHV0UHRyKTtcbiAgICAgICAgY29uc3QgcmVzdWx0TnVtRmllbGRzID0gQnVmZmVyLmZyb20oYXdhaXQgdGhpcy53b3JrZXIuc2xpY2VNZW1vcnkocmVzdWx0UHRyLCByZXN1bHRQdHIgKyA0KSkucmVhZFVJbnQzMkJFKDApO1xuICAgICAgICBjb25zdCByZXN1bHREYXRhID0gQnVmZmVyLmZyb20oYXdhaXQgdGhpcy53b3JrZXIuc2xpY2VNZW1vcnkocmVzdWx0UHRyLCByZXN1bHRQdHIgKyA0ICsgcmVzdWx0TnVtRmllbGRzICogMzIpKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJmcmVlJywgaW5wdXRQdHIpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYmZyZWUnLCByZXN1bHRQdHIpO1xuICAgICAgICByZXR1cm4gKDAsIHNlcmlhbGl6ZV8xLmRlc2VyaWFsaXplQXJyYXlGcm9tVmVjdG9yKShzZXJpYWxpemVfMS5kZXNlcmlhbGl6ZUZpZWxkLCByZXN1bHREYXRhKS5lbGVtO1xuICAgIH1cbn1cbmV4cG9ydHMuU2luZ2xlUGVkZXJzZW4gPSBTaW5nbGVQZWRlcnNlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMybHVaMnhsWDNCbFpHVnljMlZ1TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDJOeWVYQjBieTl3WldSbGNuTmxiaTl6YVc1bmJHVmZjR1ZrWlhKelpXNHVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNLME5CUVRaSE8wRkJTemRIT3p0SFFVVkhPMEZCUTBnc1RVRkJZU3hqUVVGak8wbEJRM3BDT3pzN096dFBRVXRITzBsQlEwZ3NXVUZCYjBJc1NVRkJjMElzUlVGQlZTeFRRVUUyUWl4SlFVRlhPMUZCUVhoRkxGTkJRVWtzUjBGQlNpeEpRVUZKTEVOQlFXdENPMUZCUVZVc1YwRkJUU3hIUVVGT0xFMUJRVTBzUTBGQmEwTTdTVUZCUnl4RFFVRkRPMGxCUlhwR0xFdEJRVXNzUTBGQlF5eEpRVUZKTzFGQlEyWXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRSUVVOcVF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1NVRkRNME1zUTBGQlF6dEpRVVZOTEZGQlFWRXNRMEZCUXl4SFFVRmxMRVZCUVVVc1IwRkJaVHRSUVVNNVF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYWtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMnhETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExESkNRVUV5UWl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEZGtRc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNCRUxFTkJRVU03U1VGRlRTeGpRVUZqTEVOQlFVTXNUVUZCWjBJN1VVRkRjRU1zVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCUVN4M1EwRkJORUlzUlVGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTXhSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE1VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6TkRMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVTBzY1VKQlFYRkNMRU5CUVVNc1RVRkJaMElzUlVGQlJTeFRRVUZwUWp0UlFVTTVSQ3hOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZCTEhkRFFVRTBRaXhGUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlF6RkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNeFF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UTBGQmIwTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzFGQlEzUkZMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVTBzVjBGQlZ5eERRVUZETEVsQlFWazdVVUZETjBJc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTndSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGNFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRha1VzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlF6bENMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRm5RanRSUVVOMFF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkJMSGREUVVFMFFpeEZRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOcVJTeE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVVnFSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRemRGTEUxQlFVMHNaVUZCWlN4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVVzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6ZEhMRTFCUVUwc1ZVRkJWU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEVWQlFVVXNVMEZCVXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhsUVVGbExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXZSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dFJRVU16UXl4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVVMVF5eFBRVUZQTEVsQlFVRXNjME5CUVRCQ0xFVkJRVU1zTkVKQlFXZENMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEzWkZMRU5CUVVNN1EwRkRSanRCUVhoRVJDeDNRMEYzUkVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/pedersen/single_pedersen.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/random/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/random/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.randomBytes = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst detect_node_1 = (0, tslib_1.__importDefault)(__webpack_require__(/*! detect-node */ \"./node_modules/detect-node/browser.js\"));\nconst getWebCrypto = () => {\n    if (typeof window !== 'undefined' && window.crypto)\n        return window.crypto;\n    if (typeof self !== 'undefined' && self.crypto)\n        return self.crypto;\n    return undefined;\n};\nconst randomBytes = (len) => {\n    if (detect_node_1.default) {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return (__webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\").randomBytes)(len);\n    }\n    const crypto = getWebCrypto();\n    if (crypto) {\n        const buf = Buffer.alloc(len);\n        crypto.getRandomValues(buf);\n        return buf;\n    }\n    throw new Error('randomBytes UnsupportedEnvironment');\n};\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3JhbmRvbS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkVBQWlDO0FBRWpDLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtJQUN4QixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTTtRQUFFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN6RSxJQUFJLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNuRSxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFSyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO0lBQ3pDLElBQUkscUJBQU0sRUFBRTtRQUNWLDhEQUE4RDtRQUM5RCxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFXLENBQUM7S0FDckQ7SUFFRCxNQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQztJQUM5QixJQUFJLE1BQU0sRUFBRTtRQUNWLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQWRXLFFBQUEsV0FBVyxlQWN0QiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vcmFuZG9tL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsbURBQW1ELG1CQUFPLENBQUMsMERBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtHQUE2QjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vcmFuZG9tL2luZGV4LmpzPzkxYjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGRldGVjdF9ub2RlXzEgPSAoMCwgdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQpKHJlcXVpcmUoXCJkZXRlY3Qtbm9kZVwiKSk7XG5jb25zdCBnZXRXZWJDcnlwdG8gPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jcnlwdG8pXG4gICAgICAgIHJldHVybiB3aW5kb3cuY3J5cHRvO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5jcnlwdG8pXG4gICAgICAgIHJldHVybiBzZWxmLmNyeXB0bztcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmNvbnN0IHJhbmRvbUJ5dGVzID0gKGxlbikgPT4ge1xuICAgIGlmIChkZXRlY3Rfbm9kZV8xLmRlZmF1bHQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJ2NyeXB0bycpLnJhbmRvbUJ5dGVzKGxlbik7XG4gICAgfVxuICAgIGNvbnN0IGNyeXB0byA9IGdldFdlYkNyeXB0bygpO1xuICAgIGlmIChjcnlwdG8pIHtcbiAgICAgICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGxlbik7XG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnVmKTtcbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyYW5kb21CeXRlcyBVbnN1cHBvcnRlZEVudmlyb25tZW50Jyk7XG59O1xuZXhwb3J0cy5yYW5kb21CeXRlcyA9IHJhbmRvbUJ5dGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZZM0o1Y0hSdkwzSmhibVJ2YlM5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJRVUVzTWtWQlFXbERPMEZCUldwRExFMUJRVTBzV1VGQldTeEhRVUZITEVkQlFVY3NSVUZCUlR0SlFVTjRRaXhKUVVGSkxFOUJRVThzVFVGQlRTeExRVUZMTEZkQlFWY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUVHRSUVVGRkxFOUJRVThzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTjZSU3hKUVVGSkxFOUJRVThzU1VGQlNTeExRVUZMTEZkQlFWY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUVHRSUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTnVSU3hQUVVGUExGTkJRVk1zUTBGQlF6dEJRVU51UWl4RFFVRkRMRU5CUVVNN1FVRkZTeXhOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEVkQlFWY3NSVUZCUlN4RlFVRkZPMGxCUTNwRExFbEJRVWtzY1VKQlFVMHNSVUZCUlR0UlFVTldMRGhFUVVFNFJEdFJRVU01UkN4UFFVRlBMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRlhMRU5CUVVNN1MwRkRja1E3U1VGRlJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4WlFVRlpMRVZCUVVVc1EwRkJRenRKUVVNNVFpeEpRVUZKTEUxQlFVMHNSVUZCUlR0UlFVTldMRTFCUVUwc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRPVUlzVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNMVFpeFBRVUZQTEVkQlFVY3NRMEZCUXp0TFFVTmFPMGxCUlVRc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHZRMEZCYjBNc1EwRkJReXhEUVVGRE8wRkJRM2hFTEVOQlFVTXNRMEZCUXp0QlFXUlhMRkZCUVVFc1YwRkJWeXhsUVdOMFFpSjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/random/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/index.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Schnorr = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst signature_1 = __webpack_require__(/*! ./signature */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/signature.js\");\nconst serialize_1 = __webpack_require__(/*! ../../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./signature */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/signature.js\"), exports);\nclass Schnorr {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    constructSignature(msg, pk) {\n        this.wasm.transferToHeap(pk, 64);\n        this.wasm.transferToHeap(msg, 96);\n        this.wasm.call('construct_signature', 96, msg.length, 64, 0, 32);\n        return new signature_1.SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64)));\n    }\n    computePublicKey(pk) {\n        this.wasm.transferToHeap(pk, 0);\n        this.wasm.call('compute_public_key', 0, 32);\n        return Buffer.from(this.wasm.sliceMemory(32, 96));\n    }\n    verifySignature(msg, pubKey, sig) {\n        this.wasm.transferToHeap(pubKey, 0);\n        this.wasm.transferToHeap(sig.s(), 64);\n        this.wasm.transferToHeap(sig.e(), 96);\n        this.wasm.transferToHeap(msg, 128);\n        return this.wasm.call('verify_signature', 128, msg.length, 0, 64, 96) ? true : false;\n    }\n    multiSigComputePublicKey(pk) {\n        this.wasm.transferToHeap(pk, 128);\n        this.wasm.call('multisig_create_multisig_public_key', 128, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 128));\n    }\n    multiSigValidateAndCombinePublicKeys(pubKeys) {\n        const buffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);\n        this.wasm.transferToHeap(buffer, 64);\n        this.wasm.call('multisig_validate_and_combine_signer_pubkeys', 64, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 64));\n    }\n    multiSigRoundOne() {\n        this.wasm.call('multisig_construct_signature_round_1', 0, 128);\n        return {\n            publicOutput: Buffer.from(this.wasm.sliceMemory(0, 128)),\n            privateOutput: Buffer.from(this.wasm.sliceMemory(128, 192)),\n        };\n    }\n    multiSigRoundTwo(msg, pk, signerrRoundOnePrivateOutput, pubKeys, roundOnePublicOutputs) {\n        const pubKeysBuffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);\n        const roundOneOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundOnePublicOutputs);\n        const msgPtr = 32;\n        this.wasm.transferToHeap(msg, msgPtr);\n        const pkPtr = msgPtr + msg.length;\n        this.wasm.transferToHeap(pk, pkPtr);\n        const roundOnePrivatePtr = pkPtr + 32;\n        this.wasm.transferToHeap(signerrRoundOnePrivateOutput, roundOnePrivatePtr);\n        const pubKeysPtr = roundOnePrivatePtr + 64;\n        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);\n        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;\n        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);\n        this.wasm.call('multisig_construct_signature_round_2', msgPtr, msg.length, pkPtr, roundOnePrivatePtr, pubKeysPtr, roundOnePtr, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    multiSigCombineSignatures(msg, pubKeys, roundOneOutputs, roundTwoOutputs) {\n        const pubKeysBuffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);\n        const roundOneOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundOneOutputs);\n        const roundTwoOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundTwoOutputs);\n        const msgPtr = 64;\n        this.wasm.transferToHeap(msg, msgPtr);\n        const pubKeysPtr = msgPtr + msg.length;\n        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);\n        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;\n        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);\n        const roundTwoPtr = roundOnePtr + roundOneOutputsBuffer.length;\n        this.wasm.transferToHeap(roundTwoOutputsBuffer, roundTwoPtr);\n        this.wasm.call('multisig_combine_signatures', msgPtr, msg.length, pubKeysPtr, roundOnePtr, roundTwoPtr, 0, 32);\n        return new signature_1.SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64)));\n    }\n}\nexports.Schnorr = Schnorr;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3NjaG5vcnIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDJDQUErQztBQUUvQywrQ0FBK0Q7QUFFL0QsMkRBQTRCO0FBRTVCLE1BQWEsT0FBTztJQUNsQixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFFdkMsa0JBQWtCLENBQUMsR0FBZSxFQUFFLEVBQWM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sSUFBSSw0QkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEVBQWM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLGVBQWUsQ0FBQyxH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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/signature.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/signature.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SchnorrSignature = void 0;\nconst random_1 = __webpack_require__(/*! ../random */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/random/index.js\");\nclass SchnorrSignature {\n    constructor(buffer) {\n        this.buffer = buffer;\n        if (buffer.length !== SchnorrSignature.SIZE) {\n            throw new Error('Invalid signature buffer.');\n        }\n    }\n    static isSignature(signature) {\n        return /^(0x)?[0-9a-f]{128}$/i.test(signature);\n    }\n    static fromString(signature) {\n        if (!SchnorrSignature.isSignature(signature)) {\n            throw new Error(`Invalid signature string: ${signature}`);\n        }\n        return new SchnorrSignature(Buffer.from(signature.replace(/^0x/i, ''), 'hex'));\n    }\n    static randomSignature() {\n        return new SchnorrSignature((0, random_1.randomBytes)(64));\n    }\n    s() {\n        return this.buffer.slice(0, 32);\n    }\n    e() {\n        return this.buffer.slice(32);\n    }\n    toBuffer() {\n        return this.buffer;\n    }\n    toString() {\n        return `0x${this.buffer.toString('hex')}`;\n    }\n}\nexports.SchnorrSignature = SchnorrSignature;\nSchnorrSignature.SIZE = 64;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NyeXB0by9zY2hub3JyL3NpZ25hdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBd0M7QUFFeEMsTUFBYSxnQkFBZ0I7SUFHM0IsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDaEMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLGdCQUFnQixDQUFDLElBQUksRUFBRTtZQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFpQjtRQUN6QyxPQUFPLHVCQUF1QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFpQjtRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZTtRQUMzQixPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBQSxvQkFBVyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELENBQUM7UUFDQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsQ0FBQztRQUNDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUM1QyxDQUFDOztBQXRDSCw0Q0F1Q0M7QUF0Q2UscUJBQUksR0FBRyxFQUFFLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vc2Nobm9yci9zaWduYXR1cmUuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLElBQUk7QUFDbkM7QUFDQTtBQUNBO0FBQ0EseURBQXlELFVBQVU7QUFDbkU7QUFDQSxvQ0FBb0MsTUFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRCQUE0QjtBQUNoRDtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2NyeXB0by9zY2hub3JyL3NpZ25hdHVyZS5qcz83ZWNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TY2hub3JyU2lnbmF0dXJlID0gdm9pZCAwO1xuY29uc3QgcmFuZG9tXzEgPSByZXF1aXJlKFwiLi4vcmFuZG9tXCIpO1xuY2xhc3MgU2Nobm9yclNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gU2Nobm9yclNpZ25hdHVyZS5TSVpFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIGJ1ZmZlci4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXNTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgICAgIHJldHVybiAvXigweCk/WzAtOWEtZl17MTI4fSQvaS50ZXN0KHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHNpZ25hdHVyZSkge1xuICAgICAgICBpZiAoIVNjaG5vcnJTaWduYXR1cmUuaXNTaWduYXR1cmUoc2lnbmF0dXJlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpZ25hdHVyZSBzdHJpbmc6ICR7c2lnbmF0dXJlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2Nobm9yclNpZ25hdHVyZShCdWZmZXIuZnJvbShzaWduYXR1cmUucmVwbGFjZSgvXjB4L2ksICcnKSwgJ2hleCcpKTtcbiAgICB9XG4gICAgc3RhdGljIHJhbmRvbVNpZ25hdHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hub3JyU2lnbmF0dXJlKCgwLCByYW5kb21fMS5yYW5kb21CeXRlcykoNjQpKTtcbiAgICB9XG4gICAgcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKDAsIDMyKTtcbiAgICB9XG4gICAgZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKDMyKTtcbiAgICB9XG4gICAgdG9CdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgMHgke3RoaXMuYnVmZmVyLnRvU3RyaW5nKCdoZXgnKX1gO1xuICAgIH1cbn1cbmV4cG9ydHMuU2Nobm9yclNpZ25hdHVyZSA9IFNjaG5vcnJTaWduYXR1cmU7XG5TY2hub3JyU2lnbmF0dXJlLlNJWkUgPSA2NDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMybG5ibUYwZFhKbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyTnllWEIwYnk5elkyaHViM0p5TDNOcFoyNWhkSFZ5WlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4elEwRkJkME03UVVGRmVFTXNUVUZCWVN4blFrRkJaMEk3U1VGSE0wSXNXVUZCYjBJc1RVRkJZenRSUVVGa0xGZEJRVTBzUjBGQlRpeE5RVUZOTEVOQlFWRTdVVUZEYUVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeExRVUZMTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU16UXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RFFVRkRMRU5CUVVNN1UwRkRPVU03U1VGRFNDeERRVUZETzBsQlJVMHNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGcFFqdFJRVU42UXl4UFFVRlBMSFZDUVVGMVFpeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVOcVJDeERRVUZETzBsQlJVMHNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGcFFqdFJRVU40UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRk8xbEJRelZETEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc05rSkJRVFpDTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRNMFE3VVVGRFJDeFBRVUZQTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnBHTEVOQlFVTTdTVUZGVFN4TlFVRk5MRU5CUVVNc1pVRkJaVHRSUVVNelFpeFBRVUZQTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU1zU1VGQlFTeHZRa0ZCVnl4RlFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGREwwTXNRMEZCUXp0SlFVVkVMRU5CUVVNN1VVRkRReXhQUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU5zUXl4RFFVRkRPMGxCUlVRc1EwRkJRenRSUVVORExFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGREwwSXNRMEZCUXp0SlFVVkVMRkZCUVZFN1VVRkRUaXhQUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEY2tJc1EwRkJRenRKUVVWRUxGRkJRVkU3VVVGRFRpeFBRVUZQTEV0QlFVc3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXp0SlFVTTFReXhEUVVGRE96dEJRWFJEU0N3MFEwRjFRME03UVVGMFEyVXNjVUpCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU1pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/schnorr/signature.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/crypto/sha256/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/crypto/sha256/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha256 = void 0;\nclass Sha256 {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    hash(data) {\n        const mem = this.wasm.call('bbmalloc', data.length + 32);\n        this.wasm.transferToHeap(data, mem);\n        this.wasm.call('sha256__hash', mem, data.length, mem + data.length);\n        const result = Buffer.from(this.wasm.sliceMemory(mem + data.length, mem + data.length + 32));\n        this.wasm.call('bbfree', mem);\n        return result;\n    }\n}\nexports.Sha256 = Sha256;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3NoYTI1Ni9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLE1BQU07SUFDakIsWUFBb0IsSUFBc0I7UUFBdEIsU0FBSSxHQUFKLElBQUksQ0FBa0I7SUFBRyxDQUFDO0lBRXZDLElBQUksQ0FBQyxJQUFZO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRSxNQUFNLE1BQU0sR0FBVyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQVhELHdCQVdDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vc2hhMjU2L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9jcnlwdG8vc2hhMjU2L2luZGV4LmpzPzRhYTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNoYTI1NiA9IHZvaWQgMDtcbmNsYXNzIFNoYTI1NiB7XG4gICAgY29uc3RydWN0b3Iod2FzbSkge1xuICAgICAgICB0aGlzLndhc20gPSB3YXNtO1xuICAgIH1cbiAgICBoYXNoKGRhdGEpIHtcbiAgICAgICAgY29uc3QgbWVtID0gdGhpcy53YXNtLmNhbGwoJ2JibWFsbG9jJywgZGF0YS5sZW5ndGggKyAzMik7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChkYXRhLCBtZW0pO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnc2hhMjU2X19oYXNoJywgbWVtLCBkYXRhLmxlbmd0aCwgbWVtICsgZGF0YS5sZW5ndGgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkobWVtICsgZGF0YS5sZW5ndGgsIG1lbSArIGRhdGEubGVuZ3RoICsgMzIpKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG1lbSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5TaGEyNTYgPSBTaGEyNTY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdlkzSjVjSFJ2TDNOb1lUSTFOaTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGRlFTeE5RVUZoTEUxQlFVMDdTVUZEYWtJc1dVRkJiMElzU1VGQmMwSTdVVUZCZEVJc1UwRkJTU3hIUVVGS0xFbEJRVWtzUTBGQmEwSTdTVUZCUnl4RFFVRkRPMGxCUlhaRExFbEJRVWtzUTBGQlF5eEpRVUZaTzFGQlEzUkNMRTFCUVUwc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNwRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU53UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOd1JTeE5RVUZOTEUxQlFVMHNSMEZCVnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEY2tjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRemxDTEU5QlFVOHNUVUZCVFN4RFFVRkRPMGxCUTJoQ0xFTkJRVU03UTBGRFJqdEJRVmhFTEhkQ1FWZERJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/crypto/sha256/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Grumpkin = void 0;\nclass Grumpkin {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    mul(point, scalar) {\n        this.wasm.transferToHeap(point, 0);\n        this.wasm.transferToHeap(scalar, 64);\n        this.wasm.call('ecc_grumpkin__mul', 0, 64, 96);\n        return Buffer.from(this.wasm.sliceMemory(96, 160));\n    }\n    batchMul(points, scalar, numPoints) {\n        const mem = this.wasm.call('bbmalloc', points.length * 2);\n        this.wasm.transferToHeap(points, mem);\n        this.wasm.transferToHeap(scalar, 0);\n        this.wasm.call('ecc_grumpkin__batch_mul', mem, 0, numPoints, mem + points.length);\n        const result = Buffer.from(this.wasm.sliceMemory(mem + points.length, mem + points.length + points.length));\n        this.wasm.call('bbfree', mem);\n        return result;\n    }\n    getRandomFr() {\n        this.wasm.call('ecc_grumpkin__get_random_scalar_mod_circuit_modulus', 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    reduce512BufferToFr(uint512Buf) {\n        this.wasm.transferToHeap(uint512Buf, 0);\n        this.wasm.call('ecc_grumpkin__reduce512_buffer_mod_circuit_modulus', 0, 64);\n        return Buffer.from(this.wasm.sliceMemory(64, 96));\n    }\n}\nexports.Grumpkin = Grumpkin;\n// prettier-ignore\nGrumpkin.one = Buffer.from([\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xcf, 0x13, 0x5e, 0x75, 0x06, 0xa4, 0x5d, 0x63,\n    0x2d, 0x27, 0x0d, 0x45, 0xf1, 0x18, 0x12, 0x94, 0x83, 0x3f, 0xc4, 0x8d, 0x82, 0x3f, 0x27, 0x2c,\n]);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZWNjL2dydW1wa2luL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQWEsUUFBUTtJQUNuQixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFVdkMsR0FBRyxDQUFDLEtBQWlCLEVBQUUsTUFBa0I7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sUUFBUSxDQUFDLE1BQWtCLEVBQUUsTUFBa0IsRUFBRSxTQUFpQjtRQUN2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEYsTUFBTSxNQUFNLEdBQVcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNwSCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscURBQXFELEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxVQUFrQjtRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0RBQW9ELEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDOztBQXZDSCw0QkF3Q0M7QUFyQ0Msa0JBQWtCO0FBQ1gsWUFBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDdkIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUM5RixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQzlGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDOUYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtDQUMvRixDQUFDLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9lY2MvZ3J1bXBraW4vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2VjYy9ncnVtcGtpbi9pbmRleC5qcz8xN2RjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HcnVtcGtpbiA9IHZvaWQgMDtcbmNsYXNzIEdydW1wa2luIHtcbiAgICBjb25zdHJ1Y3Rvcih3YXNtKSB7XG4gICAgICAgIHRoaXMud2FzbSA9IHdhc207XG4gICAgfVxuICAgIG11bChwb2ludCwgc2NhbGFyKSB7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChwb2ludCwgMCk7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChzY2FsYXIsIDY0KTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2VjY19ncnVtcGtpbl9fbXVsJywgMCwgNjQsIDk2KTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMud2FzbS5zbGljZU1lbW9yeSg5NiwgMTYwKSk7XG4gICAgfVxuICAgIGJhdGNoTXVsKHBvaW50cywgc2NhbGFyLCBudW1Qb2ludHMpIHtcbiAgICAgICAgY29uc3QgbWVtID0gdGhpcy53YXNtLmNhbGwoJ2JibWFsbG9jJywgcG9pbnRzLmxlbmd0aCAqIDIpO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAocG9pbnRzLCBtZW0pO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoc2NhbGFyLCAwKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2VjY19ncnVtcGtpbl9fYmF0Y2hfbXVsJywgbWVtLCAwLCBudW1Qb2ludHMsIG1lbSArIHBvaW50cy5sZW5ndGgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkobWVtICsgcG9pbnRzLmxlbmd0aCwgbWVtICsgcG9pbnRzLmxlbmd0aCArIHBvaW50cy5sZW5ndGgpKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG1lbSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGdldFJhbmRvbUZyKCkge1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnZWNjX2dydW1wa2luX19nZXRfcmFuZG9tX3NjYWxhcl9tb2RfY2lyY3VpdF9tb2R1bHVzJywgMCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgcmVkdWNlNTEyQnVmZmVyVG9Gcih1aW50NTEyQnVmKSB7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcCh1aW50NTEyQnVmLCAwKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2VjY19ncnVtcGtpbl9fcmVkdWNlNTEyX2J1ZmZlcl9tb2RfY2lyY3VpdF9tb2R1bHVzJywgMCwgNjQpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDY0LCA5NikpO1xuICAgIH1cbn1cbmV4cG9ydHMuR3J1bXBraW4gPSBHcnVtcGtpbjtcbi8vIHByZXR0aWVyLWlnbm9yZVxuR3J1bXBraW4ub25lID0gQnVmZmVyLmZyb20oW1xuICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSxcbiAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAyLCAweGNmLCAweDEzLCAweDVlLCAweDc1LCAweDA2LCAweGE0LCAweDVkLCAweDYzLFxuICAgIDB4MmQsIDB4MjcsIDB4MGQsIDB4NDUsIDB4ZjEsIDB4MTgsIDB4MTIsIDB4OTQsIDB4ODMsIDB4M2YsIDB4YzQsIDB4OGQsIDB4ODIsIDB4M2YsIDB4MjcsIDB4MmMsXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12WldOakwyZHlkVzF3YTJsdUwybHVaR1Y0TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVVZCTEUxQlFXRXNVVUZCVVR0SlFVTnVRaXhaUVVGdlFpeEpRVUZ6UWp0UlFVRjBRaXhUUVVGSkxFZEJRVW9zU1VGQlNTeERRVUZyUWp0SlFVRkhMRU5CUVVNN1NVRlZka01zUjBGQlJ5eERRVUZETEV0QlFXbENMRVZCUVVVc1RVRkJhMEk3VVVGRE9VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU55UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXk5RExFOUJRVThzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOeVJDeERRVUZETzBsQlJVMHNVVUZCVVN4RFFVRkRMRTFCUVd0Q0xFVkJRVVVzVFVGQmEwSXNSVUZCUlN4VFFVRnBRanRSUVVOMlJTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVV4UkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZGYkVZc1RVRkJUU3hOUVVGTkxFZEJRVmNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53U0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRPVUlzVDBGQlR5eE5RVUZOTEVOQlFVTTdTVUZEYUVJc1EwRkJRenRKUVVWTkxGZEJRVmM3VVVGRGFFSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGVrVXNUMEZCVHl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNN1NVRkZUU3h0UWtGQmJVSXNRMEZCUXl4VlFVRnJRanRSUVVNelF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZUVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMFJCUVc5RUxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpWRkxFOUJRVThzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZET3p0QlFYWkRTQ3cwUWtGM1EwTTdRVUZ5UTBNc2EwSkJRV3RDTzBGQlExZ3NXVUZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGRrSXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRKUVVNNVJpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMGxCUXpsR0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVazdTVUZET1VZc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdERRVU12Uml4RFFVRkRMRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/fft/fft.js":
/*!**************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/fft/fft.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZmdC9mZnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9mZnQvZmZ0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9mZnQvZmZ0LmpzPzRjZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labVowTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMMlptZEM5bVpuUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/fft/fft.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/fft/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/fft/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./fft */ \"./node_modules/@noir-lang/barretenberg/dest/fft/fft.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./single_fft */ \"./node_modules/@noir-lang/barretenberg/dest/fft/single_fft.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pooled_fft */ \"./node_modules/@noir-lang/barretenberg/dest/fft/pooled_fft.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmZ0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFEQUFzQjtBQUN0Qiw0REFBNkI7QUFDN0IsNERBQTZCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9mZnQvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMscUVBQU87QUFDekMsMEJBQTBCLG1CQUFPLENBQUMsbUZBQWM7QUFDaEQsMEJBQTBCLG1CQUFPLENBQUMsbUZBQWM7QUFDaEQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2ZmdC9pbmRleC5qcz82NTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vZmZ0XCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vc2luZ2xlX2ZmdFwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3Bvb2xlZF9mZnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdlptWjBMMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxIRkVRVUZ6UWp0QlFVTjBRaXcwUkVGQk5rSTdRVUZETjBJc05FUkJRVFpDSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/fft/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/fft/pooled_fft.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/fft/pooled_fft.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PooledFftFactory = exports.PooledFft = void 0;\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst fifo_1 = __webpack_require__(/*! ../fifo */ \"./node_modules/@noir-lang/barretenberg/dest/fifo/index.js\");\nconst single_fft_1 = __webpack_require__(/*! ./single_fft */ \"./node_modules/@noir-lang/barretenberg/dest/fft/single_fft.js\");\nconst debug = (0, log_1.createDebugLogger)('bb:fft');\nclass PooledFft {\n    constructor(pool) {\n        this.queue = new fifo_1.MemoryFifo();\n        this.ffts = pool.workers.map(w => new single_fft_1.SingleFft(w));\n    }\n    async init(circuitSize) {\n        const start = new Date().getTime();\n        debug(`initializing fft of size: ${circuitSize}`);\n        await Promise.all(this.ffts.map(f => f.init(circuitSize)));\n        this.ffts.forEach(w => this.processJobs(w));\n        debug(`initialization took: ${new Date().getTime() - start}ms`);\n    }\n    async destroy() {\n        this.queue.cancel();\n        await Promise.all(this.ffts.map(f => f.destroy()));\n    }\n    async processJobs(worker) {\n        while (true) {\n            const job = await this.queue.get();\n            if (!job) {\n                break;\n            }\n            const result = await (job.inverse ? worker.ifft(job.coefficients) : worker.fft(job.coefficients, job.constant));\n            job.resolve(result);\n        }\n    }\n    async fft(coefficients, constant) {\n        return await new Promise(resolve => this.queue.put({ coefficients, constant, inverse: false, resolve }));\n    }\n    async ifft(coefficients) {\n        return await new Promise(resolve => this.queue.put({ coefficients, inverse: true, resolve }));\n    }\n}\nexports.PooledFft = PooledFft;\nclass PooledFftFactory {\n    constructor(workerPool) {\n        this.workerPool = workerPool;\n        this.ffts = {};\n    }\n    async createFft(circuitSize) {\n        if (!this.ffts[circuitSize]) {\n            const fft = new PooledFft(this.workerPool);\n            await fft.init(circuitSize);\n            this.ffts[circuitSize] = fft;\n        }\n        return this.ffts[circuitSize];\n    }\n    async destroy() {\n        await Promise.all(Object.values(this.ffts).map(fft => fft.destroy()));\n    }\n}\nexports.PooledFftFactory = PooledFftFactory;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbGVkX2ZmdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZnQvcG9vbGVkX2ZmdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnQ0FBMkM7QUFDM0Msa0NBQXFDO0FBR3JDLDZDQUF5QztBQUV6QyxNQUFNLEtBQUssR0FBRyxJQUFBLHVCQUFpQixFQUFDLFFBQVEsQ0FBQyxDQUFDO0FBUzFDLE1BQWEsU0FBUztJQUlwQixZQUFZLElBQWdCO1FBSHBCLFVBQUssR0FBRyxJQUFJLGlCQUFVLEVBQU8sQ0FBQztRQUlwQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxzQkFBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBbUI7UUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxLQUFLLENBQUMsNkJBQTZCLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDbEQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsS0FBSyxDQUFDLHdCQUF3QixJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFF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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/fft/pooled_fft.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/fft/single_fft.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/fft/single_fft.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SingleFftFactory = exports.SingleFft = void 0;\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist/index.js\");\nclass SingleFft {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    async init(circuitSize) {\n        this.domainPtr = await this.wasm.call('new_evaluation_domain', circuitSize);\n    }\n    async destroy() {\n        await this.wasm.call('delete_evaluation_domain', this.domainPtr);\n    }\n    async fft(coefficients, constant) {\n        const circuitSize = coefficients.length / 32;\n        const newPtr = await this.wasm.call('bbmalloc', coefficients.length);\n        await this.wasm.transferToHeap((0, threads_1.Transfer)(coefficients, [coefficients.buffer]), newPtr);\n        await this.wasm.transferToHeap((0, threads_1.Transfer)(constant, [constant.buffer]), 0);\n        await this.wasm.call('coset_fft_with_generator_shift', newPtr, 0, this.domainPtr);\n        const result = await this.wasm.sliceMemory(newPtr, newPtr + circuitSize * 32);\n        await this.wasm.call('bbfree', newPtr);\n        return result;\n    }\n    async ifft(coefficients) {\n        const circuitSize = coefficients.length / 32;\n        const newPtr = await this.wasm.call('bbmalloc', coefficients.length);\n        await this.wasm.transferToHeap((0, threads_1.Transfer)(coefficients, [coefficients.buffer]), newPtr);\n        await this.wasm.call('ifft', newPtr, this.domainPtr);\n        const result = await this.wasm.sliceMemory(newPtr, newPtr + circuitSize * 32);\n        await this.wasm.call('bbfree', newPtr);\n        return result;\n    }\n}\nexports.SingleFft = SingleFft;\nclass SingleFftFactory {\n    constructor(wasm) {\n        this.wasm = wasm;\n        this.ffts = {};\n    }\n    async createFft(circuitSize) {\n        if (!this.ffts[circuitSize]) {\n            const fft = new SingleFft(this.wasm);\n            await fft.init(circuitSize);\n            this.ffts[circuitSize] = fft;\n        }\n        return this.ffts[circuitSize];\n    }\n    async destroy() { }\n}\nexports.SingleFftFactory = SingleFftFactory;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX2ZmdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZnQvc2luZ2xlX2ZmdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBbUM7QUFJbkMsTUFBYSxTQUFTO0lBR3BCLFlBQW9CLElBQXdCO1FBQXhCLFNBQUksR0FBSixJQUFJLENBQW9CO0lBQUcsQ0FBQztJQUV6QyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQW1CO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBd0IsRUFBRSxRQUFvQjtRQUM3RCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFBLGtCQUFRLEVBQUMsWUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0YsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFBLGtCQUFRLEVBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQXdCO1FBQ3hDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUEsa0JBQVEsRUFBQyxZQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3RixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDOUUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBakNELDhCQWlDQztBQUVELE1BQWEsZ0JBQWdCO0lBRzNCLFlBQW9CLElBQXdCO1FBQXhCLFNBQUksR0FBSixJQUFJLENBQW9CO1FBRnBDLFNBQUksR0FBbUMsRUFBRSxDQUFDO0lBRUgsQ0FBQztJQUV6QyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQW1CO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDOUI7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLEtBQUksQ0FBQztDQUMxQjtBQWZELDRDQWVDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9mZnQvc2luZ2xlX2ZmdC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxpQkFBaUI7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMscURBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvZmZ0L3NpbmdsZV9mZnQuanM/NTE1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2luZ2xlRmZ0RmFjdG9yeSA9IGV4cG9ydHMuU2luZ2xlRmZ0ID0gdm9pZCAwO1xuY29uc3QgdGhyZWFkc18xID0gcmVxdWlyZShcInRocmVhZHNcIik7XG5jbGFzcyBTaW5nbGVGZnQge1xuICAgIGNvbnN0cnVjdG9yKHdhc20pIHtcbiAgICAgICAgdGhpcy53YXNtID0gd2FzbTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdChjaXJjdWl0U2l6ZSkge1xuICAgICAgICB0aGlzLmRvbWFpblB0ciA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCduZXdfZXZhbHVhdGlvbl9kb21haW4nLCBjaXJjdWl0U2l6ZSk7XG4gICAgfVxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGF3YWl0IHRoaXMud2FzbS5jYWxsKCdkZWxldGVfZXZhbHVhdGlvbl9kb21haW4nLCB0aGlzLmRvbWFpblB0cik7XG4gICAgfVxuICAgIGFzeW5jIGZmdChjb2VmZmljaWVudHMsIGNvbnN0YW50KSB7XG4gICAgICAgIGNvbnN0IGNpcmN1aXRTaXplID0gY29lZmZpY2llbnRzLmxlbmd0aCAvIDMyO1xuICAgICAgICBjb25zdCBuZXdQdHIgPSBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJtYWxsb2MnLCBjb2VmZmljaWVudHMubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKCgwLCB0aHJlYWRzXzEuVHJhbnNmZXIpKGNvZWZmaWNpZW50cywgW2NvZWZmaWNpZW50cy5idWZmZXJdKSwgbmV3UHRyKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKCgwLCB0aHJlYWRzXzEuVHJhbnNmZXIpKGNvbnN0YW50LCBbY29uc3RhbnQuYnVmZmVyXSksIDApO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnY29zZXRfZmZ0X3dpdGhfZ2VuZXJhdG9yX3NoaWZ0JywgbmV3UHRyLCAwLCB0aGlzLmRvbWFpblB0cik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMud2FzbS5zbGljZU1lbW9yeShuZXdQdHIsIG5ld1B0ciArIGNpcmN1aXRTaXplICogMzIpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJmcmVlJywgbmV3UHRyKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgaWZmdChjb2VmZmljaWVudHMpIHtcbiAgICAgICAgY29uc3QgY2lyY3VpdFNpemUgPSBjb2VmZmljaWVudHMubGVuZ3RoIC8gMzI7XG4gICAgICAgIGNvbnN0IG5ld1B0ciA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIGNvZWZmaWNpZW50cy5sZW5ndGgpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoKDAsIHRocmVhZHNfMS5UcmFuc2ZlcikoY29lZmZpY2llbnRzLCBbY29lZmZpY2llbnRzLmJ1ZmZlcl0pLCBuZXdQdHIpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnaWZmdCcsIG5ld1B0ciwgdGhpcy5kb21haW5QdHIpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkobmV3UHRyLCBuZXdQdHIgKyBjaXJjdWl0U2l6ZSAqIDMyKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG5ld1B0cik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5TaW5nbGVGZnQgPSBTaW5nbGVGZnQ7XG5jbGFzcyBTaW5nbGVGZnRGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3Rvcih3YXNtKSB7XG4gICAgICAgIHRoaXMud2FzbSA9IHdhc207XG4gICAgICAgIHRoaXMuZmZ0cyA9IHt9O1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVGZnQoY2lyY3VpdFNpemUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZmdHNbY2lyY3VpdFNpemVdKSB7XG4gICAgICAgICAgICBjb25zdCBmZnQgPSBuZXcgU2luZ2xlRmZ0KHRoaXMud2FzbSk7XG4gICAgICAgICAgICBhd2FpdCBmZnQuaW5pdChjaXJjdWl0U2l6ZSk7XG4gICAgICAgICAgICB0aGlzLmZmdHNbY2lyY3VpdFNpemVdID0gZmZ0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZmdHNbY2lyY3VpdFNpemVdO1xuICAgIH1cbiAgICBhc3luYyBkZXN0cm95KCkgeyB9XG59XG5leHBvcnRzLlNpbmdsZUZmdEZhY3RvcnkgPSBTaW5nbGVGZnRGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJsdVoyeGxYMlptZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTltWm5RdmMybHVaMnhsWDJabWRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQlFTeHhRMEZCYlVNN1FVRkpia01zVFVGQllTeFRRVUZUTzBsQlIzQkNMRmxCUVc5Q0xFbEJRWGRDTzFGQlFYaENMRk5CUVVrc1IwRkJTaXhKUVVGSkxFTkJRVzlDTzBsQlFVY3NRMEZCUXp0SlFVVjZReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFXMUNPMUZCUTI1RExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEpRVU01UlN4RFFVRkRPMGxCUlUwc1MwRkJTeXhEUVVGRExFOUJRVTg3VVVGRGJFSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdTVUZEYmtVc1EwRkJRenRKUVVWTkxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCZDBJc1JVRkJSU3hSUVVGdlFqdFJRVU0zUkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTTNReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRja1VzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGQkxHdENRVUZSTEVWQlFVTXNXVUZCV1N4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkROMFlzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGQkxHdENRVUZSTEVWQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRhRVlzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhuUTBGQlowTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTnNSaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVkQlFVY3NWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRemxGTEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNaRExFOUJRVThzVFVGQlRTeERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkZUU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFYZENPMUZCUTNoRExFMUJRVTBzVjBGQlZ5eEhRVUZITEZsQlFWa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRemRETEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU55UlN4TlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVRXNhMEpCUVZFc1JVRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVZFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU0zUml4TlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlEzSkVMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUjBGQlJ5eFhRVUZYTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRPVVVzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZGtNc1QwRkJUeXhOUVVGTkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0RFFVTkdPMEZCYWtORUxEaENRV2xEUXp0QlFVVkVMRTFCUVdFc1owSkJRV2RDTzBsQlJ6TkNMRmxCUVc5Q0xFbEJRWGRDTzFGQlFYaENMRk5CUVVrc1IwRkJTaXhKUVVGSkxFTkJRVzlDTzFGQlJuQkRMRk5CUVVrc1IwRkJiVU1zUlVGQlJTeERRVUZETzBsQlJVZ3NRMEZCUXp0SlFVVjZReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFXMUNPMUZCUTNoRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRk8xbEJRek5DTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTnlReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkROVUlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03VTBGRE9VSTdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdTVUZEYUVNc1EwRkJRenRKUVVWTkxFdEJRVXNzUTBGQlF5eFBRVUZQTEV0QlFVa3NRMEZCUXp0RFFVTXhRanRCUVdaRUxEUkRRV1ZESW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/fft/single_fft.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/fifo/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/fifo/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MemoryFifo = void 0;\nclass MemoryFifo {\n    constructor() {\n        this.waiting = [];\n        this.items = [];\n        this.flushing = false;\n    }\n    length() {\n        return this.items.length;\n    }\n    /**\n     * Returns next item within the queue, or blocks until and item has been put into the queue.\n     * If given a timeout, the promise will reject if no item is received after `timeout` seconds.\n     * If the queue is flushing, `null` is returned.\n     */\n    get(timeout) {\n        if (this.items.length) {\n            return Promise.resolve(this.items.shift());\n        }\n        if (this.items.length === 0 && this.flushing) {\n            return Promise.resolve(null);\n        }\n        return new Promise((resolve, reject) => {\n            this.waiting.push(resolve);\n            if (timeout) {\n                setTimeout(() => {\n                    const index = this.waiting.findIndex(r => r === resolve);\n                    if (index > -1) {\n                        this.waiting.splice(index, 1);\n                        const err = new Error('Timeout getting item from queue.');\n                        reject(err);\n                    }\n                }, timeout * 1000);\n            }\n        });\n    }\n    /**\n     * Put an item onto back of the queue.\n     */\n    put(item) {\n        if (this.flushing) {\n            return;\n        }\n        else if (this.waiting.length) {\n            this.waiting.shift()(item);\n        }\n        else {\n            this.items.push(item);\n        }\n    }\n    /**\n     * Once ended, no further items are added to queue. Consumers will consume remaining items within the queue.\n     * The queue is not reusable after calling `end()`.\n     */\n    end() {\n        this.flushing = true;\n        this.waiting.forEach(resolve => resolve(null));\n    }\n    /**\n     * Once cancelled, all items are discarded from the queue.\n     * The queue is not reusable after calling `cancel()`.\n     */\n    cancel() {\n        this.flushing = true;\n        this.items = [];\n        this.waiting.forEach(resolve => resolve(null));\n    }\n    /**\n     * Helper method that can be used to continously consume and process items on the queue.\n     */\n    async process(handler) {\n        try {\n            while (true) {\n                const item = await this.get();\n                if (item === null) {\n                    break;\n                }\n                await handler(item);\n            }\n        }\n        catch (err) {\n            // tslint:disable:no-console\n            console.error('Queue handler exception:', err);\n        }\n    }\n}\nexports.MemoryFifo = MemoryFifo;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmlmby9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFhLFVBQVU7SUFBdkI7UUFDVSxZQUFPLEdBQWlDLEVBQUUsQ0FBQztRQUMzQyxVQUFLLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFxRjNCLENBQUM7SUFuRlEsTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsT0FBZ0I7UUFDekIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUcsQ0FBQyxDQUFDO1NBQzdDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUM1QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLElBQUksT0FBTyxDQUFXLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTNCLElBQUksT0FBTyxFQUFFO2dCQUNYLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUM7b0JBQ3pELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzt3QkFDOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQzt3QkFDMUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNiO2dCQUNILENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDcEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLEdBQUcsQ0FBQyxJQUFPO1FBQ2hCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixPQUFPO1NBQ1I7YUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNJLEdBQUc7UUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNO1FBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQW1DO1FBQ3RELElBQUk7WUFDRixPQUFPLElBQUksRUFBRTtnQkFDWCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDOUIsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO29CQUNqQixNQUFNO2lCQUNQO2dCQUNELE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JCO1NBQ0Y7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLDRCQUE0QjtZQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQztDQUNGO0FBeEZELGdDQXdGQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/fifo/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/iso_fetch/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/iso_fetch/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetch = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst detect_node_1 = (0, tslib_1.__importDefault)(__webpack_require__(/*! detect-node */ \"./node_modules/detect-node/browser.js\"));\nfunction fetch(input, init) {\n    if (detect_node_1.default) {\n        // eslint-disable-next-line\n        const f = (__webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/browser.js\")[\"default\"]);\n        return f(input, init);\n    }\n    else {\n        if (typeof window !== 'undefined' && window.fetch)\n            return window.fetch(input, init);\n        if (typeof self !== 'undefined' && self.fetch)\n            return self.fetch(input, init);\n        throw new Error('`fetch` api unavailable.');\n    }\n}\nexports.fetch = fetch;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaXNvX2ZldGNoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyRUFBaUM7QUFFakMsU0FBZ0IsS0FBSyxDQUFDLEtBQWtCLEVBQUUsSUFBa0I7SUFDMUQsSUFBSSxxQkFBTSxFQUFFO1FBQ1YsMkJBQTJCO1FBQzNCLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDeEMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3ZCO1NBQU07UUFDTCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsS0FBSztZQUFFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEYsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUM3QztBQUNILENBQUM7QUFWRCxzQkFVQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9pc29fZmV0Y2gvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLG1EQUFtRCxtQkFBTyxDQUFDLDBEQUFhO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwRkFBNkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2lzb19mZXRjaC9pbmRleC5qcz8yODlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mZXRjaCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBkZXRlY3Rfbm9kZV8xID0gKDAsIHRzbGliXzEuX19pbXBvcnREZWZhdWx0KShyZXF1aXJlKFwiZGV0ZWN0LW5vZGVcIikpO1xuZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgICBpZiAoZGV0ZWN0X25vZGVfMS5kZWZhdWx0KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCBmID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpLmRlZmF1bHQ7XG4gICAgICAgIHJldHVybiBmKGlucHV0LCBpbml0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZmV0Y2gpXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmZldGNoKGlucHV0LCBpbml0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmZldGNoKVxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmV0Y2goaW5wdXQsIGluaXQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmZXRjaGAgYXBpIHVuYXZhaWxhYmxlLicpO1xuICAgIH1cbn1cbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZhWE52WDJabGRHTm9MMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGQlFTd3lSVUZCYVVNN1FVRkZha01zVTBGQlowSXNTMEZCU3l4RFFVRkRMRXRCUVd0Q0xFVkJRVVVzU1VGQmEwSTdTVUZETVVRc1NVRkJTU3h4UWtGQlRTeEZRVUZGTzFGQlExWXNNa0pCUVRKQ08xRkJRek5DTEUxQlFVMHNRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZEZUVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNaQ08xTkJRVTA3VVVGRFRDeEpRVUZKTEU5QlFVOHNUVUZCVFN4TFFVRkxMRmRCUVZjc1NVRkJTU3hOUVVGTkxFTkJRVU1zUzBGQlN6dFpRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEY0VZc1NVRkJTU3hQUVVGUExFbEJRVWtzUzBGQlN5eFhRVUZYTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzN1dVRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRemxGTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0TFFVTTNRenRCUVVOSUxFTkJRVU03UVVGV1JDeHpRa0ZWUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/iso_fetch/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/log/console.js":
/*!******************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/log/console.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createLogger = void 0;\nclass ConsoleLogger {\n    constructor(prefix, logger = console.log) {\n        this.prefix = prefix;\n        this.logger = logger;\n    }\n    log(...args) {\n        this.logger(`${this.prefix}:`, ...args);\n    }\n}\nfunction createLogger(prefix) {\n    if (prefix) {\n        const logger = new ConsoleLogger(prefix, console.log);\n        return (...args) => logger.log(...args);\n    }\n    return console.log;\n}\nexports.createLogger = createLogger;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2cvY29uc29sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFNLGFBQWE7SUFDakIsWUFBb0IsTUFBYyxFQUFVLFNBQW1DLE9BQU8sQ0FBQyxHQUFHO1FBQXRFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUF3QztJQUFHLENBQUM7SUFFdkYsR0FBRyxDQUFDLEdBQUcsSUFBVztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLE1BQWM7SUFDekMsSUFBSSxNQUFNLEVBQUU7UUFDVixNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQ3JCLENBQUM7QUFORCxvQ0FNQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9sb2cvY29uc29sZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9sb2cvY29uc29sZS5qcz9lZDRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVMb2dnZXIgPSB2b2lkIDA7XG5jbGFzcyBDb25zb2xlTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihwcmVmaXgsIGxvZ2dlciA9IGNvbnNvbGUubG9nKSB7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB9XG4gICAgbG9nKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIoYCR7dGhpcy5wcmVmaXh9OmAsIC4uLmFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihwcmVmaXgpIHtcbiAgICBpZiAocHJlZml4KSB7XG4gICAgICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKHByZWZpeCwgY29uc29sZS5sb2cpO1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IGxvZ2dlci5sb2coLi4uYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBjb25zb2xlLmxvZztcbn1cbmV4cG9ydHMuY3JlYXRlTG9nZ2VyID0gY3JlYXRlTG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5dWMyOXNaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXNiMmN2WTI5dWMyOXNaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkZRU3hOUVVGTkxHRkJRV0U3U1VGRGFrSXNXVUZCYjBJc1RVRkJZeXhGUVVGVkxGTkJRVzFETEU5QlFVOHNRMEZCUXl4SFFVRkhPMUZCUVhSRkxGZEJRVTBzUjBGQlRpeE5RVUZOTEVOQlFWRTdVVUZCVlN4WFFVRk5MRWRCUVU0c1RVRkJUU3hEUVVGM1F6dEpRVUZITEVOQlFVTTdTVUZGZGtZc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlZ6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE1VTXNRMEZCUXp0RFFVTkdPMEZCUlVRc1UwRkJaMElzV1VGQldTeERRVUZETEUxQlFXTTdTVUZEZWtNc1NVRkJTU3hOUVVGTkxFVkJRVVU3VVVGRFZpeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMR0ZCUVdFc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNSRUxFOUJRVThzUTBGQlF5eEhRVUZITEVsQlFWY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTJoRU8wbEJRMFFzVDBGQlR5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTNKQ0xFTkJRVU03UVVGT1JDeHZRMEZOUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/log/console.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/log/debug.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/log/debug.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEnabled = exports.enableLogs = exports.setPostDebugLogHook = exports.setPreDebugLogHook = exports.createDebugLogger = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst debug_1 = (0, tslib_1.__importDefault)(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nlet preLogHook;\nlet postLogHook;\nfunction theFunctionThroughWhichAllLogsPass(logger, ...args) {\n    if (preLogHook) {\n        preLogHook(...args);\n    }\n    logger(...args);\n    if (postLogHook) {\n        postLogHook(...args);\n    }\n}\nfunction createDebugLogger(name) {\n    const logger = (0, debug_1.default)(name);\n    return (...args) => theFunctionThroughWhichAllLogsPass(logger, ...args);\n}\nexports.createDebugLogger = createDebugLogger;\nfunction setPreDebugLogHook(fn) {\n    preLogHook = fn;\n}\nexports.setPreDebugLogHook = setPreDebugLogHook;\nfunction setPostDebugLogHook(fn) {\n    postLogHook = fn;\n}\nexports.setPostDebugLogHook = setPostDebugLogHook;\nfunction enableLogs(str) {\n    debug_1.default.enable(str);\n}\nexports.enableLogs = enableLogs;\nfunction isEnabled(str) {\n    return debug_1.default.enabled(str);\n}\nexports.isEnabled = isEnabled;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9nL2RlYnVnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwrREFBMEI7QUFFMUIsSUFBSSxVQUFrRCxDQUFDO0FBQ3ZELElBQUksV0FBbUQsQ0FBQztBQUV4RCxTQUFTLGtDQUFrQyxDQUFDLE1BQVcsRUFBRSxHQUFHLElBQVc7SUFDckUsSUFBSSxVQUFVLEVBQUU7UUFDZCxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNyQjtJQUNELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2hCLElBQUksV0FBVyxFQUFFO1FBQ2YsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBWTtJQUM1QyxNQUFNLE1BQU0sR0FBRyxJQUFBLGVBQUssRUFBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixPQUFPLENBQUMsR0FBRyxJQUFXLEVBQUUsRUFBRSxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2pGLENBQUM7QUFIRCw4Q0FHQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLEVBQTRCO0lBQzdELFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDbEIsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsRUFBNEI7SUFDOUQsV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNuQixDQUFDO0FBRkQsa0RBRUM7QUFFRCxTQUFnQixVQUFVLENBQUMsR0FBVztJQUNwQyxlQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFGRCxnQ0FFQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxHQUFXO0lBQ25DLE9BQU8sZUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRkQsOEJBRUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9sb2cvZGVidWcuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsa0JBQWtCLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcseUJBQXlCO0FBQzdILGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLDZDQUE2QyxtQkFBTyxDQUFDLGtEQUFPO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2xvZy9kZWJ1Zy5qcz83ZTcwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VuYWJsZWQgPSBleHBvcnRzLmVuYWJsZUxvZ3MgPSBleHBvcnRzLnNldFBvc3REZWJ1Z0xvZ0hvb2sgPSBleHBvcnRzLnNldFByZURlYnVnTG9nSG9vayA9IGV4cG9ydHMuY3JlYXRlRGVidWdMb2dnZXIgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY29uc3QgZGVidWdfMSA9ICgwLCB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdCkocmVxdWlyZShcImRlYnVnXCIpKTtcbmxldCBwcmVMb2dIb29rO1xubGV0IHBvc3RMb2dIb29rO1xuZnVuY3Rpb24gdGhlRnVuY3Rpb25UaHJvdWdoV2hpY2hBbGxMb2dzUGFzcyhsb2dnZXIsIC4uLmFyZ3MpIHtcbiAgICBpZiAocHJlTG9nSG9vaykge1xuICAgICAgICBwcmVMb2dIb29rKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBsb2dnZXIoLi4uYXJncyk7XG4gICAgaWYgKHBvc3RMb2dIb29rKSB7XG4gICAgICAgIHBvc3RMb2dIb29rKC4uLmFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnTG9nZ2VyKG5hbWUpIHtcbiAgICBjb25zdCBsb2dnZXIgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShuYW1lKTtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHRoZUZ1bmN0aW9uVGhyb3VnaFdoaWNoQWxsTG9nc1Bhc3MobG9nZ2VyLCAuLi5hcmdzKTtcbn1cbmV4cG9ydHMuY3JlYXRlRGVidWdMb2dnZXIgPSBjcmVhdGVEZWJ1Z0xvZ2dlcjtcbmZ1bmN0aW9uIHNldFByZURlYnVnTG9nSG9vayhmbikge1xuICAgIHByZUxvZ0hvb2sgPSBmbjtcbn1cbmV4cG9ydHMuc2V0UHJlRGVidWdMb2dIb29rID0gc2V0UHJlRGVidWdMb2dIb29rO1xuZnVuY3Rpb24gc2V0UG9zdERlYnVnTG9nSG9vayhmbikge1xuICAgIHBvc3RMb2dIb29rID0gZm47XG59XG5leHBvcnRzLnNldFBvc3REZWJ1Z0xvZ0hvb2sgPSBzZXRQb3N0RGVidWdMb2dIb29rO1xuZnVuY3Rpb24gZW5hYmxlTG9ncyhzdHIpIHtcbiAgICBkZWJ1Z18xLmRlZmF1bHQuZW5hYmxlKHN0cik7XG59XG5leHBvcnRzLmVuYWJsZUxvZ3MgPSBlbmFibGVMb2dzO1xuZnVuY3Rpb24gaXNFbmFibGVkKHN0cikge1xuICAgIHJldHVybiBkZWJ1Z18xLmRlZmF1bHQuZW5hYmxlZChzdHIpO1xufVxuZXhwb3J0cy5pc0VuYWJsZWQgPSBpc0VuYWJsZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laR1ZpZFdjdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12Ykc5bkwyUmxZblZuTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZCUVN3clJFRkJNRUk3UVVGRk1VSXNTVUZCU1N4VlFVRnJSQ3hEUVVGRE8wRkJRM1pFTEVsQlFVa3NWMEZCYlVRc1EwRkJRenRCUVVWNFJDeFRRVUZUTEd0RFFVRnJReXhEUVVGRExFMUJRVmNzUlVGQlJTeEhRVUZITEVsQlFWYzdTVUZEY2tVc1NVRkJTU3hWUVVGVkxFVkJRVVU3VVVGRFpDeFZRVUZWTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOeVFqdEpRVU5FTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMmhDTEVsQlFVa3NWMEZCVnl4RlFVRkZPMUZCUTJZc1YwRkJWeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEZEVJN1FVRkRTQ3hEUVVGRE8wRkJSVVFzVTBGQlowSXNhVUpCUVdsQ0xFTkJRVU1zU1VGQldUdEpRVU0xUXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGQkxHVkJRVXNzUlVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTXpRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eEpRVUZYTEVWQlFVVXNSVUZCUlN4RFFVRkRMR3REUVVGclF5eERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBHTEVOQlFVTTdRVUZJUkN3NFEwRkhRenRCUVVWRUxGTkJRV2RDTEd0Q1FVRnJRaXhEUVVGRExFVkJRVFJDTzBsQlF6ZEVMRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNRMEZCUXp0QlFVWkVMR2RFUVVWRE8wRkJSVVFzVTBGQlowSXNiVUpCUVcxQ0xFTkJRVU1zUlVGQk5FSTdTVUZET1VRc1YwRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU51UWl4RFFVRkRPMEZCUmtRc2EwUkJSVU03UVVGRlJDeFRRVUZuUWl4VlFVRlZMRU5CUVVNc1IwRkJWenRKUVVOd1F5eGxRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM0JDTEVOQlFVTTdRVUZHUkN4blEwRkZRenRCUVVWRUxGTkJRV2RDTEZOQlFWTXNRMEZCUXl4SFFVRlhPMGxCUTI1RExFOUJRVThzWlVGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNMVFpeERRVUZETzBGQlJrUXNPRUpCUlVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/log/debug.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/log/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/log/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./console */ \"./node_modules/@noir-lang/barretenberg/dest/log/console.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./debug */ \"./node_modules/@noir-lang/barretenberg/dest/log/debug.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbG9nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUEwQjtBQUMxQix1REFBd0IifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9sb2cvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsNkVBQVc7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMseUVBQVM7QUFDM0MsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L2xvZy9pbmRleC5qcz82MmU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vY29uc29sZVwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2RlYnVnXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZiRzluTDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMSGxFUVVFd1FqdEJRVU14UWl4MVJFRkJkMElpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/log/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HashPath = void 0;\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nclass HashPath {\n    constructor(data = []) {\n        this.data = data;\n    }\n    toBuffer() {\n        const elements = this.data.map(nodes => Buffer.concat([nodes[0], nodes[1]]));\n        return (0, serialize_1.serializeBufferArrayToVector)(elements);\n    }\n    static fromBuffer(buf, offset = 0) {\n        const { elem } = HashPath.deserialize(buf, offset);\n        return elem;\n    }\n    static deserialize(buf, offset = 0) {\n        const deserializePath = (buf, offset) => ({\n            elem: [buf.slice(offset, offset + 32), buf.slice(offset + 32, offset + 64)],\n            adv: 64,\n        });\n        const { elem, adv } = (0, serialize_1.deserializeArrayFromVector)(deserializePath, buf, offset);\n        return { elem: new HashPath(elem), adv };\n    }\n}\nexports.HashPath = HashPath;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9wYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lcmtsZV90cmVlL2hhc2hfcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBd0Y7QUFFeEYsTUFBYSxRQUFRO0lBQ25CLFlBQW1CLE9BQW1CLEVBQUU7UUFBckIsU0FBSSxHQUFKLElBQUksQ0FBaUI7SUFBRyxDQUFDO0lBRXJDLFFBQVE7UUFDYixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdFLE9BQU8sSUFBQSx3Q0FBNEIsRUFBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXLEVBQUUsTUFBTSxHQUFHLENBQUM7UUFDdkMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVyxFQUFFLE1BQU0sR0FBRyxDQUFDO1FBQ3hDLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztZQUMzRSxHQUFHLEVBQUUsRUFBRTtTQUNSLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBQSxzQ0FBMEIsRUFBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9FLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBckJELDRCQXFCQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9tZXJrbGVfdHJlZS9oYXNoX3BhdGguanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELE1BQU07QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdCQUFnQixZQUFZO0FBQzVCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9tZXJrbGVfdHJlZS9oYXNoX3BhdGguanM/OGUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGFzaFBhdGggPSB2b2lkIDA7XG5jb25zdCBzZXJpYWxpemVfMSA9IHJlcXVpcmUoXCIuLi9zZXJpYWxpemVcIik7XG5jbGFzcyBIYXNoUGF0aCB7XG4gICAgY29uc3RydWN0b3IoZGF0YSA9IFtdKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuZGF0YS5tYXAobm9kZXMgPT4gQnVmZmVyLmNvbmNhdChbbm9kZXNbMF0sIG5vZGVzWzFdXSkpO1xuICAgICAgICByZXR1cm4gKDAsIHNlcmlhbGl6ZV8xLnNlcmlhbGl6ZUJ1ZmZlckFycmF5VG9WZWN0b3IpKGVsZW1lbnRzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CdWZmZXIoYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbSB9ID0gSGFzaFBhdGguZGVzZXJpYWxpemUoYnVmLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG4gICAgc3RhdGljIGRlc2VyaWFsaXplKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBkZXNlcmlhbGl6ZVBhdGggPSAoYnVmLCBvZmZzZXQpID0+ICh7XG4gICAgICAgICAgICBlbGVtOiBbYnVmLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMzIpLCBidWYuc2xpY2Uob2Zmc2V0ICsgMzIsIG9mZnNldCArIDY0KV0sXG4gICAgICAgICAgICBhZHY6IDY0LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBlbGVtLCBhZHYgfSA9ICgwLCBzZXJpYWxpemVfMS5kZXNlcmlhbGl6ZUFycmF5RnJvbVZlY3RvcikoZGVzZXJpYWxpemVQYXRoLCBidWYsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiB7IGVsZW06IG5ldyBIYXNoUGF0aChlbGVtKSwgYWR2IH07XG4gICAgfVxufVxuZXhwb3J0cy5IYXNoUGF0aCA9IEhhc2hQYXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYUdGemFGOXdZWFJvTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMMjFsY210c1pWOTBjbVZsTDJoaGMyaGZjR0YwYUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN3MFEwRkJkMFk3UVVGRmVFWXNUVUZCWVN4UlFVRlJPMGxCUTI1Q0xGbEJRVzFDTEU5QlFXMUNMRVZCUVVVN1VVRkJja0lzVTBGQlNTeEhRVUZLTEVsQlFVa3NRMEZCYVVJN1NVRkJSeXhEUVVGRE8wbEJSWEpETEZGQlFWRTdVVUZEWWl4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRemRGTEU5QlFVOHNTVUZCUVN4M1EwRkJORUlzUlVGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTm9SQ3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRlhMRVZCUVVVc1RVRkJUU3hIUVVGSExFTkJRVU03VVVGRGRrTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMjVFTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWRUxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCVnl4RlFVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRE8xRkJRM2hETEUxQlFVMHNaVUZCWlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTjRReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzUlVGQlJTeEZRVUZGTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVNelJTeEhRVUZITEVWQlFVVXNSVUZCUlR0VFFVTlNMRU5CUVVNc1EwRkJRenRSUVVOSUxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJRU3h6UTBGQk1FSXNSVUZCUXl4bFFVRmxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzFGQlF5OUZMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRE0wTXNRMEZCUXp0RFFVTkdPMEZCY2tKRUxEUkNRWEZDUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hasher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hasher.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lcmtsZV90cmVlL2hhc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9tZXJrbGVfdHJlZS9oYXNoZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L21lcmtsZV90cmVlL2hhc2hlci5qcz9hNjFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYUdGemFHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyMWxjbXRzWlY5MGNtVmxMMmhoYzJobGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hasher.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/merkle_tree/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/merkle_tree/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./hash_path */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./memory_merkle_tree */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/memory_merkle_tree.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./hasher */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hasher.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./merkle_tree */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/merkle_tree.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWVya2xlX3RyZWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkRBQTRCO0FBQzVCLG9FQUFxQztBQUNyQyx3REFBeUI7QUFDekIsNkRBQThCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9tZXJrbGVfdHJlZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxxRkFBTztBQUMvQiwwQkFBMEIsbUJBQU8sQ0FBQyx5RkFBYTtBQUMvQywwQkFBMEIsbUJBQU8sQ0FBQywyR0FBc0I7QUFDeEQsMEJBQTBCLG1CQUFPLENBQUMsbUZBQVU7QUFDNUMsMEJBQTBCLG1CQUFPLENBQUMsNkZBQWU7QUFDakQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L21lcmtsZV90cmVlL2luZGV4LmpzP2VlYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9oYXNoX3BhdGhcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9tZW1vcnlfbWVya2xlX3RyZWVcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9oYXNoZXJcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9tZXJrbGVfdHJlZVwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YldWeWEyeGxYM1J5WldVdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzTWtSQlFUUkNPMEZCUXpWQ0xHOUZRVUZ4UXp0QlFVTnlReXgzUkVGQmVVSTdRVUZEZWtJc05rUkJRVGhDSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/merkle_tree/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/merkle_tree/memory_merkle_tree.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/merkle_tree/memory_merkle_tree.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MemoryMerkleTree = void 0;\nconst hash_path_1 = __webpack_require__(/*! ./hash_path */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js\");\n/**\n * An 'in-memory' implementation of an immutable Merkle Tree\n * Is provided a set of values (size must be a power of 2) and hashes them into a tree\n * Will then provide the root, size and hash path on request\n */\nclass MemoryMerkleTree {\n    constructor(notes, hasher) {\n        this.notes = notes;\n        this.hasher = hasher;\n        this.hashes = [];\n        const isPowerOf2 = (v) => v && !(v & (v - 1));\n        if (!isPowerOf2(notes.length)) {\n            throw new Error('MemoryMerkleTree can only handle powers of 2.');\n        }\n    }\n    getHashPath(index) {\n        if (index < 0 || index >= this.notes.length) {\n            throw new Error('Index out of bounds');\n        }\n        if (!Number.isInteger(index)) {\n            throw new Error('Index invalid');\n        }\n        const hashPath = [];\n        let layerSize = this.notes.length;\n        let offset = 0;\n        while (layerSize > 1) {\n            const hashIndex = index + offset;\n            offset += layerSize;\n            const hashes = index % 2\n                ? [this.hashes[hashIndex - 1], this.hashes[hashIndex]]\n                : [this.hashes[hashIndex], this.hashes[hashIndex + 1]];\n            hashPath.push(hashes);\n            index >>= 1;\n            layerSize >>= 1;\n        }\n        return new hash_path_1.HashPath(hashPath);\n    }\n    getRoot() {\n        return this.hashes[this.hashes.length - 1];\n    }\n    getSize() {\n        return this.notes.length;\n    }\n    static async new(notes, hasher) {\n        const tree = new MemoryMerkleTree(notes, hasher);\n        await tree.buildTree();\n        return tree;\n    }\n    async buildTree() {\n        this.hashes = await this.hasher.hashToTree(this.notes);\n    }\n}\nexports.MemoryMerkleTree = MemoryMerkleTree;\nMemoryMerkleTree.ZERO_ELEMENT = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5X21lcmtsZV90cmVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lcmtsZV90cmVlL21lbW9yeV9tZXJrbGVfdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwyQ0FBdUM7QUFFdkM7Ozs7R0FJRztBQUNILE1BQWEsZ0JBQWdCO0lBSTNCLFlBQTRCLEtBQWUsRUFBVSxNQUFjO1FBQXZDLFVBQUssR0FBTCxLQUFLLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSDNELFdBQU0sR0FBYSxFQUFFLENBQUM7UUFJNUIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUFhO1FBQzlCLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNsQztRQUNELE1BQU0sUUFBUSxHQUFlLEVBQUUsQ0FBQztRQUNoQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixPQUFPLFNBQVMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxTQUFTLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztZQUNqQyxNQUFNLElBQUksU0FBUyxDQUFDO1lBQ3BCLE1BQU0sTUFBTSxHQUNWLEtBQUssR0FBRyxDQUFDO2dCQUNQLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDWixTQUFTLEtBQUssQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxJQUFJLG9CQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFlLEVBQUUsTUFBYztRQUNyRCxNQUFNLElBQUksR0FBRyxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN2QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxLQUFLLENBQUMsU0FBUztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7O0FBbkRILDRDQW9EQztBQWxEZSw2QkFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9tZXJrbGVfdHJlZS9tZW1vcnlfbWVya2xlX3RyZWUuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixvQkFBb0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixnQ0FBZ0MsTUFBTTtBQUN0QywyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvbWVya2xlX3RyZWUvbWVtb3J5X21lcmtsZV90cmVlLmpzP2M3NTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lbW9yeU1lcmtsZVRyZWUgPSB2b2lkIDA7XG5jb25zdCBoYXNoX3BhdGhfMSA9IHJlcXVpcmUoXCIuL2hhc2hfcGF0aFwiKTtcbi8qKlxuICogQW4gJ2luLW1lbW9yeScgaW1wbGVtZW50YXRpb24gb2YgYW4gaW1tdXRhYmxlIE1lcmtsZSBUcmVlXG4gKiBJcyBwcm92aWRlZCBhIHNldCBvZiB2YWx1ZXMgKHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIDIpIGFuZCBoYXNoZXMgdGhlbSBpbnRvIGEgdHJlZVxuICogV2lsbCB0aGVuIHByb3ZpZGUgdGhlIHJvb3QsIHNpemUgYW5kIGhhc2ggcGF0aCBvbiByZXF1ZXN0XG4gKi9cbmNsYXNzIE1lbW9yeU1lcmtsZVRyZWUge1xuICAgIGNvbnN0cnVjdG9yKG5vdGVzLCBoYXNoZXIpIHtcbiAgICAgICAgdGhpcy5ub3RlcyA9IG5vdGVzO1xuICAgICAgICB0aGlzLmhhc2hlciA9IGhhc2hlcjtcbiAgICAgICAgdGhpcy5oYXNoZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaXNQb3dlck9mMiA9ICh2KSA9PiB2ICYmICEodiAmICh2IC0gMSkpO1xuICAgICAgICBpZiAoIWlzUG93ZXJPZjIobm90ZXMubGVuZ3RoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZW1vcnlNZXJrbGVUcmVlIGNhbiBvbmx5IGhhbmRsZSBwb3dlcnMgb2YgMi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRIYXNoUGF0aChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubm90ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4IG91dCBvZiBib3VuZHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoaW5kZXgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4IGludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNoUGF0aCA9IFtdO1xuICAgICAgICBsZXQgbGF5ZXJTaXplID0gdGhpcy5ub3Rlcy5sZW5ndGg7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICB3aGlsZSAobGF5ZXJTaXplID4gMSkge1xuICAgICAgICAgICAgY29uc3QgaGFzaEluZGV4ID0gaW5kZXggKyBvZmZzZXQ7XG4gICAgICAgICAgICBvZmZzZXQgKz0gbGF5ZXJTaXplO1xuICAgICAgICAgICAgY29uc3QgaGFzaGVzID0gaW5kZXggJSAyXG4gICAgICAgICAgICAgICAgPyBbdGhpcy5oYXNoZXNbaGFzaEluZGV4IC0gMV0sIHRoaXMuaGFzaGVzW2hhc2hJbmRleF1dXG4gICAgICAgICAgICAgICAgOiBbdGhpcy5oYXNoZXNbaGFzaEluZGV4XSwgdGhpcy5oYXNoZXNbaGFzaEluZGV4ICsgMV1dO1xuICAgICAgICAgICAgaGFzaFBhdGgucHVzaChoYXNoZXMpO1xuICAgICAgICAgICAgaW5kZXggPj49IDE7XG4gICAgICAgICAgICBsYXllclNpemUgPj49IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBoYXNoX3BhdGhfMS5IYXNoUGF0aChoYXNoUGF0aCk7XG4gICAgfVxuICAgIGdldFJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hlc1t0aGlzLmhhc2hlcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90ZXMubGVuZ3RoO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgbmV3KG5vdGVzLCBoYXNoZXIpIHtcbiAgICAgICAgY29uc3QgdHJlZSA9IG5ldyBNZW1vcnlNZXJrbGVUcmVlKG5vdGVzLCBoYXNoZXIpO1xuICAgICAgICBhd2FpdCB0cmVlLmJ1aWxkVHJlZSgpO1xuICAgICAgICByZXR1cm4gdHJlZTtcbiAgICB9XG4gICAgYXN5bmMgYnVpbGRUcmVlKCkge1xuICAgICAgICB0aGlzLmhhc2hlcyA9IGF3YWl0IHRoaXMuaGFzaGVyLmhhc2hUb1RyZWUodGhpcy5ub3Rlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5NZW1vcnlNZXJrbGVUcmVlID0gTWVtb3J5TWVya2xlVHJlZTtcbk1lbW9yeU1lcmtsZVRyZWUuWkVST19FTEVNRU5UID0gQnVmZmVyLmZyb20oJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAnaGV4Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liV1Z0YjNKNVgyMWxjbXRzWlY5MGNtVmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyMWxjbXRzWlY5MGNtVmxMMjFsYlc5eWVWOXRaWEpyYkdWZmRISmxaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkRRU3d5UTBGQmRVTTdRVUZGZGtNN096czdSMEZKUnp0QlFVTklMRTFCUVdFc1owSkJRV2RDTzBsQlNUTkNMRmxCUVRSQ0xFdEJRV1VzUlVGQlZTeE5RVUZqTzFGQlFYWkRMRlZCUVVzc1IwRkJUQ3hMUVVGTExFTkJRVlU3VVVGQlZTeFhRVUZOTEVkQlFVNHNUVUZCVFN4RFFVRlJPMUZCU0RORUxGZEJRVTBzUjBGQllTeEZRVUZGTEVOQlFVTTdVVUZKTlVJc1RVRkJUU3hWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZUTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdXVUZETjBJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5d3JRMEZCSzBNc1EwRkJReXhEUVVGRE8xTkJRMnhGTzBsQlEwZ3NRMEZCUXp0SlFVVk5MRmRCUVZjc1EwRkJReXhMUVVGaE8xRkJRemxDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3hMUVVGTExFbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVN1dVRkRNME1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzFOQlEzaERPMUZCUTBRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkROVUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRUUVVOc1F6dFJRVU5FTEUxQlFVMHNVVUZCVVN4SFFVRmxMRVZCUVVVc1EwRkJRenRSUVVOb1F5eEpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5zUXl4SlFVRkpMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFppeFBRVUZQTEZOQlFWTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1dVRkRjRUlzVFVGQlRTeFRRVUZUTEVkQlFVY3NTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJRenRaUVVOcVF5eE5RVUZOTEVsQlFVa3NVMEZCVXl4RFFVRkRPMWxCUTNCQ0xFMUJRVTBzVFVGQlRTeEhRVU5XTEV0QlFVc3NSMEZCUnl4RFFVRkRPMmRDUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03WjBKQlEzUkVMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelJDeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xbEJRM1JDTEV0QlFVc3NTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRXaXhUUVVGVExFdEJRVXNzUTBGQlF5eERRVUZETzFOQlEycENPMUZCUTBRc1QwRkJUeXhKUVVGSkxHOUNRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRhRU1zUTBGQlF6dEpRVVZOTEU5QlFVODdVVUZEV2l4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE4wTXNRMEZCUXp0SlFVVk5MRTlCUVU4N1VVRkRXaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUXpOQ0xFTkJRVU03U1VGRlRTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGbExFVkJRVVVzVFVGQll6dFJRVU55UkN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxHZENRVUZuUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU5xUkN4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU4yUWl4UFFVRlBMRWxCUVVrc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRlR5eExRVUZMTEVOQlFVTXNVMEZCVXp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNwRUxFTkJRVU03TzBGQmJrUklMRFJEUVc5RVF6dEJRV3hFWlN3MlFrRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMFZCUVd0RkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/merkle_tree/memory_merkle_tree.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/merkle_tree/merkle_tree.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/merkle_tree/merkle_tree.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MerkleTree = void 0;\nconst hash_path_1 = __webpack_require__(/*! ./hash_path */ \"./node_modules/@noir-lang/barretenberg/dest/merkle_tree/hash_path.js\");\nconst MAX_DEPTH = 32;\nfunction keepNLsb(input, numBits) {\n    return numBits >= MAX_DEPTH ? input : input & ((1 << numBits) - 1);\n}\nclass MerkleTree {\n    constructor(db, hasher, name, depth, size = 0, root, initialLeafValue = MerkleTree.ZERO_ELEMENT) {\n        this.db = db;\n        this.hasher = hasher;\n        this.name = name;\n        this.depth = depth;\n        this.size = size;\n        this.initialLeafValue = initialLeafValue;\n        this.zeroHashes = [];\n        if (!(depth >= 1 && depth <= MAX_DEPTH)) {\n            throw Error('Bad depth');\n        }\n        // Compute the zero values at each layer.\n        let current = initialLeafValue;\n        for (let i = 0; i < depth; ++i) {\n            this.zeroHashes[i] = current;\n            current = hasher.compress(current, current);\n        }\n        this.root = root ? root : current;\n    }\n    static async new(db, hasher, name, depth, initialLeafValue = MerkleTree.ZERO_ELEMENT) {\n        const tree = new MerkleTree(db, hasher, name, depth, 0, undefined, initialLeafValue);\n        await tree.writeMeta();\n        return tree;\n    }\n    static async fromName(db, hasher, name, initialLeafValue = MerkleTree.ZERO_ELEMENT) {\n        const meta = await db.get(Buffer.from(name));\n        const root = meta.slice(0, 32);\n        const depth = meta.readUInt32LE(32);\n        const size = meta.readUInt32LE(36);\n        return new MerkleTree(db, hasher, name, depth, size, root, initialLeafValue);\n    }\n    async syncFromDb() {\n        const meta = await this.db.get(Buffer.from(this.name));\n        this.root = meta.slice(0, 32);\n        this.depth = meta.readUInt32LE(32);\n        this.size = meta.readUInt32LE(36);\n    }\n    async writeMeta(batch) {\n        const data = Buffer.alloc(40);\n        this.root.copy(data);\n        data.writeUInt32LE(this.depth, 32);\n        data.writeUInt32LE(this.size, 36);\n        if (batch) {\n            batch.put(this.name, data);\n        }\n        else {\n            await this.db.put(this.name, data);\n        }\n    }\n    getRoot() {\n        return this.root;\n    }\n    getSize() {\n        return this.size;\n    }\n    /**\n     * Returns a hash path for the element at the given index.\n     * The hash path is an array of pairs of hashes, with the lowest pair (leaf hashes) first, and the highest pair last.\n     */\n    async getHashPath(index) {\n        const path = new hash_path_1.HashPath();\n        let data = await this.dbGet(this.root);\n        for (let i = this.depth - 1; i >= 0; --i) {\n            if (!data) {\n                // This is an empty subtree. Fill in zero value.\n                path.data[i] = [this.zeroHashes[i], this.zeroHashes[i]];\n                continue;\n            }\n            if (data.length > 64) {\n                // Data is a subtree. Extract hash pair at height i.\n                const subtreeDepth = i + 1;\n                let layerSize = 2 ** subtreeDepth;\n                let offset = 0;\n                index = keepNLsb(index, subtreeDepth);\n                for (let j = 0; j < subtreeDepth; ++j) {\n                    index -= index & 0x1;\n                    const lhsOffset = offset + index * 32;\n                    path.data[j] = [data.slice(lhsOffset, lhsOffset + 32), data.slice(lhsOffset + 32, lhsOffset + 64)];\n                    offset += layerSize * 32;\n                    layerSize >>= 1;\n                    index >>= 1;\n                }\n                break;\n            }\n            const lhs = data.slice(0, 32);\n            const rhs = data.slice(32, 64);\n            path.data[i] = [lhs, rhs];\n            const isRight = (index >> i) & 0x1;\n            data = await this.dbGet(isRight ? rhs : lhs);\n        }\n        return path;\n    }\n    async updateElement(index, value) {\n        return await this.updateLeafHash(index, value.equals(Buffer.alloc(32, 0)) ? this.initialLeafValue : value);\n    }\n    async updateLeafHash(index, leafHash) {\n        const batch = this.db.batch();\n        this.root = await this.updateElementInternal(this.root, leafHash, index, this.depth, batch);\n        this.size = Math.max(this.size, index + 1);\n        await this.writeMeta(batch);\n        await batch.write();\n    }\n    async updateElementInternal(root, value, index, height, batch) {\n        if (height === 0) {\n            return value;\n        }\n        const data = await this.dbGet(root);\n        const isRight = (index >> (height - 1)) & 0x1;\n        let left = data ? data.slice(0, 32) : this.zeroHashes[height - 1];\n        let right = data ? data.slice(32, 64) : this.zeroHashes[height - 1];\n        const subtreeRoot = isRight ? right : left;\n        const newSubtreeRoot = await this.updateElementInternal(subtreeRoot, value, keepNLsb(index, height - 1), height - 1, batch);\n        if (isRight) {\n            right = newSubtreeRoot;\n        }\n        else {\n            left = newSubtreeRoot;\n        }\n        const newRoot = this.hasher.compress(left, right);\n        batch.put(newRoot, Buffer.concat([left, right]));\n        if (!root.equals(newRoot)) {\n            batch.del(root);\n        }\n        return newRoot;\n    }\n    async updateElements(index, values) {\n        const zeroBuf = Buffer.alloc(32, 0);\n        return await this.updateLeafHashes(index, values.map(v => (v.equals(zeroBuf) ? this.initialLeafValue : v)));\n    }\n    /**\n     * Updates all the given values, starting at index. This is optimal when inserting multiple values, as it can\n     * compute a single subtree and insert it in one go.\n     * However it comes with restrictions:\n     * - The insertion index must be a multiple of the subtree size, which must be power of 2.\n     * - The insertion index must be >= the current size of the tree (inserting into an empty location).\n     *\n     * We cannot over extend the tree size, as these inserts are bulk inserts, and a subsequent update would involve\n     * a lot of complexity adjusting a previously inserted bulk insert. For this reason depending on the number of\n     * values to insert, it will be chunked into the fewest number of subtrees required to grow the tree be precisely\n     * that size. In normal operation (e.g. continuously inserting 64 values), we will be able to leverage single inserts.\n     * Only when synching creates a non power of 2 set of values will the chunking mechanism come into play.\n     * e.g. If we need insert 192 values, first a subtree of 128 is inserted, then a subtree of 64.\n     */\n    async updateLeafHashes(index, leafHashes) {\n        while (leafHashes.length) {\n            const batch = this.db.batch();\n            let subtreeDepth = Math.ceil(Math.log2(leafHashes.length));\n            let subtreeSize = 2 ** subtreeDepth;\n            // We need to reduce the size of the subtree being inserted until it is:\n            // a) Less than or equal in size to the number of values being inserted.\n            // b) Fits in a subtree, with a size that is a multiple of the insertion index.\n            while (leafHashes.length < subtreeSize || index % subtreeSize !== 0) {\n                subtreeSize >>= 1;\n                subtreeDepth--;\n            }\n            const toInsert = leafHashes.slice(0, subtreeSize);\n            const hashes = await this.hasher.hashToTree(toInsert);\n            this.root = await this.updateElementsInternal(this.root, hashes, index, this.depth, subtreeDepth, batch);\n            // Slice off inserted values and adjust next insertion index.\n            leafHashes = leafHashes.slice(subtreeSize);\n            index += subtreeSize;\n            this.size = index;\n            await this.writeMeta(batch);\n            await batch.write();\n        }\n    }\n    async updateElementsInternal(root, hashes, index, height, subtreeHeight, batch) {\n        if (height === subtreeHeight) {\n            const root = hashes.pop();\n            batch.put(root, Buffer.concat(hashes));\n            return root;\n        }\n        // Do nothing if updating zero values.\n        if (hashes[hashes.length - 1].equals(this.zeroHashes[height - 1])) {\n            return root;\n        }\n        const data = await this.dbGet(root);\n        const isRight = (index >> (height - 1)) & 0x1;\n        if (data && data.length > 64) {\n            if (!root.equals(hashes[hashes.length - 1])) {\n                throw new Error('Attempting to update pre-existing subtree.');\n            }\n            return root;\n        }\n        let left = data ? data.slice(0, 32) : this.zeroHashes[height - 1];\n        let right = data ? data.slice(32, 64) : this.zeroHashes[height - 1];\n        const subtreeRoot = isRight ? right : left;\n        const newSubtreeRoot = await this.updateElementsInternal(subtreeRoot, hashes, keepNLsb(index, height - 1), height - 1, subtreeHeight, batch);\n        if (isRight) {\n            right = newSubtreeRoot;\n        }\n        else {\n            left = newSubtreeRoot;\n        }\n        const newRoot = this.hasher.compress(left, right);\n        batch.put(newRoot, Buffer.concat([left, right]));\n        if (!root.equals(newRoot)) {\n            batch.del(root);\n        }\n        return newRoot;\n    }\n    async dbGet(key) {\n        return await this.db.get(key).catch(() => { });\n    }\n}\nexports.MerkleTree = MerkleTree;\nMerkleTree.ZERO_ELEMENT = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex');\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/merkle_tree/merkle_tree.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/batch_decrypt_notes.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/batch_decrypt_notes.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.batchDecryptNotes = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst viewing_key_1 = __webpack_require__(/*! ../viewing_key */ \"./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js\");\nconst derive_note_secret_1 = __webpack_require__(/*! ./derive_note_secret */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js\");\nconst batchDecryptNotes = async (viewingKeys, privateKey, noteDecryptor, grumpkin) => {\n    const decryptedNoteLength = 73;\n    const dataBuf = await noteDecryptor.batchDecryptNotes(viewingKeys, privateKey);\n    const notes = [];\n    // For each note in the buffer of decrypted notes.\n    for (let i = 0, startIndex = 0; startIndex < dataBuf.length; ++i, startIndex += decryptedNoteLength) {\n        // Slice the individual note out the buffer.\n        const noteBuf = dataBuf.slice(startIndex, startIndex + decryptedNoteLength);\n        // If we sliced some data, and the \"successfully decrypted\" byte is set...\n        if (noteBuf.length > 0 && noteBuf[0]) {\n            // Extract the ephemeral public key from the end of viewing key data.\n            const ephPubKey = new address_1.GrumpkinAddress(viewingKeys.slice((i + 1) * viewing_key_1.ViewingKey.SIZE - 64, (i + 1) * viewing_key_1.ViewingKey.SIZE));\n            const noteSecret = (0, derive_note_secret_1.deriveNoteSecret)(ephPubKey, privateKey, grumpkin);\n            notes[i] = { noteBuf: noteBuf.slice(1), ephPubKey, noteSecret };\n        }\n    }\n    return notes;\n};\nexports.batchDecryptNotes = batchDecryptNotes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hfZGVjcnlwdF9ub3Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RlX2FsZ29yaXRobXMvYmF0Y2hfZGVjcnlwdF9ub3Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBNkM7QUFFN0MsZ0RBQTRDO0FBRTVDLDZEQUF3RDtBQUdqRCxNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFDcEMsV0FBbUIsRUFDbkIsVUFBa0IsRUFDbEIsYUFBNEIsRUFDNUIsUUFBa0IsRUFDbEIsRUFBRTtJQUNGLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0lBQy9CLE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvRSxNQUFNLEtBQUssR0FBa0MsRUFBRSxDQUFDO0lBRWhELGtEQUFrRDtJQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxFQUFFLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsSUFBSSxtQkFBbUIsRUFBRTtRQUNuRyw0Q0FBNEM7UUFDNUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsVUFBVSxHQUFHLG1CQUFtQixDQUFDLENBQUM7UUFFNUUsMEVBQTBFO1FBQzFFLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3BDLHFFQUFxRTtZQUNyRSxNQUFNLFNBQVMsR0FBRyxJQUFJLHlCQUFlLENBQ25DLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsd0JBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLHdCQUFVLENBQUMsSUFBSSxDQUFDLENBQzdFLENBQUM7WUFDRixNQUFNLFVBQVUsR0FBRyxJQUFBLHFDQUFnQixFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDckUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDO1NBQ2pFO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQTFCVyxRQUFBLGlCQUFpQixxQkEwQjVCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvYmF0Y2hfZGVjcnlwdF9ub3Rlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsa0JBQWtCLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdEMsc0JBQXNCLG1CQUFPLENBQUMsd0ZBQWdCO0FBQzlDLDZCQUE2QixtQkFBTyxDQUFDLCtHQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZCQUE2QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3Qvbm90ZV9hbGdvcml0aG1zL2JhdGNoX2RlY3J5cHRfbm90ZXMuanM/NGFmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmF0Y2hEZWNyeXB0Tm90ZXMgPSB2b2lkIDA7XG5jb25zdCBhZGRyZXNzXzEgPSByZXF1aXJlKFwiLi4vYWRkcmVzc1wiKTtcbmNvbnN0IHZpZXdpbmdfa2V5XzEgPSByZXF1aXJlKFwiLi4vdmlld2luZ19rZXlcIik7XG5jb25zdCBkZXJpdmVfbm90ZV9zZWNyZXRfMSA9IHJlcXVpcmUoXCIuL2Rlcml2ZV9ub3RlX3NlY3JldFwiKTtcbmNvbnN0IGJhdGNoRGVjcnlwdE5vdGVzID0gYXN5bmMgKHZpZXdpbmdLZXlzLCBwcml2YXRlS2V5LCBub3RlRGVjcnlwdG9yLCBncnVtcGtpbikgPT4ge1xuICAgIGNvbnN0IGRlY3J5cHRlZE5vdGVMZW5ndGggPSA3MztcbiAgICBjb25zdCBkYXRhQnVmID0gYXdhaXQgbm90ZURlY3J5cHRvci5iYXRjaERlY3J5cHROb3Rlcyh2aWV3aW5nS2V5cywgcHJpdmF0ZUtleSk7XG4gICAgY29uc3Qgbm90ZXMgPSBbXTtcbiAgICAvLyBGb3IgZWFjaCBub3RlIGluIHRoZSBidWZmZXIgb2YgZGVjcnlwdGVkIG5vdGVzLlxuICAgIGZvciAobGV0IGkgPSAwLCBzdGFydEluZGV4ID0gMDsgc3RhcnRJbmRleCA8IGRhdGFCdWYubGVuZ3RoOyArK2ksIHN0YXJ0SW5kZXggKz0gZGVjcnlwdGVkTm90ZUxlbmd0aCkge1xuICAgICAgICAvLyBTbGljZSB0aGUgaW5kaXZpZHVhbCBub3RlIG91dCB0aGUgYnVmZmVyLlxuICAgICAgICBjb25zdCBub3RlQnVmID0gZGF0YUJ1Zi5zbGljZShzdGFydEluZGV4LCBzdGFydEluZGV4ICsgZGVjcnlwdGVkTm90ZUxlbmd0aCk7XG4gICAgICAgIC8vIElmIHdlIHNsaWNlZCBzb21lIGRhdGEsIGFuZCB0aGUgXCJzdWNjZXNzZnVsbHkgZGVjcnlwdGVkXCIgYnl0ZSBpcyBzZXQuLi5cbiAgICAgICAgaWYgKG5vdGVCdWYubGVuZ3RoID4gMCAmJiBub3RlQnVmWzBdKSB7XG4gICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBlcGhlbWVyYWwgcHVibGljIGtleSBmcm9tIHRoZSBlbmQgb2Ygdmlld2luZyBrZXkgZGF0YS5cbiAgICAgICAgICAgIGNvbnN0IGVwaFB1YktleSA9IG5ldyBhZGRyZXNzXzEuR3J1bXBraW5BZGRyZXNzKHZpZXdpbmdLZXlzLnNsaWNlKChpICsgMSkgKiB2aWV3aW5nX2tleV8xLlZpZXdpbmdLZXkuU0laRSAtIDY0LCAoaSArIDEpICogdmlld2luZ19rZXlfMS5WaWV3aW5nS2V5LlNJWkUpKTtcbiAgICAgICAgICAgIGNvbnN0IG5vdGVTZWNyZXQgPSAoMCwgZGVyaXZlX25vdGVfc2VjcmV0XzEuZGVyaXZlTm90ZVNlY3JldCkoZXBoUHViS2V5LCBwcml2YXRlS2V5LCBncnVtcGtpbik7XG4gICAgICAgICAgICBub3Rlc1tpXSA9IHsgbm90ZUJ1Zjogbm90ZUJ1Zi5zbGljZSgxKSwgZXBoUHViS2V5LCBub3RlU2VjcmV0IH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vdGVzO1xufTtcbmV4cG9ydHMuYmF0Y2hEZWNyeXB0Tm90ZXMgPSBiYXRjaERlY3J5cHROb3Rlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVltRjBZMmhmWkdWamNubHdkRjl1YjNSbGN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5dWIzUmxYMkZzWjI5eWFYUm9iWE12WW1GMFkyaGZaR1ZqY25sd2RGOXViM1JsY3k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4M1EwRkJOa003UVVGRk4wTXNaMFJCUVRSRE8wRkJSVFZETERaRVFVRjNSRHRCUVVkcVJDeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFdEJRVXNzUlVGRGNFTXNWMEZCYlVJc1JVRkRia0lzVlVGQmEwSXNSVUZEYkVJc1lVRkJORUlzUlVGRE5VSXNVVUZCYTBJc1JVRkRiRUlzUlVGQlJUdEpRVU5HTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzUlVGQlJTeERRVUZETzBsQlF5OUNMRTFCUVUwc1QwRkJUeXhIUVVGSExFMUJRVTBzWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGZEJRVmNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVTXZSU3hOUVVGTkxFdEJRVXNzUjBGQmEwTXNSVUZCUlN4RFFVRkRPMGxCUldoRUxHdEVRVUZyUkR0SlFVTnNSQ3hMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4VlFVRlZMRWRCUVVjc1EwRkJReXhGUVVGRkxGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxGVkJRVlVzU1VGQlNTeHRRa0ZCYlVJc1JVRkJSVHRSUVVOdVJ5dzBRMEZCTkVNN1VVRkROVU1zVFVGQlRTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFTkJRVU03VVVGRk5VVXNNRVZCUVRCRk8xRkJRekZGTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMWxCUTNCRExIRkZRVUZ4UlR0WlFVTnlSU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEhsQ1FVRmxMRU5CUTI1RExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzZDBKQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMSGRDUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlF6ZEZMRU5CUVVNN1dVRkRSaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZCTEhGRFFVRm5RaXhGUVVGRExGTkJRVk1zUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkRja1VzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETzFOQlEycEZPMHRCUTBZN1NVRkRSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5tTEVOQlFVTXNRMEZCUXp0QlFURkNWeXhSUVVGQkxHbENRVUZwUWl4eFFrRXdRalZDSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/batch_decrypt_notes.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/claim_note_tx_data.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/claim_note_tx_data.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClaimNoteTxData = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bridge_id_1 = __webpack_require__(/*! ../bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\");\nclass ClaimNoteTxData {\n    constructor(value, bridgeId, partialStateSecret, inputNullifier) {\n        this.value = value;\n        this.bridgeId = bridgeId;\n        this.partialStateSecret = partialStateSecret;\n        this.inputNullifier = inputNullifier;\n    }\n    toBuffer() {\n        return Buffer.concat([\n            (0, bigint_buffer_1.toBufferBE)(this.value, 32),\n            this.bridgeId.toBuffer(),\n            this.partialStateSecret,\n            this.inputNullifier,\n        ]);\n    }\n    equals(note) {\n        return this.toBuffer().equals(note.toBuffer());\n    }\n    static fromBuffer(buf) {\n        let dataStart = 0;\n        const value = (0, bigint_buffer_1.toBigIntBE)(buf.slice(dataStart, dataStart + 32));\n        dataStart += 32;\n        const bridgeId = bridge_id_1.BridgeId.fromBuffer(buf.slice(dataStart, dataStart + 32));\n        dataStart += 32;\n        const partialStateSecret = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const inputNullifier = buf.slice(dataStart, dataStart + 32);\n        return new ClaimNoteTxData(value, bridgeId, partialStateSecret, inputNullifier);\n    }\n}\nexports.ClaimNoteTxData = ClaimNoteTxData;\nClaimNoteTxData.EMPTY = new ClaimNoteTxData(BigInt(0), bridge_id_1.BridgeId.ZERO, Buffer.alloc(32), Buffer.alloc(32));\nClaimNoteTxData.SIZE = ClaimNoteTxData.EMPTY.toBuffer().length;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhaW1fbm90ZV90eF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9jbGFpbV9ub3RlX3R4X2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTBEO0FBQzFELDRDQUF3QztBQUV4QyxNQUFhLGVBQWU7SUFJMUIsWUFDUyxLQUFhLEVBQ2IsUUFBa0IsRUFDbEIsa0JBQTBCLEVBQzFCLGNBQXNCO1FBSHRCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtRQUMxQixtQkFBYyxHQUFkLGNBQWMsQ0FBUTtJQUM1QixDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQixJQUFBLDBCQUFVLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGtCQUFrQjtZQUN2QixJQUFJLENBQUMsY0FBYztTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQXFCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQzNCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixNQUFNLEtBQUssR0FBRyxJQUFBLDBCQUFVLEVBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0QsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUNoQixNQUFNLFFBQVEsR0FBRyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzRSxTQUFTLElBQUksRUFBRSxDQUFDO1FBQ2hCLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDaEIsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVELE9BQU8sSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNsRixDQUFDOztBQWxDSCwwQ0FtQ0M7QUFsQ1EscUJBQUssR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsb0JBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUYsb0JBQUksR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvY2xhaW1fbm90ZV90eF9kYXRhLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsd0JBQXdCLG1CQUFPLENBQUMsNEZBQWtCO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLG9GQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLGtGQUFrRixNQUFNLFlBQVksTUFBTTtBQUMxRztBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvY2xhaW1fbm90ZV90eF9kYXRhLmpzPzNmOWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsYWltTm90ZVR4RGF0YSA9IHZvaWQgMDtcbmNvbnN0IGJpZ2ludF9idWZmZXJfMSA9IHJlcXVpcmUoXCIuLi9iaWdpbnRfYnVmZmVyXCIpO1xuY29uc3QgYnJpZGdlX2lkXzEgPSByZXF1aXJlKFwiLi4vYnJpZGdlX2lkXCIpO1xuY2xhc3MgQ2xhaW1Ob3RlVHhEYXRhIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgYnJpZGdlSWQsIHBhcnRpYWxTdGF0ZVNlY3JldCwgaW5wdXROdWxsaWZpZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmJyaWRnZUlkID0gYnJpZGdlSWQ7XG4gICAgICAgIHRoaXMucGFydGlhbFN0YXRlU2VjcmV0ID0gcGFydGlhbFN0YXRlU2VjcmV0O1xuICAgICAgICB0aGlzLmlucHV0TnVsbGlmaWVyID0gaW5wdXROdWxsaWZpZXI7XG4gICAgfVxuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgICAoMCwgYmlnaW50X2J1ZmZlcl8xLnRvQnVmZmVyQkUpKHRoaXMudmFsdWUsIDMyKSxcbiAgICAgICAgICAgIHRoaXMuYnJpZGdlSWQudG9CdWZmZXIoKSxcbiAgICAgICAgICAgIHRoaXMucGFydGlhbFN0YXRlU2VjcmV0LFxuICAgICAgICAgICAgdGhpcy5pbnB1dE51bGxpZmllcixcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGVxdWFscyhub3RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvQnVmZmVyKCkuZXF1YWxzKG5vdGUudG9CdWZmZXIoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQnVmZmVyKGJ1Zikge1xuICAgICAgICBsZXQgZGF0YVN0YXJ0ID0gMDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoMCwgYmlnaW50X2J1ZmZlcl8xLnRvQmlnSW50QkUpKGJ1Zi5zbGljZShkYXRhU3RhcnQsIGRhdGFTdGFydCArIDMyKSk7XG4gICAgICAgIGRhdGFTdGFydCArPSAzMjtcbiAgICAgICAgY29uc3QgYnJpZGdlSWQgPSBicmlkZ2VfaWRfMS5CcmlkZ2VJZC5mcm9tQnVmZmVyKGJ1Zi5zbGljZShkYXRhU3RhcnQsIGRhdGFTdGFydCArIDMyKSk7XG4gICAgICAgIGRhdGFTdGFydCArPSAzMjtcbiAgICAgICAgY29uc3QgcGFydGlhbFN0YXRlU2VjcmV0ID0gYnVmLnNsaWNlKGRhdGFTdGFydCwgZGF0YVN0YXJ0ICsgMzIpO1xuICAgICAgICBkYXRhU3RhcnQgKz0gMzI7XG4gICAgICAgIGNvbnN0IGlucHV0TnVsbGlmaWVyID0gYnVmLnNsaWNlKGRhdGFTdGFydCwgZGF0YVN0YXJ0ICsgMzIpO1xuICAgICAgICByZXR1cm4gbmV3IENsYWltTm90ZVR4RGF0YSh2YWx1ZSwgYnJpZGdlSWQsIHBhcnRpYWxTdGF0ZVNlY3JldCwgaW5wdXROdWxsaWZpZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xhaW1Ob3RlVHhEYXRhID0gQ2xhaW1Ob3RlVHhEYXRhO1xuQ2xhaW1Ob3RlVHhEYXRhLkVNUFRZID0gbmV3IENsYWltTm90ZVR4RGF0YShCaWdJbnQoMCksIGJyaWRnZV9pZF8xLkJyaWRnZUlkLlpFUk8sIEJ1ZmZlci5hbGxvYygzMiksIEJ1ZmZlci5hbGxvYygzMikpO1xuQ2xhaW1Ob3RlVHhEYXRhLlNJWkUgPSBDbGFpbU5vdGVUeERhdGEuRU1QVFkudG9CdWZmZXIoKS5sZW5ndGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMnhoYVcxZmJtOTBaVjkwZUY5a1lYUmhMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyNXZkR1ZmWVd4bmIzSnBkR2h0Y3k5amJHRnBiVjl1YjNSbFgzUjRYMlJoZEdFdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2IwUkJRVEJFTzBGQlF6RkVMRFJEUVVGM1F6dEJRVVY0UXl4TlFVRmhMR1ZCUVdVN1NVRkpNVUlzV1VGRFV5eExRVUZoTEVWQlEySXNVVUZCYTBJc1JVRkRiRUlzYTBKQlFUQkNMRVZCUXpGQ0xHTkJRWE5DTzFGQlNIUkNMRlZCUVVzc1IwRkJUQ3hMUVVGTExFTkJRVkU3VVVGRFlpeGhRVUZSTEVkQlFWSXNVVUZCVVN4RFFVRlZPMUZCUTJ4Q0xIVkNRVUZyUWl4SFFVRnNRaXhyUWtGQmEwSXNRMEZCVVR0UlFVTXhRaXh0UWtGQll5eEhRVUZrTEdOQlFXTXNRMEZCVVR0SlFVTTFRaXhEUVVGRE8wbEJSVW9zVVVGQlVUdFJRVU5PTEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVOdVFpeEpRVUZCTERCQ1FVRlZMRVZCUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZETVVJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEZUVJc1NVRkJTU3hEUVVGRExHdENRVUZyUWp0WlFVTjJRaXhKUVVGSkxFTkJRVU1zWTBGQll6dFRRVU53UWl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEVsQlFYRkNPMUZCUXpGQ0xFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnFSQ3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRlhPMUZCUXpOQ0xFbEJRVWtzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTnNRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZCTERCQ1FVRlZMRVZCUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVWQlFVVXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGREwwUXNVMEZCVXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOb1FpeE5RVUZOTEZGQlFWRXNSMEZCUnl4dlFrRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXpSU3hUUVVGVExFbEJRVWtzUlVGQlJTeERRVUZETzFGQlEyaENMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVVzVTBGQlV5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJoRkxGTkJRVk1zU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEYUVJc1RVRkJUU3hqUVVGakxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF6VkVMRTlCUVU4c1NVRkJTU3hsUVVGbExFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4clFrRkJhMElzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTnNSaXhEUVVGRE96dEJRV3hEU0N3d1EwRnRRME03UVVGc1ExRXNjVUpCUVVzc1IwRkJSeXhKUVVGSkxHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc2IwSkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE1VWXNiMEpCUVVrc1IwRkJSeXhsUVVGbExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/claim_note_tx_data.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/decrypted_note.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/decrypted_note.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjcnlwdGVkX25vdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90ZV9hbGdvcml0aG1zL2RlY3J5cHRlZF9ub3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvZGVjcnlwdGVkX25vdGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L25vdGVfYWxnb3JpdGhtcy9kZWNyeXB0ZWRfbm90ZS5qcz8xMDRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWkdWamNubHdkR1ZrWDI1dmRHVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdmJtOTBaVjloYkdkdmNtbDBhRzF6TDJSbFkzSjVjSFJsWkY5dWIzUmxMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUlpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/decrypted_note.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/defi_interaction_note.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/defi_interaction_note.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.packInteractionNotes = exports.computeInteractionHashes = exports.DefiInteractionNote = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\");\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bridge_id_1 = __webpack_require__(/*! ../bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\");\nconst crypto_2 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nclass DefiInteractionNote {\n    constructor(bridgeId, nonce, totalInputValue, totalOutputValueA, totalOutputValueB, result) {\n        this.bridgeId = bridgeId;\n        this.nonce = nonce;\n        this.totalInputValue = totalInputValue;\n        this.totalOutputValueA = totalOutputValueA;\n        this.totalOutputValueB = totalOutputValueB;\n        this.result = result;\n    }\n    static deserialize(buffer, offset) {\n        const des = new serialize_1.Deserializer(buffer, offset);\n        const bridgeIdBuffer = des.buffer(32);\n        const bridgeId = bridge_id_1.BridgeId.fromBuffer(bridgeIdBuffer);\n        const totalInputValue = des.bigInt();\n        const totalOutputValueA = des.bigInt();\n        const totalOutputValueB = des.bigInt();\n        const nonce = des.uInt32();\n        const result = des.bool();\n        return {\n            elem: new DefiInteractionNote(bridgeId, nonce, totalInputValue, totalOutputValueA, totalOutputValueB, result),\n            adv: des.getOffset() - offset,\n        };\n    }\n    static random() {\n        return new DefiInteractionNote(bridge_id_1.BridgeId.random(), (0, crypto_2.randomBytes)(4).readUInt32BE(0), (0, bigint_buffer_1.toBigIntBE)((0, crypto_2.randomBytes)(32)), (0, bigint_buffer_1.toBigIntBE)((0, crypto_2.randomBytes)(32)), (0, bigint_buffer_1.toBigIntBE)((0, crypto_2.randomBytes)(32)), !!Math.round(Math.random()));\n    }\n    static fromBuffer(buf) {\n        return DefiInteractionNote.deserialize(buf, 0).elem;\n    }\n    toBuffer() {\n        const serializer = new serialize_1.Serializer();\n        serializer.buffer(this.bridgeId.toBuffer());\n        serializer.bigInt(this.totalInputValue);\n        serializer.bigInt(this.totalOutputValueA);\n        serializer.bigInt(this.totalOutputValueB);\n        serializer.uInt32(this.nonce);\n        serializer.bool(this.result);\n        return serializer.getBuffer();\n    }\n    equals(note) {\n        return this.toBuffer().equals(note.toBuffer());\n    }\n}\nexports.DefiInteractionNote = DefiInteractionNote;\nDefiInteractionNote.EMPTY = new DefiInteractionNote(bridge_id_1.BridgeId.ZERO, 0, BigInt(0), BigInt(0), BigInt(0), false);\nDefiInteractionNote.groupModulus = BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617');\nconst computeInteractionHashes = (notes, padTo = notes.length) => {\n    notes = [...notes, ...Array(padTo - notes.length).fill(DefiInteractionNote.EMPTY)];\n    const hash = notes.map(note => (0, crypto_1.createHash)('sha256')\n        .update(Buffer.concat([\n        note.bridgeId.toBuffer(),\n        (0, serialize_1.numToUInt32BE)(note.nonce, 32),\n        (0, bigint_buffer_1.toBufferBE)(note.totalInputValue, 32),\n        (0, bigint_buffer_1.toBufferBE)(note.totalOutputValueA, 32),\n        (0, bigint_buffer_1.toBufferBE)(note.totalOutputValueB, 32),\n        Buffer.alloc(31),\n        Buffer.from([+note.result]),\n    ]))\n        .digest());\n    return hash.map(h => (0, bigint_buffer_1.toBufferBE)(BigInt('0x' + h.toString('hex')) % DefiInteractionNote.groupModulus, 32));\n};\nexports.computeInteractionHashes = computeInteractionHashes;\nconst packInteractionNotes = (notes, padTo = notes.length) => {\n    const hash = (0, crypto_1.createHash)('sha256')\n        .update(Buffer.concat((0, exports.computeInteractionHashes)(notes, padTo)))\n        .digest();\n    return (0, bigint_buffer_1.toBufferBE)(BigInt('0x' + hash.toString('hex')) % DefiInteractionNote.groupModulus, 32);\n};\nexports.packInteractionNotes = packInteractionNotes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaV9pbnRlcmFjdGlvbl9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9kZWZpX2ludGVyYWN0aW9uX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW9DO0FBQ3BDLG9EQUEwRDtBQUMxRCw0Q0FBd0M7QUFDeEMsc0NBQXdDO0FBQ3hDLDRDQUF1RTtBQUV2RSxNQUFhLG1CQUFtQjtJQUk5QixZQUNrQixRQUFrQixFQUNsQixLQUFhLEVBQ2IsZUFBdUIsRUFDdkIsaUJBQXlCLEVBQ3pCLGlCQUF5QixFQUN6QixNQUFlO1FBTGYsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2Isb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO1FBQ3pCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUFTO0lBQzlCLENBQUM7SUFFSixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQWMsRUFBRSxNQUFjO1FBQy9DLE1BQU0sR0FBRyxHQUFHLElBQUksd0JBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0MsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxNQUFNLFFBQVEsR0FBRyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDckMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdkMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNCLE1B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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/defi_interaction_note.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deriveNoteSecret = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nfunction deriveNoteSecret(ecdhPubKey, ecdhPrivKey, grumpkin) {\n    const sharedSecret = grumpkin.mul(ecdhPubKey.toBuffer(), ecdhPrivKey);\n    const secretBufferA = Buffer.concat([sharedSecret, (0, serialize_1.numToUInt8)(2)]);\n    const secretBufferB = Buffer.concat([sharedSecret, (0, serialize_1.numToUInt8)(3)]);\n    const hashA = (0, crypto_1.createHash)('sha256').update(secretBufferA).digest();\n    const hashB = (0, crypto_1.createHash)('sha256').update(secretBufferB).digest();\n    const hash = Buffer.concat([hashA, hashB]);\n    // Note: to get close to uniformly-distributed field elements, we need to start with 512-bits before modulo\n    // reduction (not 256) - hence why we hash _twice_ and concatenate above.\n    return grumpkin.reduce512BufferToFr(hash);\n}\nexports.deriveNoteSecret = deriveNoteSecret;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlX25vdGVfc2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9kZXJpdmVfbm90ZV9zZWNyZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW9DO0FBR3BDLDRDQUEwQztBQUUxQyxTQUFnQixnQkFBZ0IsQ0FBQyxVQUEyQixFQUFFLFdBQW1CLEVBQUUsUUFBa0I7SUFDbkcsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxJQUFBLHNCQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsSUFBQSxzQkFBVSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxNQUFNLEtBQUssR0FBRyxJQUFBLG1CQUFVLEVBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xFLE1BQU0sS0FBSyxHQUFHLElBQUEsbUJBQVUsRUFBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNDLDJHQUEyRztJQUMzRyx5RUFBeUU7SUFDekUsT0FBTyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQVZELDRDQVVDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvZGVyaXZlX25vdGVfc2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsaUJBQWlCLG1CQUFPLENBQUMsNEVBQVE7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsb0ZBQWM7QUFDMUM7QUFDQTtBQUNBLDBCQUEwQixNQUFNO0FBQ2hDLDBCQUEwQixNQUFNO0FBQ2hDO0FBQ0E7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3Qvbm90ZV9hbGdvcml0aG1zL2Rlcml2ZV9ub3RlX3NlY3JldC5qcz85Mzg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZXJpdmVOb3RlU2VjcmV0ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3Qgc2VyaWFsaXplXzEgPSByZXF1aXJlKFwiLi4vc2VyaWFsaXplXCIpO1xuZnVuY3Rpb24gZGVyaXZlTm90ZVNlY3JldChlY2RoUHViS2V5LCBlY2RoUHJpdktleSwgZ3J1bXBraW4pIHtcbiAgICBjb25zdCBzaGFyZWRTZWNyZXQgPSBncnVtcGtpbi5tdWwoZWNkaFB1YktleS50b0J1ZmZlcigpLCBlY2RoUHJpdktleSk7XG4gICAgY29uc3Qgc2VjcmV0QnVmZmVyQSA9IEJ1ZmZlci5jb25jYXQoW3NoYXJlZFNlY3JldCwgKDAsIHNlcmlhbGl6ZV8xLm51bVRvVUludDgpKDIpXSk7XG4gICAgY29uc3Qgc2VjcmV0QnVmZmVyQiA9IEJ1ZmZlci5jb25jYXQoW3NoYXJlZFNlY3JldCwgKDAsIHNlcmlhbGl6ZV8xLm51bVRvVUludDgpKDMpXSk7XG4gICAgY29uc3QgaGFzaEEgPSAoMCwgY3J5cHRvXzEuY3JlYXRlSGFzaCkoJ3NoYTI1NicpLnVwZGF0ZShzZWNyZXRCdWZmZXJBKS5kaWdlc3QoKTtcbiAgICBjb25zdCBoYXNoQiA9ICgwLCBjcnlwdG9fMS5jcmVhdGVIYXNoKSgnc2hhMjU2JykudXBkYXRlKHNlY3JldEJ1ZmZlckIpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IGhhc2ggPSBCdWZmZXIuY29uY2F0KFtoYXNoQSwgaGFzaEJdKTtcbiAgICAvLyBOb3RlOiB0byBnZXQgY2xvc2UgdG8gdW5pZm9ybWx5LWRpc3RyaWJ1dGVkIGZpZWxkIGVsZW1lbnRzLCB3ZSBuZWVkIHRvIHN0YXJ0IHdpdGggNTEyLWJpdHMgYmVmb3JlIG1vZHVsb1xuICAgIC8vIHJlZHVjdGlvbiAobm90IDI1NikgLSBoZW5jZSB3aHkgd2UgaGFzaCBfdHdpY2VfIGFuZCBjb25jYXRlbmF0ZSBhYm92ZS5cbiAgICByZXR1cm4gZ3J1bXBraW4ucmVkdWNlNTEyQnVmZmVyVG9GcihoYXNoKTtcbn1cbmV4cG9ydHMuZGVyaXZlTm90ZVNlY3JldCA9IGRlcml2ZU5vdGVTZWNyZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laR1Z5YVhabFgyNXZkR1ZmYzJWamNtVjBMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyNXZkR1ZmWVd4bmIzSnBkR2h0Y3k5a1pYSnBkbVZmYm05MFpWOXpaV055WlhRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2JVTkJRVzlETzBGQlIzQkRMRFJEUVVFd1F6dEJRVVV4UXl4VFFVRm5RaXhuUWtGQlowSXNRMEZCUXl4VlFVRXlRaXhGUVVGRkxGZEJRVzFDTEVWQlFVVXNVVUZCYTBJN1NVRkRia2NzVFVGQlRTeFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRkRVVzVFVGQlRTeGhRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExGbEJRVmtzUlVGQlJTeEpRVUZCTEhOQ1FVRlZMRVZCUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyNUZMRTFCUVUwc1lVRkJZU3hIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4WlFVRlpMRVZCUVVVc1NVRkJRU3h6UWtGQlZTeEZRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVJTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkJMRzFDUVVGVkxFVkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBsQlEyeEZMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVUVzYlVKQlFWVXNSVUZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1NVRkRiRVVzVFVGQlRTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpORExESkhRVUV5Unp0SlFVTXpSeXg1UlVGQmVVVTdTVUZEZWtVc1QwRkJUeXhSUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE5VTXNRMEZCUXp0QlFWWkVMRFJEUVZWREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./batch_decrypt_notes */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/batch_decrypt_notes.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./claim_note_tx_data */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/claim_note_tx_data.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./decrypted_note */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/decrypted_note.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./defi_interaction_note */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/defi_interaction_note.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./derive_note_secret */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./note_algorithms */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_algorithms.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./note_decryptor */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/index.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./recover_tree_notes */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/recover_tree_notes.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree_claim_note */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_claim_note.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./tree_note */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_note.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90ZV9hbGdvcml0aG1zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFFQUFzQztBQUN0QyxvRUFBcUM7QUFDckMsZ0VBQWlDO0FBQ2pDLHVFQUF3QztBQUN4QyxvRUFBcUM7QUFDckMsaUVBQWtDO0FBQ2xDLGdFQUFpQztBQUNqQyxvRUFBcUM7QUFDckMsaUVBQWtDO0FBQ2xDLDJEQUE0QiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsaUhBQXVCO0FBQ3pELDBCQUEwQixtQkFBTyxDQUFDLCtHQUFzQjtBQUN4RCwwQkFBMEIsbUJBQU8sQ0FBQyx1R0FBa0I7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMscUhBQXlCO0FBQzNELDBCQUEwQixtQkFBTyxDQUFDLCtHQUFzQjtBQUN4RCwwQkFBMEIsbUJBQU8sQ0FBQyx5R0FBbUI7QUFDckQsMEJBQTBCLG1CQUFPLENBQUMsNkdBQWtCO0FBQ3BELDBCQUEwQixtQkFBTyxDQUFDLCtHQUFzQjtBQUN4RCwwQkFBMEIsbUJBQU8sQ0FBQyx5R0FBbUI7QUFDckQsMEJBQTBCLG1CQUFPLENBQUMsNkZBQWE7QUFDL0MsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L25vdGVfYWxnb3JpdGhtcy9pbmRleC5qcz8yNzE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vYmF0Y2hfZGVjcnlwdF9ub3Rlc1wiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2NsYWltX25vdGVfdHhfZGF0YVwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2RlY3J5cHRlZF9ub3RlXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vZGVmaV9pbnRlcmFjdGlvbl9ub3RlXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vZGVyaXZlX25vdGVfc2VjcmV0XCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vbm90ZV9hbGdvcml0aG1zXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vbm90ZV9kZWNyeXB0b3JcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9yZWNvdmVyX3RyZWVfbm90ZXNcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi90cmVlX2NsYWltX25vdGVcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi90cmVlX25vdGVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdmJtOTBaVjloYkdkdmNtbDBhRzF6TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMSEZGUVVGelF6dEJRVU4wUXl4dlJVRkJjVU03UVVGRGNrTXNaMFZCUVdsRE8wRkJRMnBETEhWRlFVRjNRenRCUVVONFF5eHZSVUZCY1VNN1FVRkRja01zYVVWQlFXdERPMEZCUTJ4RExHZEZRVUZwUXp0QlFVTnFReXh2UlVGQmNVTTdRVUZEY2tNc2FVVkJRV3RETzBGQlEyeERMREpFUVVFMFFpSjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_algorithms.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_algorithms.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteAlgorithms = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nclass NoteAlgorithms {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    valueNoteNullifier(noteCommitment, accountPrivateKey, real = true) {\n        this.wasm.transferToHeap(noteCommitment, 0);\n        this.wasm.transferToHeap(accountPrivateKey, 64);\n        this.wasm.call('notes__value_note_nullifier', 0, 64, real, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    valueNoteNullifierBigInt(noteCommitment, accountPrivateKey, real = true) {\n        return (0, bigint_buffer_1.toBigIntBE)(this.valueNoteNullifier(noteCommitment, accountPrivateKey, real));\n    }\n    valueNoteCommitment(note) {\n        const noteBuf = note.toBuffer();\n        const mem = this.wasm.call('bbmalloc', noteBuf.length);\n        this.wasm.transferToHeap(noteBuf, mem);\n        this.wasm.call('notes__value_note_commitment', mem, 0);\n        this.wasm.call('bbfree', mem);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    valueNotePartialCommitment(noteSecret, owner, accountRequired) {\n        this.wasm.transferToHeap(noteSecret, 0);\n        this.wasm.transferToHeap(owner.toBuffer(), 32);\n        // Currently this is only used for creating the value notes from a claim note.\n        // Given these notes are owned by the creator of the claim note, we can leave creator pubkey as 0.\n        this.wasm.transferToHeap(Buffer.alloc(32), 96);\n        this.wasm.call('notes__value_note_partial_commitment', 0, 32, 96, accountRequired, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    claimNotePartialCommitment(note) {\n        const noteBuf = note.toBuffer();\n        const mem = this.wasm.call('bbmalloc', noteBuf.length);\n        this.wasm.transferToHeap(noteBuf, mem);\n        this.wasm.call('notes__claim_note_partial_commitment', mem, 0);\n        this.wasm.call('bbfree', mem);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    claimNoteCompletePartialCommitment(partialNote, interactionNonce, fee) {\n        this.wasm.transferToHeap(partialNote, 0);\n        this.wasm.transferToHeap((0, bigint_buffer_1.toBufferBE)(fee, 32), 32);\n        this.wasm.call('notes__claim_note_complete_partial_commitment', 0, interactionNonce, 32, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    claimNoteCommitment(note) {\n        const partial = this.claimNotePartialCommitment(note);\n        return this.claimNoteCompletePartialCommitment(partial, note.defiInteractionNonce, note.fee);\n    }\n    claimNoteNullifier(noteCommitment) {\n        this.wasm.transferToHeap(noteCommitment, 0);\n        this.wasm.call('notes__claim_note_nullifier', 0, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    defiInteractionNoteCommitment(note) {\n        const noteBuf = note.toBuffer();\n        const mem = this.wasm.call('bbmalloc', noteBuf.length);\n        this.wasm.transferToHeap(noteBuf, mem);\n        this.wasm.call('notes__defi_interaction_note_commitment', mem, 0);\n        this.wasm.call('bbfree', mem);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    accountNoteCommitment(aliasHash, accountPublicKey, spendingPublicKey) {\n        this.wasm.transferToHeap(aliasHash.toBuffer32(), 0);\n        this.wasm.transferToHeap(accountPublicKey.toBuffer(), 32);\n        this.wasm.transferToHeap(spendingPublicKey, 64);\n        this.wasm.call('notes__account_note_commitment', 0, 32, 64, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    accountAliasHashNullifier(aliasHash) {\n        this.wasm.transferToHeap(aliasHash.toBuffer32(), 0);\n        this.wasm.call('notes__compute_account_alias_hash_nullifier', 0, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n    accountPublicKeyNullifier(accountPublicKey) {\n        this.wasm.transferToHeap(accountPublicKey.toBuffer(), 0);\n        this.wasm.call('notes__compute_account_public_key_nullifier', 0, 0);\n        return Buffer.from(this.wasm.sliceMemory(0, 32));\n    }\n}\nexports.NoteAlgorithms = NoteAlgorithms;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZV9hbGdvcml0aG1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9ub3RlX2FsZ29yaXRobXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsb0RBQTBEO0FBTTFELE1BQWEsY0FBYztJQUN6QixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFFdkMsa0JBQWtCLENBQUMsY0FBc0IsRUFBRSxpQkFBeUIsRUFBRSxJQUFJLEdBQUcsSUFBSTtRQUN0RixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSx3QkFBd0IsQ0FBQyxjQUFzQixFQUFFLGlCQUF5QixFQUFFLElBQUksR0FBRyxJQUFJO1FBQzVGLE9BQU8sSUFBQSwwQkFBVSxFQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRU0sbUJBQW1CLENBQUMsSUFBYztRQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxNQUFN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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9hbGdvcml0aG1zLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsd0JBQXdCLG1CQUFPLENBQUMsNEZBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE1BQU07QUFDdkM7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9hbGdvcml0aG1zLmpzPzM0NTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vdGVBbGdvcml0aG1zID0gdm9pZCAwO1xuY29uc3QgYmlnaW50X2J1ZmZlcl8xID0gcmVxdWlyZShcIi4uL2JpZ2ludF9idWZmZXJcIik7XG5jbGFzcyBOb3RlQWxnb3JpdGhtcyB7XG4gICAgY29uc3RydWN0b3Iod2FzbSkge1xuICAgICAgICB0aGlzLndhc20gPSB3YXNtO1xuICAgIH1cbiAgICB2YWx1ZU5vdGVOdWxsaWZpZXIobm90ZUNvbW1pdG1lbnQsIGFjY291bnRQcml2YXRlS2V5LCByZWFsID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAobm90ZUNvbW1pdG1lbnQsIDApO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoYWNjb3VudFByaXZhdGVLZXksIDY0KTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ25vdGVzX192YWx1ZV9ub3RlX251bGxpZmllcicsIDAsIDY0LCByZWFsLCAwKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMud2FzbS5zbGljZU1lbW9yeSgwLCAzMikpO1xuICAgIH1cbiAgICB2YWx1ZU5vdGVOdWxsaWZpZXJCaWdJbnQobm90ZUNvbW1pdG1lbnQsIGFjY291bnRQcml2YXRlS2V5LCByZWFsID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gKDAsIGJpZ2ludF9idWZmZXJfMS50b0JpZ0ludEJFKSh0aGlzLnZhbHVlTm90ZU51bGxpZmllcihub3RlQ29tbWl0bWVudCwgYWNjb3VudFByaXZhdGVLZXksIHJlYWwpKTtcbiAgICB9XG4gICAgdmFsdWVOb3RlQ29tbWl0bWVudChub3RlKSB7XG4gICAgICAgIGNvbnN0IG5vdGVCdWYgPSBub3RlLnRvQnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IG1lbSA9IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIG5vdGVCdWYubGVuZ3RoKTtcbiAgICAgICAgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKG5vdGVCdWYsIG1lbSk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdub3Rlc19fdmFsdWVfbm90ZV9jb21taXRtZW50JywgbWVtLCAwKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG1lbSk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgdmFsdWVOb3RlUGFydGlhbENvbW1pdG1lbnQobm90ZVNlY3JldCwgb3duZXIsIGFjY291bnRSZXF1aXJlZCkge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAobm90ZVNlY3JldCwgMCk7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChvd25lci50b0J1ZmZlcigpLCAzMik7XG4gICAgICAgIC8vIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdXNlZCBmb3IgY3JlYXRpbmcgdGhlIHZhbHVlIG5vdGVzIGZyb20gYSBjbGFpbSBub3RlLlxuICAgICAgICAvLyBHaXZlbiB0aGVzZSBub3RlcyBhcmUgb3duZWQgYnkgdGhlIGNyZWF0b3Igb2YgdGhlIGNsYWltIG5vdGUsIHdlIGNhbiBsZWF2ZSBjcmVhdG9yIHB1YmtleSBhcyAwLlxuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoQnVmZmVyLmFsbG9jKDMyKSwgOTYpO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX3ZhbHVlX25vdGVfcGFydGlhbF9jb21taXRtZW50JywgMCwgMzIsIDk2LCBhY2NvdW50UmVxdWlyZWQsIDApO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKSk7XG4gICAgfVxuICAgIGNsYWltTm90ZVBhcnRpYWxDb21taXRtZW50KG5vdGUpIHtcbiAgICAgICAgY29uc3Qgbm90ZUJ1ZiA9IG5vdGUudG9CdWZmZXIoKTtcbiAgICAgICAgY29uc3QgbWVtID0gdGhpcy53YXNtLmNhbGwoJ2JibWFsbG9jJywgbm90ZUJ1Zi5sZW5ndGgpO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAobm90ZUJ1ZiwgbWVtKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ25vdGVzX19jbGFpbV9ub3RlX3BhcnRpYWxfY29tbWl0bWVudCcsIG1lbSwgMCk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdiYmZyZWUnLCBtZW0pO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKSk7XG4gICAgfVxuICAgIGNsYWltTm90ZUNvbXBsZXRlUGFydGlhbENvbW1pdG1lbnQocGFydGlhbE5vdGUsIGludGVyYWN0aW9uTm9uY2UsIGZlZSkge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAocGFydGlhbE5vdGUsIDApO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoKDAsIGJpZ2ludF9idWZmZXJfMS50b0J1ZmZlckJFKShmZWUsIDMyKSwgMzIpO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX2NsYWltX25vdGVfY29tcGxldGVfcGFydGlhbF9jb21taXRtZW50JywgMCwgaW50ZXJhY3Rpb25Ob25jZSwgMzIsIDApO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKSk7XG4gICAgfVxuICAgIGNsYWltTm90ZUNvbW1pdG1lbnQobm90ZSkge1xuICAgICAgICBjb25zdCBwYXJ0aWFsID0gdGhpcy5jbGFpbU5vdGVQYXJ0aWFsQ29tbWl0bWVudChub3RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhaW1Ob3RlQ29tcGxldGVQYXJ0aWFsQ29tbWl0bWVudChwYXJ0aWFsLCBub3RlLmRlZmlJbnRlcmFjdGlvbk5vbmNlLCBub3RlLmZlZSk7XG4gICAgfVxuICAgIGNsYWltTm90ZU51bGxpZmllcihub3RlQ29tbWl0bWVudCkge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAobm90ZUNvbW1pdG1lbnQsIDApO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX2NsYWltX25vdGVfbnVsbGlmaWVyJywgMCwgMCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgZGVmaUludGVyYWN0aW9uTm90ZUNvbW1pdG1lbnQobm90ZSkge1xuICAgICAgICBjb25zdCBub3RlQnVmID0gbm90ZS50b0J1ZmZlcigpO1xuICAgICAgICBjb25zdCBtZW0gPSB0aGlzLndhc20uY2FsbCgnYmJtYWxsb2MnLCBub3RlQnVmLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChub3RlQnVmLCBtZW0pO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX2RlZmlfaW50ZXJhY3Rpb25fbm90ZV9jb21taXRtZW50JywgbWVtLCAwKTtcbiAgICAgICAgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG1lbSk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgYWNjb3VudE5vdGVDb21taXRtZW50KGFsaWFzSGFzaCwgYWNjb3VudFB1YmxpY0tleSwgc3BlbmRpbmdQdWJsaWNLZXkpIHtcbiAgICAgICAgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKGFsaWFzSGFzaC50b0J1ZmZlcjMyKCksIDApO1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoYWNjb3VudFB1YmxpY0tleS50b0J1ZmZlcigpLCAzMik7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChzcGVuZGluZ1B1YmxpY0tleSwgNjQpO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX2FjY291bnRfbm90ZV9jb21taXRtZW50JywgMCwgMzIsIDY0LCAwKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMud2FzbS5zbGljZU1lbW9yeSgwLCAzMikpO1xuICAgIH1cbiAgICBhY2NvdW50QWxpYXNIYXNoTnVsbGlmaWVyKGFsaWFzSGFzaCkge1xuICAgICAgICB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoYWxpYXNIYXNoLnRvQnVmZmVyMzIoKSwgMCk7XG4gICAgICAgIHRoaXMud2FzbS5jYWxsKCdub3Rlc19fY29tcHV0ZV9hY2NvdW50X2FsaWFzX2hhc2hfbnVsbGlmaWVyJywgMCwgMCk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgMzIpKTtcbiAgICB9XG4gICAgYWNjb3VudFB1YmxpY0tleU51bGxpZmllcihhY2NvdW50UHVibGljS2V5KSB7XG4gICAgICAgIHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChhY2NvdW50UHVibGljS2V5LnRvQnVmZmVyKCksIDApO1xuICAgICAgICB0aGlzLndhc20uY2FsbCgnbm90ZXNfX2NvbXB1dGVfYWNjb3VudF9wdWJsaWNfa2V5X251bGxpZmllcicsIDAsIDApO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy53YXNtLnNsaWNlTWVtb3J5KDAsIDMyKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RlQWxnb3JpdGhtcyA9IE5vdGVBbGdvcml0aG1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYm05MFpWOWhiR2R2Y21sMGFHMXpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwyNXZkR1ZmWVd4bmIzSnBkR2h0Y3k5dWIzUmxYMkZzWjI5eWFYUm9iWE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJSVUVzYjBSQlFUQkVPMEZCVFRGRUxFMUJRV0VzWTBGQll6dEpRVU42UWl4WlFVRnZRaXhKUVVGelFqdFJRVUYwUWl4VFFVRkpMRWRCUVVvc1NVRkJTU3hEUVVGclFqdEpRVUZITEVOQlFVTTdTVUZGZGtNc2EwSkJRV3RDTEVOQlFVTXNZMEZCYzBJc1JVRkJSU3hwUWtGQmVVSXNSVUZCUlN4SlFVRkpMRWRCUVVjc1NVRkJTVHRSUVVOMFJpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE9VUXNUMEZCVHl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNN1NVRkZUU3gzUWtGQmQwSXNRMEZCUXl4alFVRnpRaXhGUVVGRkxHbENRVUY1UWl4RlFVRkZMRWxCUVVrc1IwRkJSeXhKUVVGSk8xRkJRelZHTEU5QlFVOHNTVUZCUVN3d1FrRkJWU3hGUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhqUVVGakxFVkJRVVVzYVVKQlFXbENMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU4wUml4RFFVRkRPMGxCUlUwc2JVSkJRVzFDTEVOQlFVTXNTVUZCWXp0UlFVTjJReXhOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1VVRkRhRU1zVFVGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVOMlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZGtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNPRUpCUVRoQ0xFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNaRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU01UWl4UFFVRlBMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYmtRc1EwRkJRenRKUVVWTkxEQkNRVUV3UWl4RFFVRkRMRlZCUVd0Q0xFVkJRVVVzUzBGQmMwSXNSVUZCUlN4bFFVRjNRanRSUVVOd1J5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZUVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF5OURMRGhGUVVFNFJUdFJRVU01UlN4clIwRkJhMGM3VVVGRGJFY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU12UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHpRMEZCYzBNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4bFFVRmxMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRFWXNUMEZCVHl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNN1NVRkZUU3d3UWtGQk1FSXNRMEZCUXl4SlFVRnRRanRSUVVOdVJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03VVVGRGFFTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU4yUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRka01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2MwTkJRWE5ETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJReTlFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTTVRaXhQUVVGUExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRia1FzUTBGQlF6dEpRVVZOTEd0RFFVRnJReXhEUVVGRExGZEJRVzFDTEVWQlFVVXNaMEpCUVhkQ0xFVkJRVVVzUjBGQlZ6dFJRVU5zUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRla01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJRU3d3UWtGQlZTeEZRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5zUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5d3JRMEZCSzBNc1JVRkJSU3hEUVVGRExFVkJRVVVzWjBKQlFXZENMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6VkdMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVTBzYlVKQlFXMUNMRU5CUVVNc1NVRkJiVUk3VVVGRE5VTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM1JFTEU5QlFVOHNTVUZCU1N4RFFVRkRMR3REUVVGclF5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJReTlHTEVOQlFVTTdTVUZGVFN4clFrRkJhMElzUTBGQlF5eGpRVUZ6UWp0UlFVTTVReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzQkVMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVTBzTmtKQlFUWkNMRU5CUVVNc1NVRkJlVUk3VVVGRE5VUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzFGQlEyaERMRTFCUVUwc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM1pETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExIbERRVUY1UXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5zUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRPVUlzVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGVFN4eFFrRkJjVUlzUTBGQlF5eFRRVUZ2UWl4RlFVRkZMR2RDUVVGcFF5eEZRVUZGTEdsQ1FVRjVRanRSUVVNM1J5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE1VUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBOQlFXZERMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRMMFFzVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGVFN4NVFrRkJlVUlzUTBGQlF5eFRRVUZ2UWp0UlFVTnVSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEY0VRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNOa05CUVRaRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNCRkxFOUJRVThzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVJDeERRVUZETzBsQlJVMHNlVUpCUVhsQ0xFTkJRVU1zWjBKQlFXbERPMUZCUTJoRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExEWkRRVUUyUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53UlN4UFFVRlBMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYmtRc1EwRkJRenREUVVOR08wRkJlRVpFTEhkRFFYZEdReUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_algorithms.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/index.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./note_decryptor */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/note_decryptor.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pooled_note_decryptor */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/pooled_note_decryptor.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./single_note_decryptor */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/single_note_decryptor.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm90ZV9hbGdvcml0aG1zL25vdGVfZGVjcnlwdG9yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdFQUFpQztBQUNqQyx1RUFBd0M7QUFDeEMsdUVBQXdDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9kZWNyeXB0b3IvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsc0hBQWtCO0FBQ3BELDBCQUEwQixtQkFBTyxDQUFDLG9JQUF5QjtBQUMzRCwwQkFBMEIsbUJBQU8sQ0FBQyxvSUFBeUI7QUFDM0QsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L25vdGVfYWxnb3JpdGhtcy9ub3RlX2RlY3J5cHRvci9pbmRleC5qcz9kZmRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vbm90ZV9kZWNyeXB0b3JcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9wb29sZWRfbm90ZV9kZWNyeXB0b3JcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9zaW5nbGVfbm90ZV9kZWNyeXB0b3JcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZibTkwWlY5aGJHZHZjbWwwYUcxekwyNXZkR1ZmWkdWamNubHdkRzl5TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMR2RGUVVGcFF6dEJRVU5xUXl4MVJVRkJkME03UVVGRGVFTXNkVVZCUVhkREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/note_decryptor.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/note_decryptor.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZV9kZWNyeXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm90ZV9hbGdvcml0aG1zL25vdGVfZGVjcnlwdG9yL25vdGVfZGVjcnlwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9kZWNyeXB0b3Ivbm90ZV9kZWNyeXB0b3IuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L25vdGVfYWxnb3JpdGhtcy9ub3RlX2RlY3J5cHRvci9ub3RlX2RlY3J5cHRvci5qcz9iOGY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYm05MFpWOWtaV055ZVhCMGIzSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZibTkwWlY5aGJHZHZjbWwwYUcxekwyNXZkR1ZmWkdWamNubHdkRzl5TDI1dmRHVmZaR1ZqY25sd2RHOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUlpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/note_decryptor.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/pooled_note_decryptor.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/pooled_note_decryptor.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PooledNoteDecryptor = void 0;\nconst viewing_key_1 = __webpack_require__(/*! ../../viewing_key */ \"./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js\");\nconst single_note_decryptor_1 = __webpack_require__(/*! ./single_note_decryptor */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/single_note_decryptor.js\");\nclass PooledNoteDecryptor {\n    constructor(workerPool) {\n        this.pool = [];\n        this.pool = workerPool.workers.map(w => new single_note_decryptor_1.SingleNoteDecryptor(w));\n    }\n    async batchDecryptNotes(keysBuf, privateKey) {\n        const numKeys = keysBuf.length / viewing_key_1.ViewingKey.SIZE;\n        const numKeysPerBatch = Math.max(1, Math.floor(numKeys / this.pool.length));\n        const numBatches = Math.min(Math.ceil(numKeys / numKeysPerBatch), this.pool.length);\n        const remainingKeys = numKeys - numKeysPerBatch * numBatches;\n        let dataStart = 0;\n        const batches = [...Array(numBatches)].map((_, i) => {\n            const dataEnd = dataStart + (numKeysPerBatch + +(i < remainingKeys)) * viewing_key_1.ViewingKey.SIZE;\n            const keys = keysBuf.slice(dataStart, dataEnd);\n            dataStart = dataEnd;\n            return keys;\n        });\n        const results = await Promise.all(batches.map((batch, i) => this.pool[i].batchDecryptNotes(batch, privateKey)));\n        return Buffer.concat(results);\n    }\n}\nexports.PooledNoteDecryptor = PooledNoteDecryptor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbGVkX25vdGVfZGVjcnlwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9ub3RlX2RlY3J5cHRvci9wb29sZWRfbm90ZV9kZWNyeXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQStDO0FBRy9DLG1FQUE4RDtBQUU5RCxNQUFhLG1CQUFtQjtJQUc5QixZQUFZLFVBQXNCO1FBRjFCLFNBQUksR0FBMEIsRUFBRSxDQUFDO1FBR3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLDJDQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsVUFBa0I7UUFDaEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyx3QkFBVSxDQUFDLElBQUksQ0FBQztRQUNqRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sYUFBYSxHQUFHLE9BQU8sR0FBRyxlQUFlLEdBQUcsVUFBVSxDQUFDO1FBQzdELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xELE1BQU0sT0FBTyxHQUFHLFNBQVMsR0FBRyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUcsd0JBQVUsQ0FBQyxJQUFJLENBQUM7WUFDdkYsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0MsU0FBUyxHQUFHLE9BQU8sQ0FBQztZQUNwQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEgsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQXRCRCxrREFzQkMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9kZWNyeXB0b3IvcG9vbGVkX25vdGVfZGVjcnlwdG9yLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isc0JBQXNCLG1CQUFPLENBQUMsMkZBQW1CO0FBQ2pELGdDQUFnQyxtQkFBTyxDQUFDLG9JQUF5QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9kZWNyeXB0b3IvcG9vbGVkX25vdGVfZGVjcnlwdG9yLmpzPzFkMDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvb2xlZE5vdGVEZWNyeXB0b3IgPSB2b2lkIDA7XG5jb25zdCB2aWV3aW5nX2tleV8xID0gcmVxdWlyZShcIi4uLy4uL3ZpZXdpbmdfa2V5XCIpO1xuY29uc3Qgc2luZ2xlX25vdGVfZGVjcnlwdG9yXzEgPSByZXF1aXJlKFwiLi9zaW5nbGVfbm90ZV9kZWNyeXB0b3JcIik7XG5jbGFzcyBQb29sZWROb3RlRGVjcnlwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3JrZXJQb29sKSB7XG4gICAgICAgIHRoaXMucG9vbCA9IFtdO1xuICAgICAgICB0aGlzLnBvb2wgPSB3b3JrZXJQb29sLndvcmtlcnMubWFwKHcgPT4gbmV3IHNpbmdsZV9ub3RlX2RlY3J5cHRvcl8xLlNpbmdsZU5vdGVEZWNyeXB0b3IodykpO1xuICAgIH1cbiAgICBhc3luYyBiYXRjaERlY3J5cHROb3RlcyhrZXlzQnVmLCBwcml2YXRlS2V5KSB7XG4gICAgICAgIGNvbnN0IG51bUtleXMgPSBrZXlzQnVmLmxlbmd0aCAvIHZpZXdpbmdfa2V5XzEuVmlld2luZ0tleS5TSVpFO1xuICAgICAgICBjb25zdCBudW1LZXlzUGVyQmF0Y2ggPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKG51bUtleXMgLyB0aGlzLnBvb2wubGVuZ3RoKSk7XG4gICAgICAgIGNvbnN0IG51bUJhdGNoZXMgPSBNYXRoLm1pbihNYXRoLmNlaWwobnVtS2V5cyAvIG51bUtleXNQZXJCYXRjaCksIHRoaXMucG9vbC5sZW5ndGgpO1xuICAgICAgICBjb25zdCByZW1haW5pbmdLZXlzID0gbnVtS2V5cyAtIG51bUtleXNQZXJCYXRjaCAqIG51bUJhdGNoZXM7XG4gICAgICAgIGxldCBkYXRhU3RhcnQgPSAwO1xuICAgICAgICBjb25zdCBiYXRjaGVzID0gWy4uLkFycmF5KG51bUJhdGNoZXMpXS5tYXAoKF8sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFFbmQgPSBkYXRhU3RhcnQgKyAobnVtS2V5c1BlckJhdGNoICsgKyhpIDwgcmVtYWluaW5nS2V5cykpICogdmlld2luZ19rZXlfMS5WaWV3aW5nS2V5LlNJWkU7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0ga2V5c0J1Zi5zbGljZShkYXRhU3RhcnQsIGRhdGFFbmQpO1xuICAgICAgICAgICAgZGF0YVN0YXJ0ID0gZGF0YUVuZDtcbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGJhdGNoZXMubWFwKChiYXRjaCwgaSkgPT4gdGhpcy5wb29sW2ldLmJhdGNoRGVjcnlwdE5vdGVzKGJhdGNoLCBwcml2YXRlS2V5KSkpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChyZXN1bHRzKTtcbiAgICB9XG59XG5leHBvcnRzLlBvb2xlZE5vdGVEZWNyeXB0b3IgPSBQb29sZWROb3RlRGVjcnlwdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0c5dmJHVmtYMjV2ZEdWZlpHVmpjbmx3ZEc5eUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyNXZkR1ZmWVd4bmIzSnBkR2h0Y3k5dWIzUmxYMlJsWTNKNWNIUnZjaTl3YjI5c1pXUmZibTkwWlY5a1pXTnllWEIwYjNJdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2JVUkJRU3RETzBGQlJ5OURMRzFGUVVFNFJEdEJRVVU1UkN4TlFVRmhMRzFDUVVGdFFqdEpRVWM1UWl4WlFVRlpMRlZCUVhOQ08xRkJSakZDTEZOQlFVa3NSMEZCTUVJc1JVRkJSU3hEUVVGRE8xRkJSM1pETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxESkRRVUZ0UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGRFVXNRMEZCUXp0SlFVVk5MRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRmxMRVZCUVVVc1ZVRkJhMEk3VVVGRGFFVXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eDNRa0ZCVlN4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOcVJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROVVVzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4bFFVRmxMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNCR0xFMUJRVTBzWVVGQllTeEhRVUZITEU5QlFVOHNSMEZCUnl4bFFVRmxMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xRkJRemRFTEVsQlFVa3NVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOc1FpeE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzFsQlEyeEVMRTFCUVUwc1QwRkJUeXhIUVVGSExGTkJRVk1zUjBGQlJ5eERRVUZETEdWQlFXVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExHRkJRV0VzUTBGQlF5eERRVUZETEVkQlFVY3NkMEpCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGRrWXNUVUZCVFN4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRMME1zVTBGQlV5eEhRVUZITEU5QlFVOHNRMEZCUXp0WlFVTndRaXhQUVVGUExFbEJRVWtzUTBGQlF6dFJRVU5rTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1RVRkJUU3hQUVVGUExFZEJRVWNzVFVGQlRTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFFZ3NUMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBsQlEyaERMRU5CUVVNN1EwRkRSanRCUVhSQ1JDeHJSRUZ6UWtNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/pooled_note_decryptor.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/single_note_decryptor.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/single_note_decryptor.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SingleNoteDecryptor = void 0;\nconst viewing_key_1 = __webpack_require__(/*! ../../viewing_key */ \"./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js\");\nclass SingleNoteDecryptor {\n    constructor(worker) {\n        this.worker = worker;\n    }\n    async batchDecryptNotes(keysBuf, privateKey) {\n        const decryptedNoteLength = 73;\n        const numKeys = keysBuf.length / viewing_key_1.ViewingKey.SIZE;\n        const mem = await this.worker.call('bbmalloc', keysBuf.length + privateKey.length);\n        await this.worker.transferToHeap(keysBuf, mem);\n        await this.worker.transferToHeap(privateKey, mem + keysBuf.length);\n        await this.worker.call('notes__batch_decrypt_notes', mem, mem + keysBuf.length, numKeys, mem);\n        const dataBuf = Buffer.from(await this.worker.sliceMemory(mem, mem + numKeys * decryptedNoteLength));\n        await this.worker.call('bbfree', mem);\n        return dataBuf;\n    }\n}\nexports.SingleNoteDecryptor = SingleNoteDecryptor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX25vdGVfZGVjcnlwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9ub3RlX2RlY3J5cHRvci9zaW5nbGVfbm90ZV9kZWNyeXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQStDO0FBSS9DLE1BQWEsbUJBQW1CO0lBQzlCLFlBQW9CLE1BQTZDO1FBQTdDLFdBQU0sR0FBTixNQUFNLENBQXVDO0lBQUcsQ0FBQztJQUU5RCxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBZSxFQUFFLFVBQWtCO1FBQ2hFLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsd0JBQVUsQ0FBQyxJQUFJLENBQUM7UUFFakQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkYsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0MsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuRSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUYsTUFBTSxPQUFPLEdBQVcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsT0FBTyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUM3RyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0QyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFoQkQsa0RBZ0JDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvbm90ZV9kZWNyeXB0b3Ivc2luZ2xlX25vdGVfZGVjcnlwdG9yLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isc0JBQXNCLG1CQUFPLENBQUMsMkZBQW1CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsTUFBTTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3Qvbm90ZV9hbGdvcml0aG1zL25vdGVfZGVjcnlwdG9yL3NpbmdsZV9ub3RlX2RlY3J5cHRvci5qcz9hMzc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaW5nbGVOb3RlRGVjcnlwdG9yID0gdm9pZCAwO1xuY29uc3Qgdmlld2luZ19rZXlfMSA9IHJlcXVpcmUoXCIuLi8uLi92aWV3aW5nX2tleVwiKTtcbmNsYXNzIFNpbmdsZU5vdGVEZWNyeXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHdvcmtlcikge1xuICAgICAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgICB9XG4gICAgYXN5bmMgYmF0Y2hEZWNyeXB0Tm90ZXMoa2V5c0J1ZiwgcHJpdmF0ZUtleSkge1xuICAgICAgICBjb25zdCBkZWNyeXB0ZWROb3RlTGVuZ3RoID0gNzM7XG4gICAgICAgIGNvbnN0IG51bUtleXMgPSBrZXlzQnVmLmxlbmd0aCAvIHZpZXdpbmdfa2V5XzEuVmlld2luZ0tleS5TSVpFO1xuICAgICAgICBjb25zdCBtZW0gPSBhd2FpdCB0aGlzLndvcmtlci5jYWxsKCdiYm1hbGxvYycsIGtleXNCdWYubGVuZ3RoICsgcHJpdmF0ZUtleS5sZW5ndGgpO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci50cmFuc2ZlclRvSGVhcChrZXlzQnVmLCBtZW0pO1xuICAgICAgICBhd2FpdCB0aGlzLndvcmtlci50cmFuc2ZlclRvSGVhcChwcml2YXRlS2V5LCBtZW0gKyBrZXlzQnVmLmxlbmd0aCk7XG4gICAgICAgIGF3YWl0IHRoaXMud29ya2VyLmNhbGwoJ25vdGVzX19iYXRjaF9kZWNyeXB0X25vdGVzJywgbWVtLCBtZW0gKyBrZXlzQnVmLmxlbmd0aCwgbnVtS2V5cywgbWVtKTtcbiAgICAgICAgY29uc3QgZGF0YUJ1ZiA9IEJ1ZmZlci5mcm9tKGF3YWl0IHRoaXMud29ya2VyLnNsaWNlTWVtb3J5KG1lbSwgbWVtICsgbnVtS2V5cyAqIGRlY3J5cHRlZE5vdGVMZW5ndGgpKTtcbiAgICAgICAgYXdhaXQgdGhpcy53b3JrZXIuY2FsbCgnYmJmcmVlJywgbWVtKTtcbiAgICAgICAgcmV0dXJuIGRhdGFCdWY7XG4gICAgfVxufVxuZXhwb3J0cy5TaW5nbGVOb3RlRGVjcnlwdG9yID0gU2luZ2xlTm90ZURlY3J5cHRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMybHVaMnhsWDI1dmRHVmZaR1ZqY25sd2RHOXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMMjV2ZEdWZllXeG5iM0pwZEdodGN5OXViM1JsWDJSbFkzSjVjSFJ2Y2k5emFXNW5iR1ZmYm05MFpWOWtaV055ZVhCMGIzSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNiVVJCUVN0RE8wRkJTUzlETEUxQlFXRXNiVUpCUVcxQ08wbEJRemxDTEZsQlFXOUNMRTFCUVRaRE8xRkJRVGRETEZkQlFVMHNSMEZCVGl4TlFVRk5MRU5CUVhWRE8wbEJRVWNzUTBGQlF6dEpRVVU1UkN4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNUMEZCWlN4RlFVRkZMRlZCUVd0Q08xRkJRMmhGTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzUlVGQlJTeERRVUZETzFGQlF5OUNMRTFCUVUwc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NkMEpCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRmFrUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRia1lzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZETDBNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVVnVSU3hOUVVGTkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRPVVlzVFVGQlRTeFBRVUZQTEVkQlFWY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFZEJRVWNzVDBGQlR5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU0zUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOMFF5eFBRVUZQTEU5QlFVOHNRMEZCUXp0SlFVTnFRaXhEUVVGRE8wTkJRMFk3UVVGb1FrUXNhMFJCWjBKREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/note_decryptor/single_note_decryptor.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/recover_tree_notes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/recover_tree_notes.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.recoverTreeNotes = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst grumpkin_1 = __webpack_require__(/*! ../ecc/grumpkin */ \"./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js\");\nconst tree_note_1 = __webpack_require__(/*! ./tree_note */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_note.js\");\nconst debug = (0, log_1.createDebugLogger)('recover_tree_notes');\nconst recoverTreeNotes = (decryptedNotes, inputNullifiers, noteCommitments, privateKey, grumpkin, noteAlgorithms) => {\n    const ownerPubKey = new address_1.GrumpkinAddress(grumpkin.mul(grumpkin_1.Grumpkin.one, privateKey));\n    return decryptedNotes.map((decrypted, i) => {\n        if (!decrypted) {\n            debug(`index ${i}: no decrypted tree note.`);\n            return;\n        }\n        const noteCommitment = noteCommitments[i];\n        const inputNullifier = inputNullifiers[i];\n        const note = tree_note_1.TreeNote.recover(decrypted, inputNullifier, ownerPubKey);\n        debug({ note });\n        const commitment = noteAlgorithms.valueNoteCommitment(note);\n        if (commitment.equals(noteCommitment)) {\n            debug(`index ${i}: tree commitment ${noteCommitment.toString('hex')} matches note version 1.`);\n            return note;\n        }\n        debug(`index ${i}: tree commitment ${noteCommitment.toString('hex')} != encrypted note commitment ${commitment.toString('hex')}.`);\n    });\n};\nexports.recoverTreeNotes = recoverTreeNotes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3Zlcl90cmVlX25vdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9yZWNvdmVyX3RyZWVfbm90ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQTZDO0FBQzdDLGdDQUEyQztBQUMzQyw4Q0FBMkM7QUFHM0MsMkNBQXVDO0FBRXZDLE1BQU0sS0FBSyxHQUFHLElBQUEsdUJBQWlCLEVBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUUvQyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLGNBQTZDLEVBQzdDLGVBQXlCLEVBQ3pCLGVBQXlCLEVBQ3pCLFVBQWtCLEVBQ2xCLFFBQWtCLEVBQ2xCLGNBQThCLEVBQzlCLEVBQUU7SUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBUSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN6QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsS0FBSyxDQUFDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzdDLE9BQU87U0FDUjtRQUVELE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUMsTUFBTSxJQUFJLEdBQUcsb0JBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN0RSxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RCxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDckMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMvRixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsS0FBSyxDQUNILFNBQVMsQ0FBQyxxQkFBcUIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLFVBQVUsQ0FBQyxRQUFRLENBQy9HLEtBQUssQ0FDTixHQUFHLENBQ0wsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBL0JXLFFBQUEsZ0JBQWdCLG9CQStCM0IifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9ub3RlX2FsZ29yaXRobXMvcmVjb3Zlcl90cmVlX25vdGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBWTtBQUN0QyxjQUFjLG1CQUFPLENBQUMsd0VBQVE7QUFDOUIsbUJBQW1CLG1CQUFPLENBQUMsMEZBQWlCO0FBQzVDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsRUFBRTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTtBQUNBLDJCQUEyQixFQUFFLG9CQUFvQixnQ0FBZ0M7QUFDakY7QUFDQTtBQUNBLHVCQUF1QixFQUFFLG9CQUFvQixnQ0FBZ0MsK0JBQStCLDJCQUEyQjtBQUN2SSxLQUFLO0FBQ0w7QUFDQSx3QkFBd0I7QUFDeEIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L25vdGVfYWxnb3JpdGhtcy9yZWNvdmVyX3RyZWVfbm90ZXMuanM/YjA1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb3ZlclRyZWVOb3RlcyA9IHZvaWQgMDtcbmNvbnN0IGFkZHJlc3NfMSA9IHJlcXVpcmUoXCIuLi9hZGRyZXNzXCIpO1xuY29uc3QgbG9nXzEgPSByZXF1aXJlKFwiLi4vbG9nXCIpO1xuY29uc3QgZ3J1bXBraW5fMSA9IHJlcXVpcmUoXCIuLi9lY2MvZ3J1bXBraW5cIik7XG5jb25zdCB0cmVlX25vdGVfMSA9IHJlcXVpcmUoXCIuL3RyZWVfbm90ZVwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGxvZ18xLmNyZWF0ZURlYnVnTG9nZ2VyKSgncmVjb3Zlcl90cmVlX25vdGVzJyk7XG5jb25zdCByZWNvdmVyVHJlZU5vdGVzID0gKGRlY3J5cHRlZE5vdGVzLCBpbnB1dE51bGxpZmllcnMsIG5vdGVDb21taXRtZW50cywgcHJpdmF0ZUtleSwgZ3J1bXBraW4sIG5vdGVBbGdvcml0aG1zKSA9PiB7XG4gICAgY29uc3Qgb3duZXJQdWJLZXkgPSBuZXcgYWRkcmVzc18xLkdydW1wa2luQWRkcmVzcyhncnVtcGtpbi5tdWwoZ3J1bXBraW5fMS5HcnVtcGtpbi5vbmUsIHByaXZhdGVLZXkpKTtcbiAgICByZXR1cm4gZGVjcnlwdGVkTm90ZXMubWFwKChkZWNyeXB0ZWQsIGkpID0+IHtcbiAgICAgICAgaWYgKCFkZWNyeXB0ZWQpIHtcbiAgICAgICAgICAgIGRlYnVnKGBpbmRleCAke2l9OiBubyBkZWNyeXB0ZWQgdHJlZSBub3RlLmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vdGVDb21taXRtZW50ID0gbm90ZUNvbW1pdG1lbnRzW2ldO1xuICAgICAgICBjb25zdCBpbnB1dE51bGxpZmllciA9IGlucHV0TnVsbGlmaWVyc1tpXTtcbiAgICAgICAgY29uc3Qgbm90ZSA9IHRyZWVfbm90ZV8xLlRyZWVOb3RlLnJlY292ZXIoZGVjcnlwdGVkLCBpbnB1dE51bGxpZmllciwgb3duZXJQdWJLZXkpO1xuICAgICAgICBkZWJ1Zyh7IG5vdGUgfSk7XG4gICAgICAgIGNvbnN0IGNvbW1pdG1lbnQgPSBub3RlQWxnb3JpdGhtcy52YWx1ZU5vdGVDb21taXRtZW50KG5vdGUpO1xuICAgICAgICBpZiAoY29tbWl0bWVudC5lcXVhbHMobm90ZUNvbW1pdG1lbnQpKSB7XG4gICAgICAgICAgICBkZWJ1ZyhgaW5kZXggJHtpfTogdHJlZSBjb21taXRtZW50ICR7bm90ZUNvbW1pdG1lbnQudG9TdHJpbmcoJ2hleCcpfSBtYXRjaGVzIG5vdGUgdmVyc2lvbiAxLmApO1xuICAgICAgICAgICAgcmV0dXJuIG5vdGU7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoYGluZGV4ICR7aX06IHRyZWUgY29tbWl0bWVudCAke25vdGVDb21taXRtZW50LnRvU3RyaW5nKCdoZXgnKX0gIT0gZW5jcnlwdGVkIG5vdGUgY29tbWl0bWVudCAke2NvbW1pdG1lbnQudG9TdHJpbmcoJ2hleCcpfS5gKTtcbiAgICB9KTtcbn07XG5leHBvcnRzLnJlY292ZXJUcmVlTm90ZXMgPSByZWNvdmVyVHJlZU5vdGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY21WamIzWmxjbDkwY21WbFgyNXZkR1Z6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMMjV2ZEdWZllXeG5iM0pwZEdodGN5OXlaV052ZG1WeVgzUnlaV1ZmYm05MFpYTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkME5CUVRaRE8wRkJRemRETEdkRFFVRXlRenRCUVVNelF5dzRRMEZCTWtNN1FVRkhNME1zTWtOQlFYVkRPMEZCUlhaRExFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVRXNkVUpCUVdsQ0xFVkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRCUVVVdlF5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRemxDTEdOQlFUWkRMRVZCUXpkRExHVkJRWGxDTEVWQlEzcENMR1ZCUVhsQ0xFVkJRM3BDTEZWQlFXdENMRVZCUTJ4Q0xGRkJRV3RDTEVWQlEyeENMR05CUVRoQ0xFVkJRemxDTEVWQlFVVTdTVUZEUml4TlFVRk5MRmRCUVZjc1IwRkJSeXhKUVVGSkxIbENRVUZsTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXh0UWtGQlVTeERRVUZETEVkQlFVY3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMmhHTEU5QlFVOHNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0UlFVTjZReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzFsQlEyUXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4RFFVRkRPMWxCUXpkRExFOUJRVTg3VTBGRFVqdFJRVVZFTEUxQlFVMHNZMEZCWXl4SFFVRkhMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU14UXl4TlFVRk5MR05CUVdNc1IwRkJSeXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGTVVNc1RVRkJUU3hKUVVGSkxFZEJRVWNzYjBKQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRkxHTkJRV01zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTjBSU3hMUVVGTExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJoQ0xFMUJRVTBzVlVGQlZTeEhRVUZITEdOQlFXTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hKUVVGSkxGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRVZCUVVVN1dVRkRja01zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4eFFrRkJjVUlzWTBGQll5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0WlFVTXZSaXhQUVVGUExFbEJRVWtzUTBGQlF6dFRRVU5pTzFGQlEwUXNTMEZCU3l4RFFVTklMRk5CUVZNc1EwRkJReXh4UWtGQmNVSXNZMEZCWXl4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zYVVOQlFXbERMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJReTlITEV0QlFVc3NRMEZEVGl4SFFVRkhMRU5CUTB3c1EwRkJRenRKUVVOS0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEwd3NRMEZCUXl4RFFVRkRPMEZCTDBKWExGRkJRVUVzWjBKQlFXZENMRzlDUVN0Q00wSWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/recover_tree_notes.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_claim_note.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_claim_note.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TreeClaimNote = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst bridge_id_1 = __webpack_require__(/*! ../bridge_id */ \"./node_modules/@noir-lang/barretenberg/dest/bridge_id/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nclass TreeClaimNote {\n    constructor(value, bridgeId, defiInteractionNonce, fee, partialState, inputNullifier) {\n        this.value = value;\n        this.bridgeId = bridgeId;\n        this.defiInteractionNonce = defiInteractionNonce;\n        this.fee = fee;\n        this.partialState = partialState;\n        this.inputNullifier = inputNullifier;\n    }\n    static random() {\n        return new TreeClaimNote((0, bigint_buffer_1.toBigIntBE)((0, crypto_1.randomBytes)(32)), bridge_id_1.BridgeId.random(), (0, crypto_1.randomBytes)(4).readUInt32BE(0), (0, bigint_buffer_1.toBigIntBE)((0, crypto_1.randomBytes)(32)), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32));\n    }\n    static deserialize(buf, offset) {\n        return {\n            elem: TreeClaimNote.fromBuffer(buf.slice(offset, offset + TreeClaimNote.LENGTH)),\n            adv: TreeClaimNote.LENGTH,\n        };\n    }\n    static fromBuffer(buf) {\n        const value = (0, bigint_buffer_1.toBigIntBE)(buf.slice(0, 32));\n        let offset = 32;\n        const bridgeId = bridge_id_1.BridgeId.fromBuffer(buf.slice(offset, offset + bridge_id_1.BridgeId.ENCODED_LENGTH_IN_BYTES));\n        offset += 32;\n        const defiInteractionNonce = buf.readUInt32BE(offset);\n        offset += 4;\n        const fee = (0, bigint_buffer_1.toBigIntBE)(buf.slice(offset, offset + 32));\n        offset += 32;\n        const partialState = buf.slice(offset, offset + 32);\n        offset += 32;\n        const inputNullifier = buf.slice(offset, offset + 32);\n        return new TreeClaimNote(value, bridgeId, defiInteractionNonce, fee, partialState, inputNullifier);\n    }\n    toBuffer() {\n        return Buffer.concat([\n            (0, bigint_buffer_1.toBufferBE)(this.value, 32),\n            this.bridgeId.toBuffer(),\n            (0, serialize_1.numToUInt32BE)(this.defiInteractionNonce),\n            (0, bigint_buffer_1.toBufferBE)(this.fee, 32),\n            this.partialState,\n            this.inputNullifier,\n        ]);\n    }\n    equals(note) {\n        return this.toBuffer().equals(note.toBuffer());\n    }\n}\nexports.TreeClaimNote = TreeClaimNote;\nTreeClaimNote.EMPTY = new TreeClaimNote(BigInt(0), bridge_id_1.BridgeId.ZERO, 0, BigInt(0), Buffer.alloc(32), Buffer.alloc(32));\nTreeClaimNote.LENGTH = TreeClaimNote.EMPTY.toBuffer().length;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZV9jbGFpbV9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy90cmVlX2NsYWltX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQTBEO0FBQzFELDRDQUF3QztBQUN4QyxzQ0FBd0M7QUFDeEMsNENBQTZDO0FBRTdDLE1BQWEsYUFBYTtJQUl4QixZQUNTLEtBQWEsRUFDYixRQUFrQixFQUNsQixvQkFBNEIsRUFDNUIsR0FBVyxFQUNYLFlBQW9CLEVBQ3BCLGNBQXNCO1FBTHRCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTtRQUM1QixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7SUFDNUIsQ0FBQztJQUVKLE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLGFBQWEsQ0FDdEIsSUFBQSwwQkFBVSxFQUFDLElBQUEsb0JBQVcsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUMzQixvQkFBUSxDQUFDLE1BQU0sRUFBRSxFQUNqQixJQUFBLG9CQUFXLEVBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUM5QixJQUFBLDBCQUFVLEVBQUMsSUFBQSxvQkFBVyxFQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQzNCLElBQUEsb0JBQVcsRUFBQyxFQUFFLENBQUMsRUFDZixJQUFBLG9CQUFXLEVBQUMsRUFBRSxDQUFDLENBQ2hCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXLEVBQUUsTUFBYztRQUM1QyxPQUFPO1lBQ0wsSUFBSSxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLGFBQWEs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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_claim_note.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_note.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_note.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TreeNote = void 0;\nconst address_1 = __webpack_require__(/*! ../address */ \"./node_modules/@noir-lang/barretenberg/dest/address/index.js\");\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nconst viewing_key_1 = __webpack_require__(/*! ../viewing_key */ \"./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js\");\nconst derive_note_secret_1 = __webpack_require__(/*! ./derive_note_secret */ \"./node_modules/@noir-lang/barretenberg/dest/note_algorithms/derive_note_secret.js\");\nclass TreeNote {\n    constructor(ownerPubKey, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier) {\n        this.ownerPubKey = ownerPubKey;\n        this.value = value;\n        this.assetId = assetId;\n        this.accountRequired = accountRequired;\n        this.noteSecret = noteSecret;\n        this.creatorPubKey = creatorPubKey;\n        this.inputNullifier = inputNullifier;\n    }\n    toBuffer() {\n        return Buffer.concat([\n            (0, bigint_buffer_1.toBufferBE)(this.value, 32),\n            (0, serialize_1.numToUInt32BE)(this.assetId),\n            Buffer.from([this.accountRequired ? 1 : 0]),\n            this.ownerPubKey.toBuffer(),\n            this.noteSecret,\n            this.creatorPubKey,\n            this.inputNullifier,\n        ]);\n    }\n    createViewingKey(ephPrivKey, grumpkin) {\n        const noteBuf = Buffer.concat([\n            (0, bigint_buffer_1.toBufferBE)(this.value, 32),\n            (0, serialize_1.numToUInt32BE)(this.assetId),\n            (0, serialize_1.numToUInt32BE)(+this.accountRequired),\n            this.creatorPubKey,\n        ]);\n        return viewing_key_1.ViewingKey.createFromEphPriv(noteBuf, this.ownerPubKey, ephPrivKey, grumpkin);\n    }\n    static fromBuffer(buf) {\n        let dataStart = 0;\n        const value = (0, bigint_buffer_1.toBigIntBE)(buf.slice(dataStart, dataStart + 32));\n        dataStart += 32;\n        const assetId = buf.readUInt32BE(dataStart);\n        dataStart += 4;\n        const accountRequired = !!buf[dataStart];\n        dataStart += 1;\n        const ownerPubKey = new address_1.GrumpkinAddress(buf.slice(dataStart, dataStart + 64));\n        dataStart += 64;\n        const noteSecret = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const creatorPubKey = buf.slice(dataStart, dataStart + 32);\n        dataStart += 32;\n        const inputNullifier = buf.slice(dataStart, dataStart + 32);\n        return new TreeNote(ownerPubKey, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier);\n    }\n    /**\n     * Note on how the noteSecret can be derived in two different ways (from ephPubKey or ephPrivKey):\n     *\n     * ownerPubKey := [ownerPrivKey] * G  (where G is a generator of the grumpkin curve, and `[scalar] * Point` is scalar multiplication).\n     *                      ↑\n     *         a.k.a. account private key\n     *\n     * ephPubKey := [ephPrivKey] * G    (where ephPrivKey is a random field element).\n     *\n     * sharedSecret := [ephPrivKey] * ownerPubKey = [ephPrivKey] * ([ownerPrivKey] * G) = [ownerPrivKey] * ([ephPrivKey] * G) = [ownerPrivKey] * ephPubKey\n     *                  ^^^^^^^^^^                                                                                                               ^^^^^^^^^\n     * noteSecret is then derivable from the sharedSecret.\n     */\n    static createFromEphPriv(ownerPubKey, value, assetId, accountRequired, inputNullifier, ephPrivKey, grumpkin, creatorPubKey = Buffer.alloc(32)) {\n        const noteSecret = (0, derive_note_secret_1.deriveNoteSecret)(ownerPubKey, ephPrivKey, grumpkin);\n        return new TreeNote(ownerPubKey, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier);\n    }\n    static createFromEphPub(ownerPubKey, value, assetId, accountRequired, inputNullifier, ephPubKey, ownerPrivKey, grumpkin, creatorPubKey = Buffer.alloc(32)) {\n        const noteSecret = (0, derive_note_secret_1.deriveNoteSecret)(ephPubKey, ownerPrivKey, grumpkin);\n        return new TreeNote(ownerPubKey, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier);\n    }\n    static recover({ noteBuf, noteSecret }, inputNullifier, ownerPubKey) {\n        const value = (0, bigint_buffer_1.toBigIntBE)(noteBuf.slice(0, 32));\n        const assetId = noteBuf.readUInt32BE(32);\n        const accountRequired = !!noteBuf.readUInt32BE(36);\n        const creatorPubKey = noteBuf.slice(40, 72);\n        return new TreeNote(ownerPubKey, value, assetId, accountRequired, noteSecret, creatorPubKey, inputNullifier);\n    }\n}\nexports.TreeNote = TreeNote;\nTreeNote.EMPTY = new TreeNote(address_1.GrumpkinAddress.one(), BigInt(0), 0, false, Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32));\nTreeNote.SIZE = TreeNote.EMPTY.toBuffer().length;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZV9ub3RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy90cmVlX25vdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQTZDO0FBQzdDLG9EQUEwRDtBQUUxRCw0Q0FBNkM7QUFDN0MsZ0RBQTRDO0FBRTVDLDZEQUF3RDtBQUV4RCxNQUFhLFFBQVE7SUFZbkIsWUFDUyxXQUE0QixFQUM1QixLQUFhLEVBQ2IsT0FBZSxFQUNmLGVBQXdCLEVBQ3hCLFVBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLGNBQXNCO1FBTnRCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLG9CQUFlLEdBQWYsZUFBZSxDQUFTO1FBQ3hCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsa0JBQWEsR0FBYixhQUFhLENBQVE7UUFDckIsbUJBQWMsR0FBZCxjQUFjLENBQVE7SUFDNUIsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsSUFBQSwwQkFBVSxFQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzFCLElBQUEseUJBQWEsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxVQUFVO1lBQ2YsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLGNBQWM7U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLFVBQWtCLEVBQUUsUUFBa0I7UUFDckQsTUFBTSxPQUFPLEdBQUcs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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/note_algorithms/tree_note.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/pippenger/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/pippenger/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pippenger */ \"./node_modules/@noir-lang/barretenberg/dest/pippenger/pippenger.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./single_pippenger */ \"./node_modules/@noir-lang/barretenberg/dest/pippenger/single_pippenger.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./pooled_pippenger */ \"./node_modules/@noir-lang/barretenberg/dest/pippenger/pooled_pippenger.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGlwcGVuZ2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJEQUE0QjtBQUM1QixrRUFBbUM7QUFDbkMsa0VBQW1DIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsdUZBQWE7QUFDL0MsMEJBQTBCLG1CQUFPLENBQUMscUdBQW9CO0FBQ3RELDBCQUEwQixtQkFBTyxDQUFDLHFHQUFvQjtBQUN0RCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3QvcGlwcGVuZ2VyL2luZGV4LmpzPzFjNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9waXBwZW5nZXJcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9zaW5nbGVfcGlwcGVuZ2VyXCIpLCBleHBvcnRzKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vcG9vbGVkX3BpcHBlbmdlclwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12Y0dsd2NHVnVaMlZ5TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMREpFUVVFMFFqdEJRVU0xUWl4clJVRkJiVU03UVVGRGJrTXNhMFZCUVcxREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/pippenger/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/pippenger/pippenger.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/pippenger/pippenger.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwcGVuZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BpcHBlbmdlci9waXBwZW5nZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvcGlwcGVuZ2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvcGlwcGVuZ2VyLmpzPzJkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljR2x3Y0dWdVoyVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzQnBjSEJsYm1kbGNpOXdhWEJ3Wlc1blpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJaUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/pippenger/pippenger.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/pippenger/pooled_pippenger.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/pippenger/pooled_pippenger.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PooledPippenger = void 0;\nconst single_pippenger_1 = __webpack_require__(/*! ./single_pippenger */ \"./node_modules/@noir-lang/barretenberg/dest/pippenger/single_pippenger.js\");\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst debug = (0, log_1.createDebugLogger)('bb:pippenger');\nclass PooledPippenger {\n    constructor(workerPool) {\n        this.workerPool = workerPool;\n        this.pool = [];\n    }\n    async init(crsData) {\n        const start = new Date().getTime();\n        debug(`initializing: ${new Date().getTime() - start}ms`);\n        this.pool = await Promise.all(this.workerPool.workers.map(async (w) => {\n            const p = new single_pippenger_1.SinglePippenger(w);\n            await p.init(crsData);\n            return p;\n        }));\n        debug(`initialization took: ${new Date().getTime() - start}ms`);\n    }\n    async pippengerUnsafe(scalars, from, range) {\n        const scalarsPerWorker = range / this.pool.length;\n        const start = new Date().getTime();\n        const results = await Promise.all(this.pool.map((p, i) => {\n            const subset = scalars.slice(scalarsPerWorker * i * 32, scalarsPerWorker * (i + 1) * 32);\n            return p.pippengerUnsafe(subset, scalarsPerWorker * i, scalarsPerWorker);\n        }));\n        debug(`pippenger run took: ${new Date().getTime() - start}ms`);\n        return await this.sumElements(Buffer.concat(results));\n    }\n    async sumElements(buffer) {\n        return await this.pool[0].sumElements(buffer);\n    }\n}\nexports.PooledPippenger = PooledPippenger;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbGVkX3BpcHBlbmdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBwZW5nZXIvcG9vbGVkX3BpcHBlbmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5REFBcUQ7QUFDckQsZ0NBQTJDO0FBRzNDLE1BQU0sS0FBSyxHQUFHLElBQUEsdUJBQWlCLEVBQUMsY0FBYyxDQUFDLENBQUM7QUFFaEQsTUFBYSxlQUFlO0lBRzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFGbkMsU0FBSSxHQUFzQixFQUFFLENBQUM7SUFFUyxDQUFDO0lBRXZDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBbUI7UUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxLQUFLLENBQUMsaUJBQWlCLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtZQUNwQyxNQUFNLENBQUMsR0FBRyxJQUFJLGtDQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNGLEtBQUssQ0FBQyx3QkFBd0IsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQW1CLEVBQUUsSUFBWSxFQUFFLEtBQWE7UUFDM0UsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6RixPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGdCQUFnQixHQUFHLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDRixLQUFLLENBQUMsdUJBQXVCLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUMvRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBa0I7UUFDekMsT0FBTyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQWxDRCwwQ0FrQ0MifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvcG9vbGVkX3BpcHBlbmdlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLDJCQUEyQixtQkFBTyxDQUFDLHFHQUFvQjtBQUN2RCxjQUFjLG1CQUFPLENBQUMsd0VBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw2QkFBNkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsc0NBQXNDLDZCQUE2QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxxQ0FBcUMsNkJBQTZCO0FBQ2xFLHNDQUFzQyxNQUFNO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L3BpcHBlbmdlci9wb29sZWRfcGlwcGVuZ2VyLmpzPzUwZTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvb2xlZFBpcHBlbmdlciA9IHZvaWQgMDtcbmNvbnN0IHNpbmdsZV9waXBwZW5nZXJfMSA9IHJlcXVpcmUoXCIuL3NpbmdsZV9waXBwZW5nZXJcIik7XG5jb25zdCBsb2dfMSA9IHJlcXVpcmUoXCIuLi9sb2dcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBsb2dfMS5jcmVhdGVEZWJ1Z0xvZ2dlcikoJ2JiOnBpcHBlbmdlcicpO1xuY2xhc3MgUG9vbGVkUGlwcGVuZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3JrZXJQb29sKSB7XG4gICAgICAgIHRoaXMud29ya2VyUG9vbCA9IHdvcmtlclBvb2w7XG4gICAgICAgIHRoaXMucG9vbCA9IFtdO1xuICAgIH1cbiAgICBhc3luYyBpbml0KGNyc0RhdGEpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgZGVidWcoYGluaXRpYWxpemluZzogJHtuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0fW1zYCk7XG4gICAgICAgIHRoaXMucG9vbCA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMud29ya2VyUG9vbC53b3JrZXJzLm1hcChhc3luYyAodykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5ldyBzaW5nbGVfcGlwcGVuZ2VyXzEuU2luZ2xlUGlwcGVuZ2VyKHcpO1xuICAgICAgICAgICAgYXdhaXQgcC5pbml0KGNyc0RhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH0pKTtcbiAgICAgICAgZGVidWcoYGluaXRpYWxpemF0aW9uIHRvb2s6ICR7bmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydH1tc2ApO1xuICAgIH1cbiAgICBhc3luYyBwaXBwZW5nZXJVbnNhZmUoc2NhbGFycywgZnJvbSwgcmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgc2NhbGFyc1BlcldvcmtlciA9IHJhbmdlIC8gdGhpcy5wb29sLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMucG9vbC5tYXAoKHAsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNldCA9IHNjYWxhcnMuc2xpY2Uoc2NhbGFyc1BlcldvcmtlciAqIGkgKiAzMiwgc2NhbGFyc1BlcldvcmtlciAqIChpICsgMSkgKiAzMik7XG4gICAgICAgICAgICByZXR1cm4gcC5waXBwZW5nZXJVbnNhZmUoc3Vic2V0LCBzY2FsYXJzUGVyV29ya2VyICogaSwgc2NhbGFyc1Blcldvcmtlcik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgZGVidWcoYHBpcHBlbmdlciBydW4gdG9vazogJHtuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0fW1zYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN1bUVsZW1lbnRzKEJ1ZmZlci5jb25jYXQocmVzdWx0cykpO1xuICAgIH1cbiAgICBhc3luYyBzdW1FbGVtZW50cyhidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9vbFswXS5zdW1FbGVtZW50cyhidWZmZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbGVkUGlwcGVuZ2VyID0gUG9vbGVkUGlwcGVuZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0c5dmJHVmtYM0JwY0hCbGJtZGxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXdhWEJ3Wlc1blpYSXZjRzl2YkdWa1gzQnBjSEJsYm1kbGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGRFFTeDVSRUZCY1VRN1FVRkRja1FzWjBOQlFUSkRPMEZCUnpORExFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVRXNkVUpCUVdsQ0xFVkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRVUZGYUVRc1RVRkJZU3hsUVVGbE8wbEJSekZDTEZsQlFXOUNMRlZCUVhOQ08xRkJRWFJDTEdWQlFWVXNSMEZCVml4VlFVRlZMRU5CUVZrN1VVRkdia01zVTBGQlNTeEhRVUZ6UWl4RlFVRkZMRU5CUVVNN1NVRkZVeXhEUVVGRE8wbEJSWFpETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJiVUk3VVVGRGJrTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hKUVVGSkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0UlFVTnVReXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRWxCUVVrc1NVRkJTU3hGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NTMEZCU3l4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVONlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGRE0wSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NSVUZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSVHRaUVVOd1F5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMR3REUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtNc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUTNSQ0xFOUJRVThzUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUTBnc1EwRkJRenRSUVVOR0xFdEJRVXNzUTBGQlF5eDNRa0ZCZDBJc1NVRkJTU3hKUVVGSkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4TFFVRkxMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMnhGTEVOQlFVTTdTVUZGVFN4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVzFDTEVWQlFVVXNTVUZCV1N4RlFVRkZMRXRCUVdFN1VVRkRNMFVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRiRVFzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4SlFVRkpMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU51UXl4TlFVRk5MRTlCUVU4c1IwRkJSeXhOUVVGTkxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlF5OUNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRM0pDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVONlJpeFBRVUZQTEVOQlFVTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hGUVVGRkxHZENRVUZuUWl4SFFVRkhMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRPMUZCUXpORkxFTkJRVU1zUTBGQlF5eERRVU5JTEVOQlFVTTdVVUZEUml4TFFVRkxMRU5CUVVNc2RVSkJRWFZDTEVsQlFVa3NTVUZCU1N4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTXZSQ3hQUVVGUExFMUJRVTBzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEZUVRc1EwRkJRenRKUVVWTkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCYTBJN1VVRkRla01zVDBGQlR5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU03UTBGRFJqdEJRV3hEUkN3d1EwRnJRME1pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/pippenger/pooled_pippenger.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/pippenger/single_pippenger.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/pippenger/single_pippenger.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SinglePippenger = void 0;\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist/index.js\");\nclass SinglePippenger {\n    constructor(wasm) {\n        this.wasm = wasm;\n    }\n    async init(crsData) {\n        const crsPtr = await this.wasm.call('bbmalloc', crsData.length);\n        this.numPoints = crsData.length / 64;\n        await this.wasm.transferToHeap(crsData, crsPtr);\n        this.pippengerPtr = await this.wasm.call('new_pippenger', crsPtr, this.numPoints);\n        await this.wasm.call('bbfree', crsPtr);\n    }\n    async destroy() {\n        await this.wasm.call('delete_pippenger', this.pippengerPtr);\n    }\n    async pippengerUnsafe(scalars, from, range) {\n        const mem = await this.wasm.call('bbmalloc', scalars.length);\n        await this.wasm.transferToHeap((0, threads_1.Transfer)(scalars, [scalars.buffer]), mem);\n        await this.wasm.call('pippenger_unsafe', this.pippengerPtr, mem, from, range, 0);\n        await this.wasm.call('bbfree', mem);\n        return Buffer.from(await this.wasm.sliceMemory(0, 96));\n    }\n    async sumElements(buffer) {\n        const mem = await this.wasm.call('bbmalloc', buffer.length);\n        await this.wasm.transferToHeap(buffer, mem);\n        await this.wasm.call('g1_sum', mem, buffer.length / 96, 0);\n        await this.wasm.call('bbfree', mem);\n        return Buffer.from(await this.wasm.sliceMemory(0, 96));\n    }\n    getPointer() {\n        return this.pippengerPtr;\n    }\n    getWorker() {\n        return this.wasm;\n    }\n}\nexports.SinglePippenger = SinglePippenger;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX3BpcHBlbmdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waXBwZW5nZXIvc2luZ2xlX3BpcHBlbmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxxQ0FBbUM7QUFFbkMsTUFBYSxlQUFlO0lBSTFCLFlBQW9CLElBQXdCO1FBQXhCLFNBQUksR0FBSixJQUFJLENBQW9CO0lBQUcsQ0FBQztJQUV6QyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQW1CO1FBQ25DLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBbUIsRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUMzRSxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFBLGtCQUFRLEVBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEYsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQWtCO1FBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBekNELDBDQXlDQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvc2luZ2xlX3BpcHBlbmdlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGtCQUFrQixtQkFBTyxDQUFDLHFEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9waXBwZW5nZXIvc2luZ2xlX3BpcHBlbmdlci5qcz9iYTRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaW5nbGVQaXBwZW5nZXIgPSB2b2lkIDA7XG5jb25zdCB0aHJlYWRzXzEgPSByZXF1aXJlKFwidGhyZWFkc1wiKTtcbmNsYXNzIFNpbmdsZVBpcHBlbmdlciB7XG4gICAgY29uc3RydWN0b3Iod2FzbSkge1xuICAgICAgICB0aGlzLndhc20gPSB3YXNtO1xuICAgIH1cbiAgICBhc3luYyBpbml0KGNyc0RhdGEpIHtcbiAgICAgICAgY29uc3QgY3JzUHRyID0gYXdhaXQgdGhpcy53YXNtLmNhbGwoJ2JibWFsbG9jJywgY3JzRGF0YS5sZW5ndGgpO1xuICAgICAgICB0aGlzLm51bVBvaW50cyA9IGNyc0RhdGEubGVuZ3RoIC8gNjQ7XG4gICAgICAgIGF3YWl0IHRoaXMud2FzbS50cmFuc2ZlclRvSGVhcChjcnNEYXRhLCBjcnNQdHIpO1xuICAgICAgICB0aGlzLnBpcHBlbmdlclB0ciA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCduZXdfcGlwcGVuZ2VyJywgY3JzUHRyLCB0aGlzLm51bVBvaW50cyk7XG4gICAgICAgIGF3YWl0IHRoaXMud2FzbS5jYWxsKCdiYmZyZWUnLCBjcnNQdHIpO1xuICAgIH1cbiAgICBhc3luYyBkZXN0cm95KCkge1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnZGVsZXRlX3BpcHBlbmdlcicsIHRoaXMucGlwcGVuZ2VyUHRyKTtcbiAgICB9XG4gICAgYXN5bmMgcGlwcGVuZ2VyVW5zYWZlKHNjYWxhcnMsIGZyb20sIHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG1lbSA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIHNjYWxhcnMubGVuZ3RoKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLnRyYW5zZmVyVG9IZWFwKCgwLCB0aHJlYWRzXzEuVHJhbnNmZXIpKHNjYWxhcnMsIFtzY2FsYXJzLmJ1ZmZlcl0pLCBtZW0pO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgncGlwcGVuZ2VyX3Vuc2FmZScsIHRoaXMucGlwcGVuZ2VyUHRyLCBtZW0sIGZyb20sIHJhbmdlLCAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy53YXNtLmNhbGwoJ2JiZnJlZScsIG1lbSk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShhd2FpdCB0aGlzLndhc20uc2xpY2VNZW1vcnkoMCwgOTYpKTtcbiAgICB9XG4gICAgYXN5bmMgc3VtRWxlbWVudHMoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IG1lbSA9IGF3YWl0IHRoaXMud2FzbS5jYWxsKCdiYm1hbGxvYycsIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20udHJhbnNmZXJUb0hlYXAoYnVmZmVyLCBtZW0pO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnZzFfc3VtJywgbWVtLCBidWZmZXIubGVuZ3RoIC8gOTYsIDApO1xuICAgICAgICBhd2FpdCB0aGlzLndhc20uY2FsbCgnYmJmcmVlJywgbWVtKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGF3YWl0IHRoaXMud2FzbS5zbGljZU1lbW9yeSgwLCA5NikpO1xuICAgIH1cbiAgICBnZXRQb2ludGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5waXBwZW5nZXJQdHI7XG4gICAgfVxuICAgIGdldFdvcmtlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2FzbTtcbiAgICB9XG59XG5leHBvcnRzLlNpbmdsZVBpcHBlbmdlciA9IFNpbmdsZVBpcHBlbmdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMybHVaMnhsWDNCcGNIQmxibWRsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTl3YVhCd1pXNW5aWEl2YzJsdVoyeGxYM0JwY0hCbGJtZGxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkZRU3h4UTBGQmJVTTdRVUZGYmtNc1RVRkJZU3hsUVVGbE8wbEJTVEZDTEZsQlFXOUNMRWxCUVhkQ08xRkJRWGhDTEZOQlFVa3NSMEZCU2l4SlFVRkpMRU5CUVc5Q08wbEJRVWNzUTBGQlF6dEpRVVY2UXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVzFDTzFGQlEyNURMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTm9SU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0pETEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU5zUml4TlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVONlF5eERRVUZETzBsQlJVMHNTMEZCU3l4RFFVRkRMRTlCUVU4N1VVRkRiRUlzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRE9VUXNRMEZCUXp0SlFVVk5MRXRCUVVzc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQmJVSXNSVUZCUlN4SlFVRlpMRVZCUVVVc1MwRkJZVHRSUVVNelJTeE5RVUZOTEVkQlFVY3NSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRE4wUXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZCTEd0Q1FVRlJMRVZCUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRlJMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGFFWXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEdMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM0JETEU5QlFVOHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzcEVMRU5CUVVNN1NVRkZUU3hMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFXdENPMUZCUTNwRExFMUJRVTBzUjBGQlJ5eEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVNMVJDeE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTTFReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wUXNUVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRjRU1zVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVrUXNRMEZCUXp0SlFVVk5MRlZCUVZVN1VVRkRaaXhQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTTdTVUZETTBJc1EwRkJRenRKUVVWTkxGTkJRVk03VVVGRFpDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRia0lzUTBGQlF6dERRVU5HTzBGQmVrTkVMREJEUVhsRFF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/pippenger/single_pippenger.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/serialize/deserializer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/serialize/deserializer.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Deserializer = void 0;\nconst free_funcs_1 = __webpack_require__(/*! ./free_funcs */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js\");\nclass Deserializer {\n    constructor(buf, offset = 0) {\n        this.buf = buf;\n        this.offset = offset;\n    }\n    bool() {\n        return this.exec(free_funcs_1.deserializeBool) ? true : false;\n    }\n    uInt32() {\n        return this.exec(free_funcs_1.deserializeUInt32);\n    }\n    int32() {\n        return this.exec(free_funcs_1.deserializeInt32);\n    }\n    bigInt(width = 32) {\n        return this.exec((buf, offset) => (0, free_funcs_1.deserializeBigInt)(buf, offset, width));\n    }\n    vector() {\n        return this.exec(free_funcs_1.deserializeBufferFromVector);\n    }\n    buffer(width) {\n        const buf = this.buf.slice(this.offset, this.offset + width);\n        this.offset += width;\n        return buf;\n    }\n    string() {\n        return this.vector().toString();\n    }\n    date() {\n        return new Date(Number(this.bigInt(8)));\n    }\n    deserializeArray(fn) {\n        return this.exec((buf, offset) => (0, free_funcs_1.deserializeArrayFromVector)(fn, buf, offset));\n    }\n    exec(fn) {\n        const { elem, adv } = fn(this.buf, this.offset);\n        this.offset += adv;\n        return elem;\n    }\n    getOffset() {\n        return this.offset;\n    }\n}\nexports.Deserializer = Deserializer;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcmlhbGl6ZS9kZXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBT3NCO0FBSXRCLE1BQWEsWUFBWTtJQUN2QixZQUFvQixHQUFXLEVBQVUsU0FBUyxDQUFDO1FBQS9CLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFJO0lBQUcsQ0FBQztJQUVoRCxJQUFJO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDbkQsQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsOEJBQWlCLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBQSw4QkFBaUIsRUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsd0NBQTJCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQWE7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDO1FBQ3JCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU0sSUFBSTtRQUNULE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBSSxFQUFvQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFXLEVBQUUsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFBLHVDQUEwQixFQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRU0sSUFBSSxDQUFJLEVBQW9CO1FBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBbERELG9DQWtEQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9zZXJpYWxpemUvZGVzZXJpYWxpemVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixxQkFBcUIsbUJBQU8sQ0FBQyx5RkFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L3NlcmlhbGl6ZS9kZXNlcmlhbGl6ZXIuanM/ZGU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVzZXJpYWxpemVyID0gdm9pZCAwO1xuY29uc3QgZnJlZV9mdW5jc18xID0gcmVxdWlyZShcIi4vZnJlZV9mdW5jc1wiKTtcbmNsYXNzIERlc2VyaWFsaXplciB7XG4gICAgY29uc3RydWN0b3IoYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHRoaXMuYnVmID0gYnVmO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gICAgYm9vbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlYyhmcmVlX2Z1bmNzXzEuZGVzZXJpYWxpemVCb29sKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG4gICAgdUludDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leGVjKGZyZWVfZnVuY3NfMS5kZXNlcmlhbGl6ZVVJbnQzMik7XG4gICAgfVxuICAgIGludDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leGVjKGZyZWVfZnVuY3NfMS5kZXNlcmlhbGl6ZUludDMyKTtcbiAgICB9XG4gICAgYmlnSW50KHdpZHRoID0gMzIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlYygoYnVmLCBvZmZzZXQpID0+ICgwLCBmcmVlX2Z1bmNzXzEuZGVzZXJpYWxpemVCaWdJbnQpKGJ1Ziwgb2Zmc2V0LCB3aWR0aCkpO1xuICAgIH1cbiAgICB2ZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWMoZnJlZV9mdW5jc18xLmRlc2VyaWFsaXplQnVmZmVyRnJvbVZlY3Rvcik7XG4gICAgfVxuICAgIGJ1ZmZlcih3aWR0aCkge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLmJ1Zi5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyB3aWR0aCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IHdpZHRoO1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICBzdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY3RvcigpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGRhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOdW1iZXIodGhpcy5iaWdJbnQoOCkpKTtcbiAgICB9XG4gICAgZGVzZXJpYWxpemVBcnJheShmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5leGVjKChidWYsIG9mZnNldCkgPT4gKDAsIGZyZWVfZnVuY3NfMS5kZXNlcmlhbGl6ZUFycmF5RnJvbVZlY3RvcikoZm4sIGJ1Ziwgb2Zmc2V0KSk7XG4gICAgfVxuICAgIGV4ZWMoZm4pIHtcbiAgICAgICAgY29uc3QgeyBlbGVtLCBhZHYgfSA9IGZuKHRoaXMuYnVmLCB0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGFkdjtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICAgIGdldE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVzZXJpYWxpemVyID0gRGVzZXJpYWxpemVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWkdWelpYSnBZV3hwZW1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNObGNtbGhiR2w2WlM5a1pYTmxjbWxoYkdsNlpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNOa05CVDNOQ08wRkJTWFJDTEUxQlFXRXNXVUZCV1R0SlFVTjJRaXhaUVVGdlFpeEhRVUZYTEVWQlFWVXNVMEZCVXl4RFFVRkRPMUZCUVM5Q0xGRkJRVWNzUjBGQlNDeEhRVUZITEVOQlFWRTdVVUZCVlN4WFFVRk5MRWRCUVU0c1RVRkJUU3hEUVVGSk8wbEJRVWNzUTBGQlF6dEpRVVZvUkN4SlFVRkpPMUZCUTFRc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETERSQ1FVRmxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRia1FzUTBGQlF6dEpRVVZOTEUxQlFVMDdVVUZEV0N4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zT0VKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVOMFF5eERRVUZETzBsQlJVMHNTMEZCU3p0UlFVTldMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5dzJRa0ZCWjBJc1EwRkJReXhEUVVGRE8wbEJRM0pETEVOQlFVTTdTVUZGVFN4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVU3VVVGRGRFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlZ5eEZRVUZGTEUxQlFXTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJRU3c0UWtGQmFVSXNSVUZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETTBZc1EwRkJRenRKUVVWTkxFMUJRVTA3VVVGRFdDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2QwTkJRVEpDTEVOQlFVTXNRMEZCUXp0SlFVTm9SQ3hEUVVGRE8wbEJSVTBzVFVGQlRTeERRVUZETEV0QlFXRTdVVUZEZWtJc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRemRFTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRE8xRkJRM0pDTEU5QlFVOHNSMEZCUnl4RFFVRkRPMGxCUTJJc1EwRkJRenRKUVVWTkxFMUJRVTA3VVVGRFdDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU5zUXl4RFFVRkRPMGxCUlUwc1NVRkJTVHRSUVVOVUxFOUJRVThzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpGRExFTkJRVU03U1VGRlRTeG5Ra0ZCWjBJc1EwRkJTU3hGUVVGdlFqdFJRVU0zUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZYTEVWQlFVVXNUVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGQkxIVkRRVUV3UWl4RlFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnFSeXhEUVVGRE8wbEJSVTBzU1VGQlNTeERRVUZKTEVWQlFXOUNPMUZCUTJwRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMmhFTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWTkxGTkJRVk03VVVGRFpDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5HTzBGQmJFUkVMRzlEUVd0RVF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/serialize/deserializer.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deserializeArrayFromVector = exports.serializeBufferArrayToVector = exports.deserializeField = exports.deserializeInt32 = exports.deserializeUInt32 = exports.deserializeBool = exports.deserializeBufferFromVector = exports.serializeDate = exports.deserializeBigInt = exports.serializeBigInt = exports.serializeBufferToVector = exports.numToUInt8 = exports.numToInt32BE = exports.numToUInt32BE = exports.boolToByte = void 0;\nconst bigint_buffer_1 = __webpack_require__(/*! ../bigint_buffer */ \"./node_modules/@noir-lang/barretenberg/dest/bigint_buffer/index.js\");\n// For serializing bool.\nfunction boolToByte(b) {\n    const buf = Buffer.alloc(1);\n    buf.writeUInt8(b ? 1 : 0);\n    return buf;\n}\nexports.boolToByte = boolToByte;\n// For serializing numbers to 32 bit big-endian form.\nfunction numToUInt32BE(n, bufferSize = 4) {\n    const buf = Buffer.alloc(bufferSize);\n    buf.writeUInt32BE(n, bufferSize - 4);\n    return buf;\n}\nexports.numToUInt32BE = numToUInt32BE;\n// For serializing signed numbers to 32 bit big-endian form.\nfunction numToInt32BE(n, bufferSize = 4) {\n    const buf = Buffer.alloc(bufferSize);\n    buf.writeInt32BE(n, bufferSize - 4);\n    return buf;\n}\nexports.numToInt32BE = numToInt32BE;\n// For serializing numbers to 32 bit big-endian form.\nfunction numToUInt8(n) {\n    const bufferSize = 1;\n    const buf = Buffer.alloc(bufferSize);\n    buf.writeUInt8(n, 0);\n    return buf;\n}\nexports.numToUInt8 = numToUInt8;\n// For serializing a buffer as a vector.\nfunction serializeBufferToVector(buf) {\n    const lengthBuf = Buffer.alloc(4);\n    lengthBuf.writeUInt32BE(buf.length, 0);\n    return Buffer.concat([lengthBuf, buf]);\n}\nexports.serializeBufferToVector = serializeBufferToVector;\nfunction serializeBigInt(n, width = 32) {\n    return (0, bigint_buffer_1.toBufferBE)(n, width);\n}\nexports.serializeBigInt = serializeBigInt;\nfunction deserializeBigInt(buf, offset = 0, width = 32) {\n    return { elem: (0, bigint_buffer_1.toBigIntBE)(buf.slice(offset, offset + width)), adv: width };\n}\nexports.deserializeBigInt = deserializeBigInt;\nfunction serializeDate(date) {\n    return serializeBigInt(BigInt(date.getTime()), 8);\n}\nexports.serializeDate = serializeDate;\nfunction deserializeBufferFromVector(vector, offset = 0) {\n    const length = vector.readUInt32BE(offset);\n    const adv = 4 + length;\n    return { elem: vector.slice(offset + 4, offset + adv), adv };\n}\nexports.deserializeBufferFromVector = deserializeBufferFromVector;\nfunction deserializeBool(buf, offset = 0) {\n    const adv = 1;\n    return { elem: buf.readUInt8(offset), adv };\n}\nexports.deserializeBool = deserializeBool;\nfunction deserializeUInt32(buf, offset = 0) {\n    const adv = 4;\n    return { elem: buf.readUInt32BE(offset), adv };\n}\nexports.deserializeUInt32 = deserializeUInt32;\nfunction deserializeInt32(buf, offset = 0) {\n    const adv = 4;\n    return { elem: buf.readInt32BE(offset), adv };\n}\nexports.deserializeInt32 = deserializeInt32;\nfunction deserializeField(buf, offset = 0) {\n    const adv = 32;\n    return { elem: buf.slice(offset, offset + adv), adv };\n}\nexports.deserializeField = deserializeField;\n// For serializing an array of fixed length elements.\nfunction serializeBufferArrayToVector(arr) {\n    const lengthBuf = Buffer.alloc(4);\n    lengthBuf.writeUInt32BE(arr.length, 0);\n    return Buffer.concat([lengthBuf, ...arr]);\n}\nexports.serializeBufferArrayToVector = serializeBufferArrayToVector;\nfunction deserializeArrayFromVector(deserialize, vector, offset = 0) {\n    let pos = offset;\n    const size = vector.readUInt32BE(pos);\n    pos += 4;\n    const arr = new Array(size);\n    for (let i = 0; i < size; ++i) {\n        const { elem, adv } = deserialize(vector, pos);\n        pos += adv;\n        arr[i] = elem;\n    }\n    return { elem: arr, adv: pos - offset };\n}\nexports.deserializeArrayFromVector = deserializeArrayFromVector;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlZV9mdW5jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJpYWxpemUvZnJlZV9mdW5jcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBMEQ7QUFFMUQsd0JBQXdCO0FBQ3hCLFNBQWdCLFVBQVUsQ0FBQyxDQUFVO0lBQ25DLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBSkQsZ0NBSUM7QUFFRCxxREFBcUQ7QUFDckQsU0FBZ0IsYUFBYSxDQUFDLENBQVMsRUFBRSxVQUFVLEdBQUcsQ0FBQztJQUNyRCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFKRCxzQ0FJQztBQUVELDREQUE0RDtBQUM1RCxTQUFnQixZQUFZLENBQUMsQ0FBUyxFQUFFLFVBQVUsR0FBRyxDQUFDO0lBQ3BELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUpELG9DQUlDO0FBRUQscURBQXFEO0FBQ3JELFNBQWdCLFVBQVUsQ0FBQyxDQUFTO0lBQ2xDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNyQixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxD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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/serialize/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/serialize/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./free_funcs */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./deserializer */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/deserializer.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./serializer */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/serializer.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VyaWFsaXplL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDREQUE2QjtBQUM3Qiw4REFBK0I7QUFDL0IsNERBQTZCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9zZXJpYWxpemUvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMscUZBQU87QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMseUZBQWM7QUFDaEQsMEJBQTBCLG1CQUFPLENBQUMsNkZBQWdCO0FBQ2xELDBCQUEwQixtQkFBTyxDQUFDLHlGQUFjO0FBQ2hELDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9zZXJpYWxpemUvaW5kZXguanM/MzIxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL2ZyZWVfZnVuY3NcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9kZXNlcmlhbGl6ZXJcIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZjMlZ5YVdGc2FYcGxMMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxEUkVRVUUyUWp0QlFVTTNRaXc0UkVGQkswSTdRVUZETDBJc05FUkJRVFpDSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/serialize/serializer.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/serialize/serializer.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Serializer = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nconst free_funcs_1 = __webpack_require__(/*! ./free_funcs */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/free_funcs.js\");\n// export type DeserializeFn<T> = (buf: Buffer, offset: number) => { elem: T; adv: number };\nclass Serializer {\n    constructor() {\n        this.buf = [];\n    }\n    bool(bool) {\n        this.buf.push((0, free_funcs_1.boolToByte)(bool));\n    }\n    uInt32(num) {\n        this.buf.push((0, free_funcs_1.numToUInt32BE)(num));\n    }\n    int32(num) {\n        this.buf.push((0, free_funcs_1.numToInt32BE)(num));\n    }\n    bigInt(num) {\n        this.buf.push((0, free_funcs_1.serializeBigInt)(num));\n    }\n    /**\n     * The given buffer is of variable length. Prefixes the buffer with its length.\n     */\n    vector(buf) {\n        this.buf.push((0, free_funcs_1.serializeBufferToVector)(buf));\n    }\n    /**\n     * Directly serializes a buffer that maybe of fixed, or variable length.\n     * It is assumed the corresponding deserialize function will handle variable length data, thus the length\n     * does not need to be prefixed here.\n     * If serializing a raw, variable length buffer, use vector().\n     */\n    buffer(buf) {\n        this.buf.push(buf);\n    }\n    string(str) {\n        this.vector(Buffer.from(str));\n    }\n    date(date) {\n        this.buf.push((0, free_funcs_1.serializeDate)(date));\n    }\n    getBuffer() {\n        return Buffer.concat(this.buf);\n    }\n    serializeArray(arr) {\n        this.buf.push((0, _1.serializeBufferArrayToVector)(arr.map((e) => e.toBuffer())));\n    }\n}\nexports.Serializer = Serializer;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJpYWxpemUvc2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3QkFBaUQ7QUFDakQsNkNBT3NCO0FBRXRCLDRGQUE0RjtBQUU1RixNQUFhLFVBQVU7SUFHckI7UUFGUSxRQUFHLEdBQWEsRUFBRSxDQUFDO0lBRVosQ0FBQztJQUVULElBQUksQ0FBQyxJQUFhO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEsdUJBQVUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBVztRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFBLDBCQUFhLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQVc7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQSx5QkFBWSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFXO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEsNEJBQWUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxHQUFXO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEsb0NBQXVCLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsR0FBVztRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQVc7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLElBQUksQ0FBQyxJQUFVO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEsMEJBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxTQUFTO1FBQ2QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sY0FBYyxDQUFJLEdBQVE7UUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQSwrQkFBNEIsRUFBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztDQUNGO0FBckRELGdDQXFEQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9zZXJpYWxpemUvc2VyaWFsaXplci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLFdBQVcsbUJBQU8sQ0FBQyx5RUFBRztBQUN0QixxQkFBcUIsbUJBQU8sQ0FBQyx5RkFBYztBQUMzQyxxRUFBcUUsU0FBUztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC9zZXJpYWxpemUvc2VyaWFsaXplci5qcz9iZjhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJpYWxpemVyID0gdm9pZCAwO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNvbnN0IGZyZWVfZnVuY3NfMSA9IHJlcXVpcmUoXCIuL2ZyZWVfZnVuY3NcIik7XG4vLyBleHBvcnQgdHlwZSBEZXNlcmlhbGl6ZUZuPFQ+ID0gKGJ1ZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlcikgPT4geyBlbGVtOiBUOyBhZHY6IG51bWJlciB9O1xuY2xhc3MgU2VyaWFsaXplciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnVmID0gW107XG4gICAgfVxuICAgIGJvb2woYm9vbCkge1xuICAgICAgICB0aGlzLmJ1Zi5wdXNoKCgwLCBmcmVlX2Z1bmNzXzEuYm9vbFRvQnl0ZSkoYm9vbCkpO1xuICAgIH1cbiAgICB1SW50MzIobnVtKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goKDAsIGZyZWVfZnVuY3NfMS5udW1Ub1VJbnQzMkJFKShudW0pKTtcbiAgICB9XG4gICAgaW50MzIobnVtKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goKDAsIGZyZWVfZnVuY3NfMS5udW1Ub0ludDMyQkUpKG51bSkpO1xuICAgIH1cbiAgICBiaWdJbnQobnVtKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goKDAsIGZyZWVfZnVuY3NfMS5zZXJpYWxpemVCaWdJbnQpKG51bSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZ2l2ZW4gYnVmZmVyIGlzIG9mIHZhcmlhYmxlIGxlbmd0aC4gUHJlZml4ZXMgdGhlIGJ1ZmZlciB3aXRoIGl0cyBsZW5ndGguXG4gICAgICovXG4gICAgdmVjdG9yKGJ1Zikge1xuICAgICAgICB0aGlzLmJ1Zi5wdXNoKCgwLCBmcmVlX2Z1bmNzXzEuc2VyaWFsaXplQnVmZmVyVG9WZWN0b3IpKGJ1ZikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXJlY3RseSBzZXJpYWxpemVzIGEgYnVmZmVyIHRoYXQgbWF5YmUgb2YgZml4ZWQsIG9yIHZhcmlhYmxlIGxlbmd0aC5cbiAgICAgKiBJdCBpcyBhc3N1bWVkIHRoZSBjb3JyZXNwb25kaW5nIGRlc2VyaWFsaXplIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHZhcmlhYmxlIGxlbmd0aCBkYXRhLCB0aHVzIHRoZSBsZW5ndGhcbiAgICAgKiBkb2VzIG5vdCBuZWVkIHRvIGJlIHByZWZpeGVkIGhlcmUuXG4gICAgICogSWYgc2VyaWFsaXppbmcgYSByYXcsIHZhcmlhYmxlIGxlbmd0aCBidWZmZXIsIHVzZSB2ZWN0b3IoKS5cbiAgICAgKi9cbiAgICBidWZmZXIoYnVmKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goYnVmKTtcbiAgICB9XG4gICAgc3RyaW5nKHN0cikge1xuICAgICAgICB0aGlzLnZlY3RvcihCdWZmZXIuZnJvbShzdHIpKTtcbiAgICB9XG4gICAgZGF0ZShkYXRlKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goKDAsIGZyZWVfZnVuY3NfMS5zZXJpYWxpemVEYXRlKShkYXRlKSk7XG4gICAgfVxuICAgIGdldEJ1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQodGhpcy5idWYpO1xuICAgIH1cbiAgICBzZXJpYWxpemVBcnJheShhcnIpIHtcbiAgICAgICAgdGhpcy5idWYucHVzaCgoMCwgXzEuc2VyaWFsaXplQnVmZmVyQXJyYXlUb1ZlY3RvcikoYXJyLm1hcCgoZSkgPT4gZS50b0J1ZmZlcigpKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VyaWFsaXplciA9IFNlcmlhbGl6ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMlZ5YVdGc2FYcGxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXpaWEpwWVd4cGVtVXZjMlZ5YVdGc2FYcGxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3gzUWtGQmFVUTdRVUZEYWtRc05rTkJUM05DTzBGQlJYUkNMRFJHUVVFMFJqdEJRVVUxUml4TlFVRmhMRlZCUVZVN1NVRkhja0k3VVVGR1VTeFJRVUZITEVkQlFXRXNSVUZCUlN4RFFVRkRPMGxCUlZvc1EwRkJRenRKUVVWVUxFbEJRVWtzUTBGQlF5eEpRVUZoTzFGQlEzWkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVRXNkVUpCUVZVc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyeERMRU5CUVVNN1NVRkZUU3hOUVVGTkxFTkJRVU1zUjBGQlZ6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZCTERCQ1FVRmhMRVZCUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU53UXl4RFFVRkRPMGxCUlUwc1MwRkJTeXhEUVVGRExFZEJRVmM3VVVGRGRFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlFTeDVRa0ZCV1N4RlFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGJrTXNRMEZCUXp0SlFVVk5MRTFCUVUwc1EwRkJReXhIUVVGWE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVUVzTkVKQlFXVXNSVUZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM1JETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSkxFMUJRVTBzUTBGQlF5eEhRVUZYTzFGQlEzWkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVRXNiME5CUVhWQ0xFVkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTVReXhEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNTeE5RVUZOTEVOQlFVTXNSMEZCVnp0UlFVTjJRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOeVFpeERRVUZETzBsQlJVMHNUVUZCVFN4RFFVRkRMRWRCUVZjN1VVRkRka0lzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYUVNc1EwRkJRenRKUVVWTkxFbEJRVWtzUTBGQlF5eEpRVUZWTzFGQlEzQkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVRXNNRUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzSkRMRU5CUVVNN1NVRkZUU3hUUVVGVE8xRkJRMlFzVDBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5xUXl4RFFVRkRPMGxCUlUwc1kwRkJZeXhEUVVGSkxFZEJRVkU3VVVGREwwSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlFTd3JRa0ZCTkVJc1JVRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1lzUTBGQlF6dERRVU5HTzBGQmNrUkVMR2REUVhGRVF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/serialize/serializer.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ViewingKey = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\");\nconst crypto_2 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst grumpkin_1 = __webpack_require__(/*! ../ecc/grumpkin */ \"./node_modules/@noir-lang/barretenberg/dest/ecc/grumpkin/index.js\");\nconst serialize_1 = __webpack_require__(/*! ../serialize */ \"./node_modules/@noir-lang/barretenberg/dest/serialize/index.js\");\nfunction deriveAESSecret(ecdhPubKey, ecdhPrivKey, grumpkin) {\n    const sharedSecret = grumpkin.mul(ecdhPubKey.toBuffer(), ecdhPrivKey);\n    const secretBuffer = Buffer.concat([sharedSecret, (0, serialize_1.numToUInt8)(1)]);\n    const hash = (0, crypto_1.createHash)('sha256').update(secretBuffer).digest();\n    return hash;\n}\nclass ViewingKey {\n    constructor(buffer) {\n        if (buffer && buffer.length > 0) {\n            if (buffer.length !== ViewingKey.SIZE) {\n                throw new Error('Invalid hash buffer.');\n            }\n            this.buffer = buffer;\n        }\n        else {\n            this.buffer = Buffer.alloc(0);\n        }\n    }\n    static fromString(str) {\n        return new ViewingKey(Buffer.from(str, 'hex'));\n    }\n    static random() {\n        return new ViewingKey((0, crypto_2.randomBytes)(ViewingKey.SIZE));\n    }\n    /**\n     * Returns the AES encrypted \"viewing key\".\n     * [AES: [32 bytes value][4 bytes assetId][4 bytes accountRequired][32 bytes creatorPubKey]] [64 bytes ephPubKey]\n     * @param noteBuf = Buffer.concat([value, assetId, accountRequired, creatorPubKey]);\n     * @param ownerPubKey - the public key contained within a value note\n     * @param ephPrivKey - a random field element (also used alongside the ownerPubKey in deriving a value note's secret)\n     */\n    static createFromEphPriv(noteBuf, ownerPubKey, ephPrivKey, grumpkin) {\n        if (noteBuf.length !== 72) {\n            throw new Error('Invalid note buffer.');\n        }\n        const ephPubKey = grumpkin.mul(grumpkin_1.Grumpkin.one, ephPrivKey);\n        const aesSecret = deriveAESSecret(ownerPubKey, ephPrivKey, grumpkin);\n        const aesKey = aesSecret.slice(0, 16);\n        const iv = aesSecret.slice(16, 32);\n        const cipher = (0, crypto_1.createCipheriv)('aes-128-cbc', aesKey, iv);\n        cipher.setAutoPadding(false); // plaintext is already a multiple of 16 bytes\n        const plaintext = Buffer.concat([iv.slice(0, 8), noteBuf]);\n        return new ViewingKey(Buffer.concat([cipher.update(plaintext), cipher.final(), ephPubKey]));\n    }\n    isEmpty() {\n        return this.buffer.length === 0;\n    }\n    equals(rhs) {\n        return this.buffer.equals(rhs.buffer);\n    }\n    toBuffer() {\n        return this.buffer;\n    }\n    toString() {\n        return this.toBuffer().toString('hex');\n    }\n}\nexports.ViewingKey = ViewingKey;\nViewingKey.SIZE = 144;\nViewingKey.EMPTY = new ViewingKey();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmlld2luZ19rZXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW9EO0FBRXBELHNDQUF3QztBQUN4Qyw4Q0FBMkM7QUFDM0MsNENBQTBDO0FBRTFDLFNBQVMsZUFBZSxDQUFDLFVBQTJCLEVBQUUsV0FBbUIsRUFBRSxRQUFrQjtJQUMzRixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0RSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFLElBQUEsc0JBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxJQUFJLEdBQUcsSUFBQSxtQkFBVSxFQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoRSxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFhLFVBQVU7SUFLckIsWUFBWSxNQUFlO1FBQ3pCLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDekM7WUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN0QjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFBLG9CQUFXLEVBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsV0FBNEIsRUFBRSxVQUFrQixFQUFFLFFBQWtCO1FBQzVHLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBUSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN6RCxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QyxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFBLHVCQUFjLEVBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsOENBQThDO1FBQzVFLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzNELE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBZTtRQUNwQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDOztBQTVESCxnQ0E2REM7QUE1RFEsZUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNYLGdCQUFLLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/viewing_key/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/wasm/barretenberg_wasm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/wasm/barretenberg_wasm.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("var __dirname = \"/\";\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BarretenbergWasm = exports.fetchCode = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst fs_1 = __webpack_require__(/*! fs */ \"?e50e\");\nconst detect_node_1 = (0, tslib_1.__importDefault)(__webpack_require__(/*! detect-node */ \"./node_modules/detect-node/browser.js\"));\nconst util_1 = __webpack_require__(/*! util */ \"../node_modules/util/util.js\");\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"./node_modules/@noir-lang/barretenberg/dest/crypto/index.js\");\nconst fifo_1 = __webpack_require__(/*! ../fifo */ \"./node_modules/@noir-lang/barretenberg/dest/fifo/index.js\");\nevents_1.EventEmitter.defaultMaxListeners = 30;\nasync function fetchCode() {\n    if (detect_node_1.default) {\n        return await (0, util_1.promisify)(fs_1.readFile)(__dirname + '/barretenberg.wasm');\n    }\n    else {\n        const res = await fetch('/barretenberg.wasm');\n        return Buffer.from(await res.arrayBuffer());\n    }\n}\nexports.fetchCode = fetchCode;\nclass BarretenbergWasm extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.mutexQ = new fifo_1.MemoryFifo();\n        this.mutexQ.put(true);\n    }\n    static async new(name = 'wasm', initial) {\n        const barretenberg = new BarretenbergWasm();\n        barretenberg.on('log', (0, log_1.createDebugLogger)(`bb:${name}`));\n        await barretenberg.init(undefined, initial);\n        return barretenberg;\n    }\n    async init(module, initial = 256) {\n        this.emit('log', `intial mem: ${initial}`);\n        this.memory = new WebAssembly.Memory({ initial, maximum: 65536 });\n        this.heap = new Uint8Array(this.memory.buffer);\n        const importObj = {\n            /* eslint-disable camelcase */\n            wasi_snapshot_preview1: {\n                environ_get: () => { },\n                environ_sizes_get: () => { },\n                fd_close: () => { },\n                fd_read: () => { },\n                fd_write: () => { },\n                fd_seek: () => { },\n                fd_fdstat_get: () => { },\n                fd_fdstat_set_flags: () => { },\n                path_open: () => { },\n                path_filestat_get: () => { },\n                proc_exit: () => { },\n                random_get: (arr, length) => {\n                    arr = arr >>> 0;\n                    const heap = new Uint8Array(this.memory.buffer);\n                    const randomData = (0, crypto_1.randomBytes)(length);\n                    for (let i = arr; i < arr + length; ++i) {\n                        heap[i] = randomData[i - arr];\n                    }\n                },\n            },\n            /* eslint-enable camelcase */\n            module: {},\n            env: {\n                logstr: (addr) => {\n                    addr = addr >>> 0;\n                    const m = this.getMemory();\n                    let i = addr;\n                    for (; m[i] !== 0; ++i)\n                        ;\n                    // eslint-disable-next-line\n                    const decoder = detect_node_1.default ? new ((__webpack_require__(/*! util */ \"../node_modules/util/util.js\").TextDecoder))() : new TextDecoder();\n                    const str = decoder.decode(m.slice(addr, i));\n                    const str2 = `${str} (mem:${m.length})`;\n                    this.emit('log', str2);\n                },\n                memory: this.memory,\n            },\n        };\n        if (module) {\n            this.instance = await WebAssembly.instantiate(module, importObj);\n            this.module = module;\n        }\n        else {\n            const { instance, module } = await WebAssembly.instantiate(await fetchCode(), importObj);\n            this.instance = instance;\n            this.module = module;\n        }\n    }\n    exports() {\n        return this.instance.exports;\n    }\n    /**\n     * When returning values from the WASM, use >>> operator to convert signed representation to unsigned representation.\n     */\n    call(name, ...args) {\n        if (!this.exports()[name]) {\n            throw new Error(`WASM function ${name} not found.`);\n        }\n        try {\n            return this.exports()[name](...args) >>> 0;\n        }\n        catch (err) {\n            const message = `WASM function ${name} aborted, error: ${err}`;\n            this.emit('log', message);\n            throw new Error(message);\n        }\n    }\n    getMemory() {\n        if (this.heap.length === 0) {\n            return new Uint8Array(this.memory.buffer);\n        }\n        return this.heap;\n    }\n    memSize() {\n        return this.getMemory().length;\n    }\n    sliceMemory(start, end) {\n        return this.getMemory().slice(start, end);\n    }\n    transferToHeap(arr, offset) {\n        const mem = this.getMemory();\n        for (let i = 0; i < arr.length; i++) {\n            mem[i + offset] = arr[i];\n        }\n    }\n    /**\n     * When calling the wasm, sometimes a caller will require exclusive access over a series of calls.\n     * e.g. When a result is written to address 0, one cannot have another caller writing to the same address via\n     * transferToHeap before the result is read via sliceMemory.\n     * acquire() gets a single token from a fifo. The caller must call release() to add the token back.\n     */\n    async acquire() {\n        await this.mutexQ.get();\n    }\n    release() {\n        if (this.mutexQ.length() !== 0) {\n            throw new Error('Release called but not acquired.');\n        }\n        this.mutexQ.put(true);\n    }\n}\nexports.BarretenbergWasm = BarretenbergWasm;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFycmV0ZW5iZXJnX3dhc20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzbS9iYXJyZXRlbmJlcmdfd2FzbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkJBQThCO0FBQzlCLDJFQUFpQztBQUNqQywrQkFBaUM7QUFDakMsbUNBQXNDO0FBQ3RDLGdDQUEyQztBQUMzQyxzQ0FBd0M7QUFDeEMsa0NBQXFDO0FBRXJDLHFCQUFZLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBRS9CLEtBQUssVUFBVSxTQUFTO0lBQzdCLElBQUkscUJBQU0sRUFBRTtRQUNWLE9BQU8sTUFBTSxJQUFBLGdCQUFTLEVBQUMsYUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLENBQUM7S0FDcEU7U0FBTTtRQUNMLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDOUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7S0FDN0M7QUFDSCxDQUFDO0FBUEQsOEJBT0M7QUFFRCxNQUFhLGdCQUFpQixTQUFRLHFCQUFZO0lBY2hEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFYRixXQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFXLENBQUM7UUFZekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQVZNLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsT0FBZ0I7UUFDckQsTUFBTSxZQUFZLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBQzVDLFlBQVksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUEsdUJBQWlCLEVBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxZQUFZLENBQUMsSUFB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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/wasm/barretenberg_wasm.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/wasm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/wasm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("var __dirname = \"/\";\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchCode = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\");\nconst fs_1 = __webpack_require__(/*! fs */ \"?e50e\");\nconst detect_node_1 = (0, tslib_1.__importDefault)(__webpack_require__(/*! detect-node */ \"./node_modules/detect-node/browser.js\"));\nconst util_1 = __webpack_require__(/*! util */ \"../node_modules/util/util.js\");\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./barretenberg_wasm */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/barretenberg_wasm.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./worker_pool */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/worker_pool.js\"), exports);\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./worker_factory */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/worker_factory.js\"), exports);\nevents_1.EventEmitter.defaultMaxListeners = 30;\nasync function fetchCode() {\n    if (detect_node_1.default) {\n        return await (0, util_1.promisify)(fs_1.readFile)(__dirname + '/barretenberg.wasm');\n    }\n    else {\n        const res = await fetch('/barretenberg.wasm');\n        return Buffer.from(await res.arrayBuffer());\n    }\n}\nexports.fetchCode = fetchCode;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzbS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkJBQThCO0FBQzlCLDJFQUFpQztBQUNqQywrQkFBaUM7QUFDakMsbUNBQXNDO0FBRXRDLG1FQUFvQztBQUNwQyw2REFBOEI7QUFDOUIsZ0VBQWlDO0FBR2pDLHFCQUFZLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBRS9CLEtBQUssVUFBVSxTQUFTO0lBQzdCLElBQUkscUJBQU0sRUFBRTtRQUNWLE9BQU8sTUFBTSxJQUFBLGdCQUFTLEVBQUMsYUFBUSxDQUFDLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLENBQUM7S0FDcEU7U0FBTTtRQUNMLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDOUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7S0FDN0M7QUFDSCxDQUFDO0FBUEQsOEJBT0MifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC93YXNtL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGdCQUFnQixtQkFBTyxDQUFDLHFGQUFPO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxpQkFBSTtBQUN6QixtREFBbUQsbUJBQU8sQ0FBQywwREFBYTtBQUN4RSxlQUFlLG1CQUFPLENBQUMsMENBQU07QUFDN0IsaUJBQWlCLG1CQUFPLENBQUMsK0NBQVE7QUFDakMsMEJBQTBCLG1CQUFPLENBQUMsa0dBQXFCO0FBQ3ZELDBCQUEwQixtQkFBTyxDQUFDLHNGQUFlO0FBQ2pELDBCQUEwQixtQkFBTyxDQUFDLDRGQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsU0FBUztBQUNuRTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3Qvd2FzbS9pbmRleC5qcz9kYjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mZXRjaENvZGUgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGRldGVjdF9ub2RlXzEgPSAoMCwgdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQpKHJlcXVpcmUoXCJkZXRlY3Qtbm9kZVwiKSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbigwLCB0c2xpYl8xLl9fZXhwb3J0U3RhcikocmVxdWlyZShcIi4vYmFycmV0ZW5iZXJnX3dhc21cIiksIGV4cG9ydHMpO1xuKDAsIHRzbGliXzEuX19leHBvcnRTdGFyKShyZXF1aXJlKFwiLi93b3JrZXJfcG9vbFwiKSwgZXhwb3J0cyk7XG4oMCwgdHNsaWJfMS5fX2V4cG9ydFN0YXIpKHJlcXVpcmUoXCIuL3dvcmtlcl9mYWN0b3J5XCIpLCBleHBvcnRzKTtcbmV2ZW50c18xLkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMzA7XG5hc3luYyBmdW5jdGlvbiBmZXRjaENvZGUoKSB7XG4gICAgaWYgKGRldGVjdF9ub2RlXzEuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIHV0aWxfMS5wcm9taXNpZnkpKGZzXzEucmVhZEZpbGUpKF9fZGlybmFtZSArICcvYmFycmV0ZW5iZXJnLndhc20nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCcvYmFycmV0ZW5iZXJnLndhc20nKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpKTtcbiAgICB9XG59XG5leHBvcnRzLmZldGNoQ29kZSA9IGZldGNoQ29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZkMkZ6YlM5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08wRkJRVUVzTWtKQlFUaENPMEZCUXpsQ0xESkZRVUZwUXp0QlFVTnFReXdyUWtGQmFVTTdRVUZEYWtNc2JVTkJRWE5ETzBGQlJYUkRMRzFGUVVGdlF6dEJRVU53UXl3MlJFRkJPRUk3UVVGRE9VSXNaMFZCUVdsRE8wRkJSMnBETEhGQ1FVRlpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUlM5Q0xFdEJRVXNzVlVGQlZTeFRRVUZUTzBsQlF6ZENMRWxCUVVrc2NVSkJRVTBzUlVGQlJUdFJRVU5XTEU5QlFVOHNUVUZCVFN4SlFVRkJMR2RDUVVGVExFVkJRVU1zWVVGQlVTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdTMEZEY0VVN1UwRkJUVHRSUVVOTUxFMUJRVTBzUjBGQlJ5eEhRVUZITEUxQlFVMHNTMEZCU3l4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdVVUZET1VNc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRE4wTTdRVUZEU0N4RFFVRkRPMEZCVUVRc09FSkJUME1pZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/wasm/index.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/wasm/worker_factory.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/wasm/worker_factory.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.destroyWorker = exports.createWorker = void 0;\nconst threads_1 = __webpack_require__(/*! threads */ \"./node_modules/threads/dist/index.js\");\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nasync function createWorker(id, module, initial, timeout = 5 * 60 * 1000) {\n    const debug = (0, log_1.createDebugLogger)(`bb:wasm${id ? ':' + id : ''}`);\n    const thread = await (0, threads_1.spawn)(new threads_1.Worker('./worker.js'), { timeout });\n    thread.logs().subscribe(debug);\n    await thread.init(module, initial);\n    return thread;\n}\nexports.createWorker = createWorker;\nasync function destroyWorker(worker) {\n    await threads_1.Thread.terminate(worker);\n}\nexports.destroyWorker = destroyWorker;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzbS93b3JrZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBZ0Q7QUFDaEQsZ0NBQTJDO0FBRXBDLEtBQUssVUFBVSxZQUFZLENBQ2hDLEVBQVcsRUFDWCxNQUEyQixFQUMzQixPQUFnQixFQUNoQixPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJO0lBRXZCLE1BQU0sS0FBSyxHQUFHLElBQUEsdUJBQWlCLEVBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGVBQUssRUFBcUIsSUFBSSxnQkFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN2RixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkMsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVhELG9DQVdDO0FBRU0sS0FBSyxVQUFVLGFBQWEsQ0FBQyxNQUEwQjtJQUM1RCxNQUFNLGdCQUFNLENBQUMsU0FBUyxDQUFDLE1BQWEsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFGRCxzQ0FFQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC93YXNtL3dvcmtlcl9mYWN0b3J5LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLG9CQUFvQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyxxREFBUztBQUNuQyxjQUFjLG1CQUFPLENBQUMsd0VBQVE7QUFDOUI7QUFDQSx5REFBeUQsbUJBQW1CO0FBQzVFLHFGQUFxRixTQUFTO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bub2lyLWxhbmcvYmFycmV0ZW5iZXJnL2Rlc3Qvd2FzbS93b3JrZXJfZmFjdG9yeS5qcz81Nzk2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZXN0cm95V29ya2VyID0gZXhwb3J0cy5jcmVhdGVXb3JrZXIgPSB2b2lkIDA7XG5jb25zdCB0aHJlYWRzXzEgPSByZXF1aXJlKFwidGhyZWFkc1wiKTtcbmNvbnN0IGxvZ18xID0gcmVxdWlyZShcIi4uL2xvZ1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdvcmtlcihpZCwgbW9kdWxlLCBpbml0aWFsLCB0aW1lb3V0ID0gNSAqIDYwICogMTAwMCkge1xuICAgIGNvbnN0IGRlYnVnID0gKDAsIGxvZ18xLmNyZWF0ZURlYnVnTG9nZ2VyKShgYmI6d2FzbSR7aWQgPyAnOicgKyBpZCA6ICcnfWApO1xuICAgIGNvbnN0IHRocmVhZCA9IGF3YWl0ICgwLCB0aHJlYWRzXzEuc3Bhd24pKG5ldyB0aHJlYWRzXzEuV29ya2VyKCcuL3dvcmtlci5qcycpLCB7IHRpbWVvdXQgfSk7XG4gICAgdGhyZWFkLmxvZ3MoKS5zdWJzY3JpYmUoZGVidWcpO1xuICAgIGF3YWl0IHRocmVhZC5pbml0KG1vZHVsZSwgaW5pdGlhbCk7XG4gICAgcmV0dXJuIHRocmVhZDtcbn1cbmV4cG9ydHMuY3JlYXRlV29ya2VyID0gY3JlYXRlV29ya2VyO1xuYXN5bmMgZnVuY3Rpb24gZGVzdHJveVdvcmtlcih3b3JrZXIpIHtcbiAgICBhd2FpdCB0aHJlYWRzXzEuVGhyZWFkLnRlcm1pbmF0ZSh3b3JrZXIpO1xufVxuZXhwb3J0cy5kZXN0cm95V29ya2VyID0gZGVzdHJveVdvcmtlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWQyOXlhMlZ5WDJaaFkzUnZjbmt1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZkMkZ6YlM5M2IzSnJaWEpmWm1GamRHOXllUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkRRU3h4UTBGQlowUTdRVUZEYUVRc1owTkJRVEpETzBGQlJYQkRMRXRCUVVzc1ZVRkJWU3haUVVGWkxFTkJRMmhETEVWQlFWY3NSVUZEV0N4TlFVRXlRaXhGUVVNelFpeFBRVUZuUWl4RlFVTm9RaXhQUVVGUExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4SlFVRkpPMGxCUlhaQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVRXNkVUpCUVdsQ0xFVkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRhRVVzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4SlFVRkJMR1ZCUVVzc1JVRkJjVUlzU1VGQlNTeG5Ra0ZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjJSaXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJReTlDTEUxQlFVMHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdTVUZEYmtNc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFWaEVMRzlEUVZkRE8wRkJSVTBzUzBGQlN5eFZRVUZWTEdGQlFXRXNRMEZCUXl4TlFVRXdRanRKUVVNMVJDeE5RVUZOTEdkQ1FVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRV0VzUTBGQlF5eERRVUZETzBGQlEzaERMRU5CUVVNN1FVRkdSQ3h6UTBGRlF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/wasm/worker_factory.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/dest/wasm/worker_pool.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/dest/wasm/worker_pool.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WorkerPool = void 0;\nconst log_1 = __webpack_require__(/*! ../log */ \"./node_modules/@noir-lang/barretenberg/dest/log/index.js\");\nconst worker_factory_1 = __webpack_require__(/*! ./worker_factory */ \"./node_modules/@noir-lang/barretenberg/dest/wasm/worker_factory.js\");\nconst debug = (0, log_1.createDebugLogger)('bb:worker_pool');\nclass WorkerPool {\n    constructor() {\n        this.workers = [];\n    }\n    static async new(barretenberg, poolSize) {\n        const pool = new WorkerPool();\n        await pool.init(barretenberg.module, poolSize);\n        return pool;\n    }\n    async init(module, poolSize) {\n        debug(`creating ${poolSize} workers...`);\n        const start = new Date().getTime();\n        this.workers = await Promise.all(Array(poolSize)\n            .fill(0)\n            .map((_, i) => (0, worker_factory_1.createWorker)(`${i}`, module, i === 0 ? 10000 : 256)));\n        debug(`created workers: ${new Date().getTime() - start}ms`);\n    }\n    async destroy() {\n        await Promise.all(this.workers.map(worker_factory_1.destroyWorker));\n    }\n}\nexports.WorkerPool = WorkerPool;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyX3Bvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FzbS93b3JrZXJfcG9vbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnQ0FBMkM7QUFHM0MscURBQStEO0FBRS9ELE1BQU0sS0FBSyxHQUFHLElBQUEsdUJBQWlCLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUVsRCxNQUFhLFVBQVU7SUFBdkI7UUFDUyxZQUFPLEdBQXlCLEVBQUUsQ0FBQztJQXNCNUMsQ0FBQztJQXBCQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUE4QixFQUFFLFFBQWdCO1FBQy9ELE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0MsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUEwQixFQUFFLFFBQWdCO1FBQzVELEtBQUssQ0FBQyxZQUFZLFFBQVEsYUFBYSxDQUFDLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDOUIsS0FBSyxDQUFDLFFBQVEsQ0FBQzthQUNaLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDUCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFBLDZCQUFZLEVBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUN0RSxDQUFDO1FBQ0YsS0FBSyxDQUFDLG9CQUFvQixJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBYSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0Y7QUF2QkQsZ0NBdUJDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG5vaXItbGFuZy9iYXJyZXRlbmJlcmcvZGVzdC93YXNtL3dvcmtlcl9wb29sLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixjQUFjLG1CQUFPLENBQUMsd0VBQVE7QUFDOUIseUJBQXlCLG1CQUFPLENBQUMsNEZBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsRUFBRTtBQUNuRSxrQ0FBa0MsNkJBQTZCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Abm9pci1sYW5nL2JhcnJldGVuYmVyZy9kZXN0L3dhc20vd29ya2VyX3Bvb2wuanM/NjMwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV29ya2VyUG9vbCA9IHZvaWQgMDtcbmNvbnN0IGxvZ18xID0gcmVxdWlyZShcIi4uL2xvZ1wiKTtcbmNvbnN0IHdvcmtlcl9mYWN0b3J5XzEgPSByZXF1aXJlKFwiLi93b3JrZXJfZmFjdG9yeVwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGxvZ18xLmNyZWF0ZURlYnVnTG9nZ2VyKSgnYmI6d29ya2VyX3Bvb2wnKTtcbmNsYXNzIFdvcmtlclBvb2wge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndvcmtlcnMgPSBbXTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIG5ldyhiYXJyZXRlbmJlcmcsIHBvb2xTaXplKSB7XG4gICAgICAgIGNvbnN0IHBvb2wgPSBuZXcgV29ya2VyUG9vbCgpO1xuICAgICAgICBhd2FpdCBwb29sLmluaXQoYmFycmV0ZW5iZXJnLm1vZHVsZSwgcG9vbFNpemUpO1xuICAgICAgICByZXR1cm4gcG9vbDtcbiAgICB9XG4gICAgYXN5bmMgaW5pdChtb2R1bGUsIHBvb2xTaXplKSB7XG4gICAgICAgIGRlYnVnKGBjcmVhdGluZyAke3Bvb2xTaXplfSB3b3JrZXJzLi4uYCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMud29ya2VycyA9IGF3YWl0IFByb21pc2UuYWxsKEFycmF5KHBvb2xTaXplKVxuICAgICAgICAgICAgLmZpbGwoMClcbiAgICAgICAgICAgIC5tYXAoKF8sIGkpID0+ICgwLCB3b3JrZXJfZmFjdG9yeV8xLmNyZWF0ZVdvcmtlcikoYCR7aX1gLCBtb2R1bGUsIGkgPT09IDAgPyAxMDAwMCA6IDI1NikpKTtcbiAgICAgICAgZGVidWcoYGNyZWF0ZWQgd29ya2VyczogJHtuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0fW1zYCk7XG4gICAgfVxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMud29ya2Vycy5tYXAod29ya2VyX2ZhY3RvcnlfMS5kZXN0cm95V29ya2VyKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Xb3JrZXJQb29sID0gV29ya2VyUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWQyOXlhMlZ5WDNCdmIyd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdmQyRnpiUzkzYjNKclpYSmZjRzl2YkM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4blEwRkJNa003UVVGSE0wTXNjVVJCUVN0RU8wRkJSUzlFTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVFc2RVSkJRV2xDTEVWQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEJRVVZzUkN4TlFVRmhMRlZCUVZVN1NVRkJka0k3VVVGRFV5eFpRVUZQTEVkQlFYbENMRVZCUVVVc1EwRkJRenRKUVhOQ05VTXNRMEZCUXp0SlFYQkNReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRTRRaXhGUVVGRkxGRkJRV2RDTzFGQlF5OUVMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeEZRVUZGTEVOQlFVTTdVVUZET1VJc1RVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGREwwTXNUMEZCVHl4SlFVRkpMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVTBzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRXdRaXhGUVVGRkxGRkJRV2RDTzFGQlF6VkVMRXRCUVVzc1EwRkJReXhaUVVGWkxGRkJRVkVzWVVGQllTeERRVUZETEVOQlFVTTdVVUZEZWtNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeEpRVUZKTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRSUVVOdVF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGRE9VSXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJRenRoUVVOYUxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdZVUZEVUN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkJMRFpDUVVGWkxFVkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVU4wUlN4RFFVRkRPMUZCUTBZc1MwRkJTeXhEUVVGRExHOUNRVUZ2UWl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEV0QlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRPVVFzUTBGQlF6dEpRVVZOTEV0QlFVc3NRMEZCUXl4UFFVRlBPMUZCUTJ4Q0xFMUJRVTBzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5dzRRa0ZCWVN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOeVJDeERRVUZETzBOQlEwWTdRVUYyUWtRc1owTkJkVUpESW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/dest/wasm/worker_pool.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/node_modules/@noir-lang/aztec_backend/aztec_backend.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/node_modules/@noir-lang/aztec_backend/aztec_backend.js ***!
  \*****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var __dirname = \"/\";\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextEncoder, TextDecoder } = __webpack_require__(/*! util */ \"../node_modules/util/util.js\");\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\nfunction __wbg_adapter_26(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h05c93453828e8688(retptr, arg0, arg1, addBorrowedObject(arg2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\nfunction __wbg_adapter_29(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hca967ff60b9a40de(retptr, arg0, arg1, addBorrowedObject(arg2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n}\n\nlet cachedUint32Memory0 = new Uint32Array();\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4);\n    const mem = getUint32Memory0();\n    for (let i = 0; i < array.length; i++) {\n        mem[ptr / 4 + i] = addHeapObject(array[i]);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {any} circuit\n* @param {(string)[]} initial_js_witness\n* @returns {Uint8Array}\n*/\nmodule.exports.compute_witnesses = function(circuit, initial_js_witness) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayJsValueToWasm0(initial_js_witness, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.compute_witnesses(retptr, addHeapObject(circuit), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {any} acir\n* @returns {Uint8Array}\n*/\nmodule.exports.serialise_acir_to_barrtenberg_circuit = function(acir) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.serialise_acir_to_barrtenberg_circuit(retptr, addHeapObject(acir));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {any} acir\n* @param {Uint8Array} witness_arr\n* @returns {Uint8Array}\n*/\nmodule.exports.packed_witness_to_witness = function(acir, witness_arr) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(witness_arr, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.packed_witness_to_witness(retptr, addHeapObject(acir), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {string} vk_method\n* @returns {string}\n*/\nmodule.exports.eth_contract_from_cs = function(vk_method) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(vk_method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.eth_contract_from_cs(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* @param {(string)[]} pub_inputs_js_string\n* @returns {Uint8Array}\n*/\nmodule.exports.serialise_public_inputs = function(pub_inputs_js_string) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayJsValueToWasm0(pub_inputs_js_string, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.serialise_public_inputs(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n* A struct representing an aborted instruction execution, with a message\n* indicating the cause.\n*/\nclass WasmerRuntimeError {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmerruntimeerror_free(ptr);\n    }\n}\nmodule.exports.WasmerRuntimeError = WasmerRuntimeError;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_number_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n};\n\nmodule.exports.__wbindgen_number_new = function(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = JSON.stringify(obj === undefined ? null : obj);\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_new_693216e109162396 = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_Global_71ffa48bd62833fb = function(arg0) {\n    const ret = getObject(arg0) instanceof WebAssembly.Global;\n    return ret;\n};\n\nmodule.exports.__wbg_get_ad41fee29b7e0f53 = function(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_length_a73bfd4c96dd97ef = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_new_ee1a3da85465d621 = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_get_72332cd2bc57924c = function() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_new_e6a9fecc2bf26696 = function() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithlength_df0e16f0b90b6295 = function(arg0) {\n    const ret = new Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_64cc39858b2ec3f1 = function(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nmodule.exports.__wbg_push_0bc7fce4a139a883 = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_Function_209355dc9c61e243 = function(arg0) {\n    const ret = getObject(arg0) instanceof Function;\n    return ret;\n};\n\nmodule.exports.__wbg_newwithargs_97d68be691eaac2d = function(arg0, arg1, arg2, arg3) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_bind_1f440a7fa661cc6e = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).bind(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_name_ef3d2d249cf2458b = function(arg0) {\n    const ret = getObject(arg0).name;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_constructor_49b344c0ab64de09 = function(arg0) {\n    const ret = getObject(arg0).constructor;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getPrototypeOf_d6d1f0000eddc427 = function(arg0) {\n    const ret = Object.getPrototypeOf(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_buffer_34f5ec9f8a838ba0 = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithbyteoffsetandlength_88fdad741db1b182 = function(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_cda198d9dbc6d7ea = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_1a930cfcda1a8067 = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_length_51f19f73d6d9eff3 = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_setindex_4756adbb17b8d274 = function(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = arg2;\n};\n\nmodule.exports.__wbg_new_444e3ec65846d469 = function() { return handleError(function (arg0, arg1) {\n    const ret = new WebAssembly.Instance(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_exports_e80fe8dbc3c6be2b = function(arg0) {\n    const ret = getObject(arg0).exports;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_7ae57ee5fea65b3e = function() { return handleError(function (arg0) {\n    const ret = new WebAssembly.Module(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_exports_f7e41889b96910fe = function(arg0) {\n    const ret = WebAssembly.Module.exports(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_imports_bd88674ca332e5c3 = function(arg0) {\n    const ret = WebAssembly.Module.imports(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_instanceof_Table_eb0b31569696af5c = function(arg0) {\n    const ret = getObject(arg0) instanceof WebAssembly.Table;\n    return ret;\n};\n\nmodule.exports.__wbg_get_4987f87cbcb53a7b = function() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).get(arg1 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_instanceof_Memory_c84c3bb5e7edc84f = function(arg0) {\n    const ret = getObject(arg0) instanceof WebAssembly.Memory;\n    return ret;\n};\n\nmodule.exports.__wbg_new_c72422ed33ac6448 = function() { return handleError(function (arg0) {\n    const ret = new WebAssembly.Memory(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_apply_bd59f70527113b67 = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.apply(getObject(arg0), getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_set_2762e698c2f5b7e0 = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n    return ret;\n}, arguments) };\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_function_table = function() {\n    const ret = wasm.__wbindgen_export_2;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_closure_wrapper174 = function(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 33, __wbg_adapter_26);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_closure_wrapper176 = function(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 33, __wbg_adapter_29);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_closure_wrapper178 = function(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 33, __wbg_adapter_26);\n    return addHeapObject(ret);\n};\n\nconst path = (__webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\").join)(__dirname, 'aztec_backend_bg.wasm');\nconst bytes = (__webpack_require__(/*! fs */ \"?8d1b\").readFileSync)(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/node_modules/@noir-lang/aztec_backend/aztec_backend.js\n");

/***/ }),

/***/ "./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": function() { return /* binding */ __assign; },\n/* harmony export */   \"__asyncDelegator\": function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   \"__asyncGenerator\": function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   \"__asyncValues\": function() { return /* binding */ __asyncValues; },\n/* harmony export */   \"__await\": function() { return /* binding */ __await; },\n/* harmony export */   \"__awaiter\": function() { return /* binding */ __awaiter; },\n/* harmony export */   \"__classPrivateFieldGet\": function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   \"__classPrivateFieldIn\": function() { return /* binding */ __classPrivateFieldIn; },\n/* harmony export */   \"__classPrivateFieldSet\": function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   \"__createBinding\": function() { return /* binding */ __createBinding; },\n/* harmony export */   \"__decorate\": function() { return /* binding */ __decorate; },\n/* harmony export */   \"__exportStar\": function() { return /* binding */ __exportStar; },\n/* harmony export */   \"__extends\": function() { return /* binding */ __extends; },\n/* harmony export */   \"__generator\": function() { return /* binding */ __generator; },\n/* harmony export */   \"__importDefault\": function() { return /* binding */ __importDefault; },\n/* harmony export */   \"__importStar\": function() { return /* binding */ __importStar; },\n/* harmony export */   \"__makeTemplateObject\": function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   \"__metadata\": function() { return /* binding */ __metadata; },\n/* harmony export */   \"__param\": function() { return /* binding */ __param; },\n/* harmony export */   \"__read\": function() { return /* binding */ __read; },\n/* harmony export */   \"__rest\": function() { return /* binding */ __rest; },\n/* harmony export */   \"__spread\": function() { return /* binding */ __spread; },\n/* harmony export */   \"__spreadArray\": function() { return /* binding */ __spreadArray; },\n/* harmony export */   \"__spreadArrays\": function() { return /* binding */ __spreadArrays; },\n/* harmony export */   \"__values\": function() { return /* binding */ __values; }\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nfunction __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@noir-lang/barretenberg/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Commitment; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vanta_dist_vanta_waves_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vanta/dist/vanta.waves.min.js */ \"./node_modules/vanta/dist/vanta.waves.min.js\");\n/* harmony import */ var vanta_dist_vanta_waves_min_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vanta_dist_vanta_waves_min_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var vanta_dist_vanta_net_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vanta/dist/vanta.net.min */ \"./node_modules/vanta/dist/vanta.net.min.js\");\n/* harmony import */ var vanta_dist_vanta_net_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vanta_dist_vanta_net_min__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aztec/sdk */ \"./node_modules/@aztec/sdk/index.js\");\n/* harmony import */ var _aztec_sdk__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_aztec_sdk__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! crypto */ \"./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./pages/utils.ts\");\n/* harmony import */ var _nomiclabs_hardhat_ethers_signers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @nomiclabs/hardhat-ethers/signers */ \"../node_modules/@nomiclabs/hardhat-ethers/signers.js\");\n/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! chai */ \"../node_modules/chai/index.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! fs */ \"?3109\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _noir_lang_barretenberg_dest_client_proofs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noir-lang/barretenberg/dest/client_proofs */ \"./node_modules/@noir-lang/barretenberg/dest/client_proofs/index.js\");\n/* harmony import */ var _noir_lang_barretenberg_dest_client_proofs__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_noir_lang_barretenberg_dest_client_proofs__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nvar _jsxFileName = \"/Users/margulus/Desktop/Programming/Masters/Repository/Github/cyclone/frontend/pages/index.js\",\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n // import { compile, acir_from_bytes } from '@noir-lang/noir_wasm';\n\n // import { BarretenbergWasm } from '@noir-lang/barretenberg/dest/wasm';\n// import { SinglePedersen } from '@noir-lang/barretenberg/dest/crypto/pedersen';\n// import { Schnorr } from '@noir-lang/barretenberg/dest/crypto/schnorr';\n// import { serialise_public_inputs } from '@noir-lang/aztec_backend';\n\n\nfunction Commitment() {\n  _s();\n\n  const {\n    0: userAccount,\n    1: setUserAddress\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    AztecSdkUser: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.AztecSdkUser\n  });\n  const {\n    0: publicKeyNew,\n    1: setPublicKey\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    GrumpkinAddress: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.GrumpkinAddress\n  });\n  const {\n    0: privateKeyNew,\n    1: setPrivateKey\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    Buffer\n  });\n  const {\n    0: spendingSigner,\n    1: setSpendingSigner\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    SchnorrSigner: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.SchnorrSigner\n  });\n  const {\n    0: walletAddress,\n    1: setWalletAddress\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    EthAddress: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.EthAddress\n  });\n  const {\n    0: sdk,\n    1: setSDK\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    AztecSdk: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.AztecSdk\n  });\n  const {\n    0: ethAccount,\n    1: setEthAccount\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    EthAddress: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.EthAddress\n  });\n\n  let renderSDK = () => {\n    InitializeSDK();\n  };\n\n  let renderRegisterUser = () => {\n    registerUser();\n  };\n\n  let renderProveDeposit = () => {\n    proveDeposit();\n  };\n\n  async function proveDeposit() {// let acirByteArray = path_to_uint8array(path.resolve(__dirname, '../circuits/build/p.acir'));\n    // let acir = acir_from_bytes(acirByteArray);\n    // let merkleProof = tree.proof(0);\n    // let note_hash_path = merkleProof.pathElements;\n    // let abi = {\n    //   recipient: recipient,\n    //   priv_key: `0x` + sender_priv_key.toString('hex'),\n    //   note_root: `0x` + note_root, \n    //   index: 0,\n    //   note_hash_path: [\n    //     `0x` + note_hash_path[0],\n    //     `0x` + note_hash_path[1],\n    //     `0x` + note_hash_path[2],\n    //   ],\n    //   secret: `0x` + transfers[0].secret.toString('hex'),\n    //   return: [`0x` + transfers[0].nullifier.toString('hex'), recipient],\n    // };\n    // let [prover, verifier] = await setup_generic_prover_and_verifier(acir);\n    // const proof = await create_proof(prover, acir, abi);\n    // const verified = await verify_proof(verifier, proof);\n    // console.log(\"verifier is: \" + verifier);\n  }\n\n  async function registerUser() {\n    const depositTokenQuantity = ethers__WEBPACK_IMPORTED_MODULE_11__.ethers.utils.parseEther(\"1\").toBigInt();\n    let txId = await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.depositEthToAztec)(walletAddress, publicKeyNew, depositTokenQuantity, _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.TxSettlementTime.NEXT_ROLLUP, sdk);\n    console.log(\"deposit txId\", txId);\n    console.log(\"lookup tx on explorer\", `https://aztec-connect-testnet-explorer.aztec.network/goerli/tx/${txId.toString()}`);\n  }\n\n  async function InitializeSDK() {\n    // Retrieve user's metamask address\n    const provider = new ethers__WEBPACK_IMPORTED_MODULE_11__.ethers.providers.Web3Provider(window.ethereum);\n    const ethereumProvider = new _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.EthersAdapter(provider);\n    await provider.send(\"eth_requestAccounts\", []);\n    const userSigner = provider.getSigner();\n    const userAddress = _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.EthAddress.fromString(await userSigner.getAddress());\n    console.log(\"user's metamask wallet address is: \" + userAddress);\n    setWalletAddress(userAddress); // Initialize SDK\n\n    const sdk = await (0,_aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.createAztecSdk)(ethereumProvider, {\n      serverUrl: \"https://api.aztec.network/aztec-connect-testnet/falafel\",\n      // testnet\n      pollInterval: 1000,\n      memoryDb: true,\n      // set to false to save chain data\n      debug: \"bb:*\",\n      // print debug logs\n      flavour: _aztec_sdk__WEBPACK_IMPORTED_MODULE_3__.SdkFlavour.PLAIN,\n      // Use PLAIN with Nodejs\n      minConfirmation: 1 // ETH block confirmations\n\n    });\n    sdk.run();\n    await sdk.awaitSynchronised();\n    setSDK(sdk); // Generate privacy keys which enables decrypting the notes and calculating the account balance\n\n    console.log(\"Generate the user's privacy keypair\");\n    const {\n      publicKey,\n      privateKey\n    } = await sdk.generateAccountKeyPair(userAddress);\n    let accounts = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    console.log(\"Public key is: \" + publicKey);\n    console.log(\"Private key is: \" + privateKey);\n    setPublicKey(publicKey);\n    setPrivateKey(privateKey);\n    console.log(\"Add user to SDK\");\n    let account = await sdk.userExists(publicKey);\n\n    if (account == true) {\n      await sdk.getUser(publicKey);\n      await sdk.addUser(privateKey);\n    }\n\n    setUserAddress(account); // Generate user's spending key and register it\n\n    const spendingPrivateKey = await sdk.generateSpendingKeyPair(userAddress);\n    console.log(\"Spending key is:\" + spendingPrivateKey); // Create Aztec signer using spending key\n\n    const signer = await sdk.createSchnorrSigner(spendingPrivateKey);\n    setSpendingSigner(signer);\n    console.log(\"Signer:\", signer);\n  } // Vanta UI design\n\n\n  const {\n    0: vantaEffect,\n    1: setVantaEffect\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const vantaRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!vantaEffect) {\n      setVantaEffect(vanta_dist_vanta_waves_min_js__WEBPACK_IMPORTED_MODULE_1___default()({\n        el: vantaRef.current,\n        THREE: three__WEBPACK_IMPORTED_MODULE_12__,\n        mouseControls: true,\n        touchControls: true,\n        gyroControls: false,\n        minHeight: 200.00,\n        minWidth: 200.00,\n        scale: 1.00,\n        scaleMobile: 1.00,\n        color: 0x711,\n        shininess: 35.00,\n        waveHeight: 31.50,\n        waveSpeed: 0.25,\n        zoom: 0.95\n      }));\n    }\n  }, [vantaEffect]);\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"main\", {\n    ref: vantaRef,\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"section\", {\n      class: \"general\",\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n        class: \"homepage\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"big\", {\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"u\", {\n            children: \"Cyclone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          class: \"homepag-sub\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"small\", {\n            children: \"Proving interactions on Aztec using Noir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          class: \"button-group\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            class: \"button button1 b1\",\n            onClick: renderSDK,\n            children: \"Create Privacy and Spending Keys\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          class: \"button-group\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            class: \"button button1 b1\",\n            onClick: renderRegisterUser,\n            children: \"Register a User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          class: \"button-group\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            class: \"button button1 b1\",\n            onClick: renderProveDeposit,\n            children: \"Generate Zero-Knowledge Proof of Deposit on Aztec\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Commitment, \"+FcEX3IEk4SCcDLkSV7UseE9NYE=\");\n\n_c = Commitment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Commitment\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ }),

/***/ "?e50e":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?8d1b":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ })

});